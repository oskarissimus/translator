msgid ""
msgstr ""
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "chapters.a_bit_more_about_strings.title"
msgstr "Trochę więcej o łańcuchach znaków"

msgid "chapters.boolean operators.title"
msgstr "Operatory logiczne"

msgid "chapters.dictionaries.title"
msgstr "Słowniki"

msgid "chapters.for_loops.title"
msgstr "Pętle for"

msgid "chapters.functions.title"
msgstr "Funkcje"

msgid "chapters.if_statements.title"
msgstr "Instrukcje warunkowe if"

msgid "chapters.lists.title"
msgstr "Listy"

msgid "chapters.nested_loops.title"
msgstr "Zagnieżdżone pętle"

msgid "chapters.string_basics.title"
msgstr "Podstawy łańcuchów znaków"

msgid "chapters.the_shell.title"
msgstr "Powłoka systemowa"

msgid "chapters.tic_tac_toe_project.title"
msgstr "Projekt gry w kółko i krzyżyk"

msgid "chapters.variables.title"
msgstr "Zmienne"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\" went to \""
msgstr "\" poszedł do \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\" with \""
msgstr "\" z \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\" years old.\""
msgstr "\" lat.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"!! Warning !!\""
msgstr "\"!! Ostrzeżenie !!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"!!!! DANGER !!!!\""
msgstr "\"!!!! UWAGA !!!!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"++more++\""
msgstr "\"++więcej++\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\". You are \""
msgstr "\". Masz \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.\".jpg\""
msgstr "\".jpg\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.\".png\""
msgstr "\".png\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"=the same=\""
msgstr "\"=takie samo=\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
msgid "code_bits.\"ABC\""
msgstr "\"ABC\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise.text
#.     letters = "ABCD"
msgid "code_bits.\"ABCD\""
msgstr "\"ABCD\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     (name == "Alice") or ("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == ("Alice" or "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#.     name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice" or name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
msgid "code_bits.\"Alice\""
msgstr "\"Alicja\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quotes
#. print("Alice's Diner")
msgid "code_bits.\"Alice's Diner\""
msgstr "\"Diner Alicji\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"Amazing! Are you psychic?\""
msgstr "\"Świetnie! Masz zdolności paranormalne?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     (name == "Alice") or ("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == ("Alice" or "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#.     name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice" or name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
msgid "code_bits.\"Bob\""
msgstr "\"Bob\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
msgid "code_bits.\"Charlie\""
msgstr "\"Charlie\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"DANGER\""
msgstr "\"NIEBEZPIECZEŃSTWO\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"English: \""
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"French: \""
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"German: \""
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\"Hello \""
msgstr "\"Witaj \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
msgid "code_bits.\"Hello\""
msgstr "\"Witaj\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.\"How are you?\""
msgstr "\"Jak się masz?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
msgid "code_bits.\"I can't process \""
msgstr "\"Nie mogę przetworzyć \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.\"It's a draw!\""
msgstr "\"To remis!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"Nope!\""
msgstr "\"Nie!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.\"OK\""
msgstr "\"OK\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper
#. sentence = "Python rocks!"
#. new_sentence = sentence.upper()
#. print(sentence)
#. print(new_sentence)
msgid "code_bits.\"Python rocks!\""
msgstr "\"Python rządzi!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
msgid "code_bits.\"Python\""
msgstr "\"Python\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
#. print("Special cases aren't special enough to break the rules.")
msgid "code_bits.\"Special cases aren't special enough to break the rules.\""
msgstr "\"Wyjątkowe przypadki nie są na tyle wyjątkowe, aby łamać zasady.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"Warning\""
msgstr "\"Ostrzeżenie\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"What number am I thinking of?\""
msgstr "\"O jakiej liczbie myślę?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
msgid "code_bits.\"\\n\""
msgstr "\"\\n\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"abc\""
msgstr "\"abc\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"cat.jpg\""
msgstr "\"kot.jpg\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"def\""
msgstr "\"def\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"dog.png\""
msgstr "\"pies.png\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"ghi\""
msgstr "\"ghi\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"goodbye world\""
msgstr "\"do widzenia świat\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"goodbye\""
msgstr "\"do widzenia\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"hello there\""
msgstr "\"cześć tam\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"hello world\""
msgstr "\"cześć świat\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
msgid "code_bits.\"hello\""
msgstr "\"cześć\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"how are you\""
msgstr "\"jak się masz\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"invoice.pdf\""
msgstr "\"faktura.pdf\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\"lunch\""
msgstr "\"lunch\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"more\""
msgstr "\"więcej\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"the same\""
msgstr "\"takie samo\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.final_text.text
#.     strings[1].append("today?")
msgid "code_bits.\"today?\""
msgstr "\"dzisiaj?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.' 123\\n1XOX\\n2O  \\n3 XO'"
msgstr "' 123\\n1XOX\\n2O  \\n3 XO'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append
#. 'Python'.append(' is cool!')
msgid "code_bits.' is cool!'"
msgstr "' jest fajny!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
msgid "code_bits.' world'"
msgstr "' świat'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
#. print('"Talk is cheap. Show me the code." - Linus Torvalds')
msgid "code_bits.'\"Talk is cheap. Show me the code.\" - Linus Torvalds'"
msgstr "'\"Gadanie jest tanie. Pokaż mi kod.\" - Linus Torvalds'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.'AB'"
msgstr "'AB'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
msgid "code_bits.'AGTAGCGTC'"
msgstr "'AGTAGCGTC'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
msgid "code_bits.'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'"
msgstr "'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
#. your_name = 'Alex'
msgid "code_bits.'Alex'"
msgstr "'Aleks'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text
#.     name = 'Alice'
msgid "code_bits.'Alice'"
msgstr "'Alicja'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.'Amazing'"
msgstr "'Niesamowite'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
msgid "code_bits.'Bob'"
msgstr "'Bob'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
msgid "code_bits.'Charlie'"
msgstr "'Charlie'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
msgid "code_bits.'Dylan'"
msgstr "'Dylan'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'French'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'German'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
msgid "code_bits.'Go!'"
msgstr "'Ruszaj!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#.     word = 'Goodbye'
#.     print(sentence)
msgid "code_bits.'Goodbye'"
msgstr "'Do widzenia'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
msgid "code_bits.'HELLO THERE'"
msgstr "'WITAJ TAM'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.hello_plus_name
#. 'Hello ' + your_name
msgid "code_bits.'Hello '"
msgstr "'Witaj '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
msgid "code_bits.'Hello World'"
msgstr "'Witaj Świecie'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
msgid "code_bits.'Hello there'"
msgstr "'Witaj tam'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign.text
#.     word = 'Hello'
msgid "code_bits.'Hello'"
msgstr "'Witaj'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else
#. condition = True
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else_false
#. condition = False
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
msgid "code_bits.'No'"
msgstr "'Nie'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
msgid "code_bits.'One more exercise, and then you can relax.'"
msgstr "'Jeszcze jedno ćwiczenie, a potem możesz odpocząć.'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append
#. 'Python'.append(' is cool!')
msgid "code_bits.'Python'"
msgstr "'Python'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
msgid "code_bits.'Starting... '"
msgstr "'Rozpoczynanie... '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.'TCATCGCAGGAATCAATGTCCTACCGAATA'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard
#. sentence = 'The e key on my keyboard is broken'
#. new_sentence = ''
#. for c in sentence:
#.     if c != 'e':
#.         new_sentence += c
#. print(new_sentence)
msgid "code_bits.'The e key on my keyboard is broken'"
msgstr "'Klawisz e na mojej klawiaturze jest zepsuty'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.first_if_statements
#. if True:
#.     print('This gets printed')
#. if False:
#.     print('This does not')
msgid "code_bits.'This does not'"
msgstr "'To nie'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.first_if_statements
#. if True:
#.     print('This gets printed')
#. if False:
#.     print('This does not')
msgid "code_bits.'This gets printed'"
msgstr "'To zostanie wydrukowane'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.'This'"
msgstr "'To'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input
#. print('Type your name, then press Enter:')
#. name = input()
#. print(f'Hello {name}!')
msgid "code_bits.'Type your name, then press Enter:'"
msgstr "'Wpisz swoje imię, a następnie naciśnij Enter:'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
msgid "code_bits.'World'"
msgstr "'Swiecie'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
msgid "code_bits.'XOX\\nO  \\n XO'"
msgstr "'XOX\\nO  \\n XO'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
msgid "code_bits.'X|O|X\\n-+-+-\\nO| | \\n-+-+-\\n |X|O'"
msgstr "'X|O|X\\n-+-+-\\nO| | \\n-+-+-\\n |X|O'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else
#. condition = True
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else_false
#. condition = False
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
msgid "code_bits.'Yes'"
msgstr "'Tak'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
msgid "code_bits.'\\n'"
msgstr "'\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
msgid "code_bits.'\\nO to play:\\n'"
msgstr "'\\nO do gry:\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
msgid "code_bits.'\\nX to play:\\n'"
msgstr "'\\nX do gry:\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.not_callable
#. f = 'a string'
#. print(callable(f))
#. f()
msgid "code_bits.'a string'"
msgstr "'łańcuch'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.introducing_equality
#. print(1 + 2 == 3)
#. print(4 + 5 == 6)
#. print('ab' + 'c' == 'a' + 'bc')
msgid "code_bits.'ab'"
msgstr "'ab'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
msgid "code_bits.'abc'"
msgstr "'abc'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.'abcqwe'"
msgstr "'abcqwe'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.'aeiou'"
msgstr "'aeiou'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'apfel'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access2
#. french['apple']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'apple': 3}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'apple'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
msgid "code_bits.'are'"
msgstr "'są'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.introducing_equality
#. print(1 + 2 == 3)
#. print(4 + 5 == 6)
#. print('ab' + 'c' == 'a' + 'bc')
msgid "code_bits.'bc'"
msgstr "'bc'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.'boite'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access3
#. french['box']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'box'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'cat'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'de'"
msgstr "'de'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
msgid "code_bits.'def'"
msgstr "'def'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'dog'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'fghi'"
msgstr "'fghi'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
msgid "code_bits.'ghi'"
msgstr "'ghi'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.'ghiq'"
msgstr "'ghiq'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'goodbye world'"
msgstr "'do widzenia świat'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'goodbye'"
msgstr "'do widzenia'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
msgid "code_bits.'hello '"
msgstr "'cześć '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'hello there'"
msgstr "'cześć tam'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'hello world'"
msgstr "'cześć świat'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
msgid "code_bits.'hello'"
msgstr "'cześć'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'how are you'"
msgstr "'jak się masz'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'how'"
msgstr "'jak'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.'is'"
msgstr "'jest'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'jklmn'"
msgstr "'jklmn'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'kasten'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 's':
#.         c = '$'
#.     new_name += c
#. print(new_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 'e':
#.         c = '3'
#.     if c == 's':
#.         c = '$'
#.     if c == 'a':
#.         c = '@'
#.     new_name += c
#. print(new_name)
msgid "code_bits.'kesha'"
msgstr "'kesza'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.'list'"
msgstr "'lista'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'on'"
msgstr "'na'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access4
#. french['pomme']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.'pomme'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'store'"
msgstr "'sklep'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'the'"
msgstr "'to'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'there'"
msgstr "'tam'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'to'"
msgstr "'do'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'way'"
msgstr "'sposób'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
#. 'word'
msgid "code_bits.'word'"
msgstr "'slowo'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
msgid "code_bits.'world'"
msgstr "'świat'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.final_text.text
#.     if word.lower() == 'yes':
msgid "code_bits.'yes'"
msgstr "'tak'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'you'"
msgstr "'ty'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise.text
#.     Hello
#.     Hello
msgid "code_bits.Hello"
msgstr "Witaj"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.two_separate_lists.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.first_birdseye_example.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotTrueOrTrue.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.double_return_in_one_function.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.introducing_newline.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_count_index.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_in_step.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.different_types_look_same.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.five_different_types.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.less_than_has_two_meanings.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.less_than_sorting_strings.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.plus_has_two_meanings.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.first_print.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_assign_goodbye.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world.text
#.     __program_indented__
msgid "code_bits.__program_indented__"
msgstr "__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.actual"
msgstr "rzeczywisty"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.age"
msgstr "wiek"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     def alert(string, level):
msgid "code_bits.alert"
msgstr "alarm"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def all_equal(row):
#.         ...
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
msgid "code_bits.all_equal"
msgstr "wszystkie_równe"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.all_equal1"
msgstr "wszystkie_są_równe1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.all_equal2"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. small_numbers = []
#. big_numbers = []
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.all_numbers"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise.text
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def all_equal(row):
#.         ...
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner.text
#.     def column_winner(board):
#.         ...
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     def row_winner(board):
#.         ...
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     assert_equal(print_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     def format_board(board):
#.         ...
#.         return ...
#.     assert_equal(format_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.assert_equal"
msgstr "stwierdź_równość"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. big_numbers = []
#. for number in numbers:
#.     if number > 5:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy2
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = numbers.copy()
#. for number in numbers:
#.     if number <= 10:
#.         big_numbers.remove(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_new_list
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = []
#. for number in numbers:
#.     if number > 10:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. small_numbers = []
#. big_numbers = []
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.big_numbers"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['X', 'X', 'O'],
#.         ['O', 'O', 'X']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     board = [
#.         ['A', 'B', 'A', 'A'],
#.         ['B', ' ', ' ', 'A'],
#.         [' ', 'A', 'B', 'B'],
#.         [' ', 'A', 'B', ' ']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['O', ' ', ' '],
#.         [' ', 'X', 'O']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     board.append(row.copy())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board = [row, row, row]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board[0][0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board[0][0] = 'X'
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     board[1][0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     row = board[1]
#.     row[0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     board = [
#.         ['X', 'O', 'X'],
#.         [' ', 'O', 'O'],
#.         [' ', 'X', ' ']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.board"
msgstr "tablica"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.board_size"
msgstr "rozmiar_tablicy"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c1"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c2"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c3"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c4"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.cart"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line += char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif.text
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else.text
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
msgid "code_bits.char"
msgstr "char"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.char1"
msgstr "char1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.char2"
msgstr "char2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name:
#.         print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name: print(character)
msgid "code_bits.character"
msgstr "znak"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.col"
msgstr "kolumna"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.column"
msgstr "kolumna"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner.text
#.     def column_winner(board):
#.         ...
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.column_winner"
msgstr "wygrana_w_kolumnie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.condition"
msgstr "warunek"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
msgid "code_bits.confused"
msgstr "zdezorientowany"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.consonants"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
msgid "code_bits.cube"
msgstr "sześcian"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.diagonal1"
msgstr "przekątna1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.diagonal2"
msgstr "przekątna2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.diagonal_winner"
msgstr "wygrana_na_przekątnej"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
msgid "code_bits.dna"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.final_text.text
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#.     def quadruple(x):
#.         return double(double(x))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
msgid "code_bits.double"
msgstr "podwójny"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.double_numbers"
msgstr "podwoić_numery"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.doubles"
msgstr "podwójne"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list += [element]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list.append(element)
msgid "code_bits.element"
msgstr "element"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.entry"
msgstr "wpis"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
msgid "code_bits.excited"
msgstr "podekscytowany"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.expected"
msgstr "oczekiwany"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"---\""
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.eval_expr_inside_f_string
#. f"2 * 3 + 4 is equal to {2 * 3 + 4}"
msgid "code_bits.f\"2 * 3 + 4 is equal to {2 * 3 + 4}\""
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"English: {word}\""
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.f\"Error! {repr(actual)} != {repr(expected)}\""
msgstr "f\"Błąd! {repr(actual)} != {repr(expected)}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.f\"Hello {name}!\""
msgstr "f\"Witaj {name}!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.f\"Hello {person_name}!\""
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
msgid ""
"code_bits.f\"There are {len(people)} people waiting, the first one's name is"
" {people[0]}.\""
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"{language}: {translations[language]}\""
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
msgid "code_bits.f\"{letter} {number}\""
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     print(f"{name} went to {meal} with {friend}.")
msgid "code_bits.f\"{name} went to {meal} with {friend}.\""
msgstr "f\"{name} poszedł na {meal} z {friend}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid ""
"code_bits.f'  {\" \".join(str(i + 1) for i in "
"range(size))}\\n{line.join(rows)}'"
msgstr ""
"f'  {\" \".join(str(i + 1) dla i w "
"zakresie(rozmiar))}\\n{linia.join(rzędy)}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input
#. print('Type your name, then press Enter:')
#. name = input()
#. print(f'Hello {name}!')
msgid "code_bits.f'Hello {name}!'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
msgid "code_bits.f'Hello {name}. You are {age} years old.'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'\\n  {\"+\".join(\"-\" * size)}\\n'"
msgstr "f'\\n  {\"+\".join(\"-\" * rozmiar)}\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
msgid "code_bits.f'\\n{\"+\".join(lines)}\\n'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{i + 1} {\"|\".join(row)}'"
msgstr "f'{i + 1} {\"|\".połącz(rząd)}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('----------')
msgid "code_bits.f'{left} x {right} = {left * right}'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
msgid "code_bits.f'{letter} {number}'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
msgid "code_bits.f'{player1} vs {player2}'"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
msgid "code_bits.f'{players[i]} vs {players[j]}'"
msgstr "f'{gracze[i]} kontra {gracze[j]}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{player} to play:'"
msgstr "f'{player} do gry:'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{player} wins!'"
msgstr "f'{player} wygrywa!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.filename"
msgstr "nazwa_pliku"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
msgid "code_bits.first"
msgstr "pierwszy"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
msgid "code_bits.first_row"
msgstr "pierwszy_rząd"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.double_return_in_one_function
#. def foo():
#.     return 1
#.     return 2
#. print(foo())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
msgid "code_bits.foo"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     def format_board(board):
#.         ...
#.         return ...
#.     assert_equal(format_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.format_board"
msgstr "formatuj_tablicę"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
msgid "code_bits.found"
msgstr "znaleziono"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access
#. french[0]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access2
#. french['apple']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access3
#. french['box']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access4
#. french['pomme']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.french"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     print(f"{name} went to {meal} with {friend}.")
msgid "code_bits.friend"
msgstr "przyjaciel"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. def play_move(board, player):
#.     board[1] = player
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. play_game()
msgid "code_bits.game_board"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
msgid "code_bits.german"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.grades_example
#. percentage = 73
#. if percentage < 40:
#.     grade = 'F'
#. elif percentage < 60:
#.     grade = 'C'
#. elif percentage < 80:
#.     grade = 'B'
#. else:
#.     grade = 'A'
#. print(grade)
msgid "code_bits.grade"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.greet"
msgstr "pozdrowienie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if guess == str(super_secret_number):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if int(guess) == super_secret_number:
msgid "code_bits.guess"
msgstr "zgadnij"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello
#.     hello = temp + '!'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello + '!'
#.     hello = temp
msgid "code_bits.hello"
msgstr "cześć"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
msgid "code_bits.include"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text
#.     some_list.pop(index)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#.     some_list[index] = new_value
msgid "code_bits.index"
msgstr "indeks"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.indices_out_of_bounds
#. indices[4]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.printing_the_range
#. indices = range(4)
#. print(indices[0])
#. print(indices[1])
#. print(indices[2])
#. print(indices[3])
msgid "code_bits.indices"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.text
#.     x = ['a', 'b', 'c']
#.     y = (insert_one_line_from_above)
#.     print(y)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.text
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.text
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise.text
#.     x = [15, 12, -6, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.text
#.     x = [12, -6, 2, -1, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.text
#.     x = 100
#.     y = (insert_one_line_from_above)
#.     print(y)
msgid "code_bits.insert_one_line_from_above"
msgstr "wstaw_jedną_linijkę_z_góry"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.invalid_image"
msgstr "nieprawidłowy_obraz"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. name = "Bob"
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. print(name == "Alice" or
#.       name == "Bob")
msgid "code_bits.is_friend"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise.text
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def is_valid_percentage(x):
#.         if 0 <= x and x <= 100:
#.             return True
#.         else:
#.             return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def is_valid_percentage(x):
#.         return 0 <= x <= 100
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def is_valid_percentage(x):
#.         return 0 <= x and x <= 100
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
msgid "code_bits.is_valid_percentage"
msgstr "jest_prawidłowym_procentem"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.item"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
msgid "code_bits.joined_row"
msgstr "połączony_rząd"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
msgid "code_bits.joined_rows"
msgstr "połączone_rzędy"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
msgid "code_bits.key"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.language"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('----------')
msgid "code_bits.left"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.len_of_none
#. things = print([1, 2, 3])
#. length = len(things)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.print_returns_none
#. things = [1, 2, 3]
#. length = len(things)
#. printed = print(length)
#. print(printed)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
#. size = 3
#. for i in range(size):
#.     length = size - i
#.     line = ''
#.     for _ in range(length):
#.         line += 'O'
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.length"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
msgid "code_bits.length1"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
msgid "code_bits.length2"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.lengths"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
msgid "code_bits.letter"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise.text
#.     letters = "ABCD"
msgid "code_bits.letters"
msgstr "litery"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
msgid "code_bits.level"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line += char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.line"
msgstr "linia"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
msgid "code_bits.lines"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.final_text.text
#.     list2 = list1.copy()
msgid "code_bits.list1"
msgstr "lista1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.final_text.text
#.     list2 = list1.copy()
msgid "code_bits.list2"
msgstr "lista2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.main_diagonal_winner"
msgstr "wygrana_na_głównej_przekątnej"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.make_board"
msgstr "zrób_tablicę"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
msgid "code_bits.make_cube"
msgstr "zrób_sześcian"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     print(f"{name} went to {meal} with {friend}.")
msgid "code_bits.meal"
msgstr "posiłek"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
msgid "code_bits.middle"
msgstr "środek"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name:
#.         print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name: print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     (name == "Alice") or ("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == ("Alice" or "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#.     name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice" or name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text
#.     name = 'Alice'
msgid "code_bits.name"
msgstr "imię"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 's':
#.         c = '$'
#.     new_name += c
#. print(new_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 'e':
#.         c = '3'
#.     if c == 's':
#.         c = '$'
#.     if c == 'a':
#.         c = '@'
#.     new_name += c
#. print(new_name)
msgid "code_bits.new_name"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
msgid "code_bits.new_numbers"
msgstr "nowe_numery"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate
#. nums = [1, 2, 3]
#. new_nums = nums + [4, 5]
#. print(new_nums)
#. print(nums)
#. nums.append(4)
#. print(nums)
msgid "code_bits.new_nums"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
msgid "code_bits.new_sentence"
msgstr "nowe_zdanie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#.     some_list[index] = new_value
msgid "code_bits.new_value"
msgstr "nowa_wartość"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
msgid "code_bits.not_first"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
msgid "code_bits.num"
msgstr "liczba"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.text
#.     for number in numbers.copy():
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
msgid "code_bits.number"
msgstr "numer"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     numbers = [[1, 2, 3], [4, 5], [6], []]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.text
#.     for number in numbers.copy():
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.numbers"
msgstr "numery"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.text
#.     nums = [1, 2, 3, 4, 5]
#.     nums.append(9)
#.     print(nums)
msgid "code_bits.nums"
msgstr "numerki"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
msgid "code_bits.opposite_dna"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.original"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
msgid "code_bits.people"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.grades_example
#. percentage = 73
#. if percentage < 40:
#.     grade = 'F'
#. elif percentage < 60:
#.     grade = 'C'
#. elif percentage < 80:
#.     grade = 'B'
#. else:
#.     grade = 'A'
#. print(grade)
msgid "code_bits.percentage"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.person_name"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.piece"
msgstr "element"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.play_game"
msgstr "zagraj_w_grę"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.play_move"
msgstr "wykonaj_ruch"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     board[1][0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     row = board[1]
#.     row[0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.player"
msgstr "gracz"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.player1"
msgstr "gracz1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.player2"
msgstr "gracz2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
msgid "code_bits.players"
msgstr "gracze"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.present"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.price"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'apple': 3}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.prices"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     assert_equal(print_board([...]), "...")
msgid "code_bits.print_board"
msgstr "drukuj_tablicę"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.print_draw"
msgstr "wypisz_remis"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#.     def print_many(n, thing):
msgid "code_bits.print_many"
msgstr "drukuj_wiele"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
#. def print_twice(x):
#.     print(x)
#.     print(x)
msgid "code_bits.print_twice"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.print_winner"
msgstr "wypisz_zwycięzcę"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.print_words"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.print_returns_none
#. things = [1, 2, 3]
#. length = len(things)
#. printed = print(length)
#. print(printed)
msgid "code_bits.printed"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.final_text.text
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#.     def quadruple(x):
#.         return double(double(x))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
msgid "code_bits.quadruple"
msgstr "poczwórny"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.quantities"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.quantity"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
msgid "code_bits.result"
msgstr "wynik"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('----------')
msgid "code_bits.right"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.         return row == [row[0], row[0], row[0]]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.         return row[0] == row[1] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     board.append(row.copy())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board = [row, row, row]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     row[0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     row = board[1]
#.     row[0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.row"
msgstr "rząd"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     def row_winner(board):
#.         ...
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.row_winner"
msgstr "wygrana_w_rzędzie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.rows"
msgstr "rzędy"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.say_hello"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#.     word = 'Goodbye'
#.     print(sentence)
msgid "code_bits.sentence"
msgstr "zdanie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
msgid "code_bits.separator"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
#. def surround(string, sides):
#.     return sides + string + sides
msgid "code_bits.sides"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.text
#.     size = 5
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.size"
msgstr "rozmiar"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. small_numbers = []
#. big_numbers = []
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.small_numbers"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list += [element]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list.append(element)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text
#.     some_list.index(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text
#.     some_list.pop(index)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text
#.     some_list.remove(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#.     some_list[index] = new_value
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text
#.     some_list.count(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text
#.     value in some_list
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sorted_predict_exercise.text
#.     sorted(some_list)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_predict_exercise.text
#.     sum(some_list)
msgid "code_bits.some_list"
msgstr "jakaś_lista"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
msgid "code_bits.spaces"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#.     string = strings[1]
#.     print(string[0])
msgid "code_bits.string"
msgstr "ciąg"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.string1"
msgstr "string1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.string2"
msgstr "string2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#.     print(strings[1][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#.     string = strings[1]
#.     print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.final_text.text
#.     strings[1].append("today?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.strings"
msgstr "ciągi"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
msgid "code_bits.sublist"
msgstr "podlista"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.final_text.text
#.     def substitute(string, d):
#.         result = ""
#.         for letter in string:
#.             result += d[letter]
#.         return result
#.     plaintext = 'helloworld'
#.     encrypted = 'qpeefifmez'
#.     letters = {'h': 'q', 'e': 'p', 'l': 'e', 'o': 'f', 'w': 'i', 'r': 'm',
#. 'd': 'z'}
#.     reverse = {'q': 'h', 'p': 'e', 'e': 'l', 'f': 'o', 'i': 'w', 'm': 'r',
#. 'z': 'd'}
#.     assert_equal(substitute(plaintext, letters), encrypted)
#.     assert_equal(substitute(encrypted, reverse), plaintext)
msgid "code_bits.substitute"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
#. sunshine
msgid "code_bits.sunshine"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if guess == str(super_secret_number):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if int(guess) == super_secret_number:
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     super_secret_number = '7'
msgid "code_bits.super_secret_number"
msgstr "super_sekretna_liczba"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     def surround(string, sides):
msgid "code_bits.surround"
msgstr "otoczyć"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello
#.     hello = temp + '!'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello + '!'
#.     hello = temp
msgid "code_bits.temp"
msgstr "temp"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
msgid "code_bits.test"
msgstr "test"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
msgid "code_bits.thing"
msgstr "rzecz"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
msgid "code_bits.thing_to_find"
msgstr "rzecz_do_znalezienia"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
msgid "code_bits.things"
msgstr "rzeczy"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.to_find"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.topleft"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.topright"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.numbers_sum
#. numbers = [3, 1, 4, 1, 5, 9]
#. total = 0
#. for number in numbers:
#.     total += number
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
msgid "code_bits.total"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.total_cost"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.translations"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.first_return
#. def double(x):
#.     return x * 2
#. number = 5
#. twice = double(number)
#. print(number)
#. print(twice)
msgid "code_bits.twice"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
msgid "code_bits.upper"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
msgid "code_bits.valid_image"
msgstr "prawidłowy_obraz"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text
#.     some_list.index(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text
#.     some_list.remove(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text
#.     some_list.count(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text
#.     value in some_list
msgid "code_bits.value"
msgstr "wartość"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.value1"
msgstr "wartość1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.value2"
msgstr "wartość2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.vowels"
msgstr ""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.winner"
msgstr "zwycięzca"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.winning_line"
msgstr "linia_zwycięstwa"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#.     word = 'Goodbye'
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.final_text.text
#.     if word.lower() == 'yes':
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text
#.     word.lower()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign.text
#.     word = 'Hello'
msgid "code_bits.word"
msgstr "slowo"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range.text
#.     [0, 1, 2, ..., len(words) - 2, len(words) - 1]
msgid "code_bits.words"
msgstr "slowa"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
msgid "code_bits.x1"
msgstr "x1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
msgid "code_bits.x2"
msgstr "x2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
msgid "code_bits.x3"
msgstr "x3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.first_print
#. print(word + ' ' + your_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.goodbye_plus_name
#. word + ' ' + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.hello_plus_name
#. 'Hello ' + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
#. your_name = 'Alex'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name
#. word + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
#. word + ' ' + your_name
msgid "code_bits.your_name"
msgstr ""

msgid "frontend.are_you_sure"
msgstr "Jesteś pewien?"

msgid "frontend.ask_for_help"
msgstr "Poproś o pomoc"

msgid "frontend.assessment"
msgstr "Ocena"

msgid "frontend.assessment_description"
msgstr ""
"Gdy uruchomisz kod, który nie przechodzi obecnego kroku, ta sekcja *czasami*"
" wyjaśni co jest nie tak."

msgid "frontend.assessment_lint"
msgstr "Znaleziono następujące ogólne problemy w twoim kodzie:"

msgid "frontend.assessment_passed_tests"
msgstr "Z jasnej strony, twój kod przeszedł ${num} testy/ów!"

msgid "frontend.cancel"
msgstr "Anuluj"

msgid "frontend.chat_on_slack"
msgstr "Czatuj na Slacku"

msgid "frontend.click_for_error_details"
msgstr "Kliknij, aby zobaczyć szczegóły błędu"

msgid "frontend.click_to_expand"
msgstr "Kliknij, aby rozwinąć"

msgid "frontend.contact_directly"
msgstr "Alternatywnie możesz skontaktować się z nami bezpośrednio:"

msgid "frontend.copy_warning"
msgstr ""
"**STOP!**\n"
"\n"
"Postaraj się unikać kopiowania kodu. Będziesz lepiej uczyć się, przyswajać i pamiętać, jeśli wpiszesz kod samodzielnie.\n"
"\n"
"Kiedy kopiowanie jest odpowiednie, będzie przycisk, który ułatwi to zadanie. Jeśli nie ma przyciska, postaraj się wpisywać kod.\n"
"\n"
"Choć tak powiedziawszy, nie będziemy cię zmuszać. Skopiuj, jeśli naprawdę chcesz."

msgid "frontend.copying_solution_not_allowed"
msgstr "Kopiowanie z obszaru podpowiedzi/rozwiązania nie jest dozwolone!"

msgid "frontend.current_page"
msgstr "(obecna strona)"

msgid "frontend.description"
msgstr "Opis"

msgid "frontend.developer_mode"
msgstr "Tryb deweloperski"

msgid "frontend.developer_mode_description"
msgstr "Aktywuje przyciski „Cofnij krok” i „Pomiń krok”."

msgid "frontend.did_you_mean"
msgstr "Czy miałeś na myśli..."

msgid "frontend.error_has_been_reported"
msgstr "Błąd został zgłoszony."

msgid "frontend.error_traceback"
msgstr "Ślad błędu:"

msgid "frontend.exercise_requirement"
msgstr ""
"Ten krok to ćwiczenie. Musisz wymyślić kod, który da poprawny wynik. Możliwe"
" są wiele różnych poprawnych odpowiedzi."

msgid "frontend.exercise_stdin"
msgstr ""
"Twój program musi otrzymać dane wejściowe od użytkownika poprzez funkcję "
"„input()”. Podczas testowania poprawności różne dane wejściowe użytkownika "
"zostaną zasymulowane."

msgid "frontend.feedback"
msgstr "Opinia"

msgid "frontend.feedback_email_placeholder"
msgstr "Email (opcjonalnie)"

msgid "frontend.function_exercise"
msgstr ""
"Zdefiniuj funkcję, zaczynając od:\n"
"\n"
"${header}\n"
"\n"
"Następnie wypełnij wcięte ciało własną implementacją.\n"
"\n"
"Funkcja będzie wywołana z różnymi argumentami, aby przetestować, czy działa ogólnie. Możesz także sam wywołać funkcję, aby ją przetestować podczas pracy, ale nie wpłynie to na ocenę."

msgid "frontend.function_exercise_goal"
msgstr "Twoja funkcja musi „${print_or_return}” poprawny wynik."

msgid "frontend.get_another_hint"
msgstr "Uzyskaj kolejną podpowiedź"

msgid "frontend.get_hint"
msgstr "Uzyskaj podpowiedź"

msgid "frontend.give_feedback"
msgstr "Przekaż opinię"

msgid "frontend.give_feedback_from_menu"
msgstr "Przekaż opinię z menu w lewym górnym rogu."

msgid "frontend.give_feedback_instructions"
msgstr ""
"Powiedz nam, co lubisz lub czego nie lubisz! Jeśli zgłaszasz błąd, podaj szczegółowy opis problemu:\n"
"\n"
"- Co robiłeś przed i kiedy problem się pojawił?\n"
"- Jakie kroki można podjąć, aby go odtworzyć?\n"
"- Co obserwujesz i co według ciebie powinno się zamiast tego stać?"

msgid "frontend.hidden_solution_instructions"
msgstr ""
"Powyżej znajduje się przykładowe rozwiązanie, ale jest ukryte. Klikaj "
"przycisk „Odsłoń” wielokrotnie, aby odsłaniać rozwiązanie kawałek po "
"kawałku. Postaraj się zatrzymać, kiedy pomyślisz, że odsłoniłeś "
"wystarczająco i możesz sam uzupełnić pozostałe luki. Następnie wpisz "
"rozwiązanie w edytorze i uruchom je. Twoje rozwiązanie nie musi być takie "
"samo jak powyżej."

msgid "frontend.hints_and_solution"
msgstr "Podpowiedzi i Rozwiązanie"

msgid "frontend.hints_progress"
msgstr "Pokazane ${numHints} z ${totalHints} podpowiedzi"

msgid "frontend.internal_error_start"
msgstr "Ups, coś poszło nie tak! ${maybeErrorReported} Oto co możesz zrobić:"

msgid "frontend.loading_wait"
msgstr "Ładowanie..."

msgid "frontend.login_or_sign_up"
msgstr "Zaloguj się / Zarejestruj"

msgid "frontend.new"
msgstr "Nowy"

msgid "frontend.next"
msgstr "Następny"

msgid "frontend.no"
msgstr "Nie"

msgid "frontend.no_hints_available"
msgstr ""
"Do tego kroku nie ma żadnych podpowiedzi. Spróbuj ponownie przeczytać "
"instrukcje i wymagania. Nadal możesz sprawdzić rozwiązanie, jeśli jesteś "
"naprawdę zablokowany."

msgid "frontend.no_input_variables"
msgstr "To ćwiczenie nie ma zmiennych wejściowych."

msgid "frontend.non_function_exercise"
msgstr ""
"Twój kod *musi* zacząć się od przypisania wartości do zmiennych wejściowych, np:\n"
"\n"
"${inputs}\n"
"\n"
"Wartości to tylko przykłady, możesz wybrać inne. Twój kod zostanie automatycznie przetestowany z różnymi wartościami, aby sprawdzić, czy działa ogólnie."

msgid "frontend.ok"
msgstr "OK"

msgid "frontend.open_github_issue"
msgstr "Otwórz zgłoszenie na GitHubie"

msgid "frontend.output_prediction_correct"
msgstr "Poprawnie!"

msgid "frontend.output_prediction_error_choice"
msgstr "Błąd"

msgid "frontend.output_prediction_question"
msgstr "Jak myślisz, jaki będzie wynik?"

msgid "frontend.output_prediction_wrong_once"
msgstr "Ups, to nie jest prawidłowa odpowiedź. Możesz spróbować jeszcze raz!"

msgid "frontend.output_prediction_wrong_twice"
msgstr "Niestety, zła odpowiedź. Spróbuj ponownie następnym razem!"

msgid "frontend.parsons_solution_instructions"
msgstr ""
"Powyżej znajduje się przykładowe rozwiązanie z nieuporządkowanymi liniami. "
"Możesz je przeciągać, aby je posortować. Znalezienie poprawnej kolejności "
"zależy od ciebie, nie powiemy ci, czy masz rację. Eksperymentowanie i "
"uruchamianie częściowych rozwiązań w edytorze może ci pomóc to rozgryźć. "
"Nadal musisz wpisać poprawne rozwiązanie w edytorze i uruchomić je, aby "
"kontynuować."

msgid "frontend.previous"
msgstr "Poprzedni"

msgid "frontend.program_in_text"
msgstr ""
"Dokładny kod, który musisz uruchomić, jest pokazany w tekście powyżej, "
"jednym fragmentem."

msgid "frontend.question_wizard"
msgstr "Kreator Pytań"

msgid "frontend.question_wizard_expected_output"
msgstr ""
"Dobrze, teraz wpisz poniżej wynik, którego oczekujesz/chcesz otrzymać od swojego programu. Co by wyświetlił, gdyby działał poprawnie? Jeśli nie ma nic wyświetlać, dodaj do swojego kodu kilka wywołań funkcji `print()`, aby wyświetlił coś użytecznego.\n"
"\n"
"When you're done, click 'Run' again to generate your question."

msgid "frontend.question_wizard_intro"
msgstr ""
"Jeśli potrzebujesz pomocy, istnieje wiele stron takich jak [Stack Overflow](https://stackoverflow.com/) i [reddit](https://www.reddit.com/r/learnpython/), gdzie możesz zadawać pytania. To narzędzie pomoże ci napisać dobrej jakości pytanie, które prawdopodobnie uzyska odpowiedzi.\n"
"\n"
"Wpisz i uruchom swój kod po prawej stronie. Jeśli nie masz żadnego kodu, bo nie wiesz od czego zacząć, obawiam się, że to narzędzie nie może ci pomóc. Nadal możesz prosić o pomoc, ale warto najpierw przeczytać [Jakich pytań należy unikać?](https://stackoverflow.com/help/dont-ask)\n"
"\n"
"Jeśli twoje pytanie dotyczy serwerów (np. Django lub Flask), żądań sieciowych, baz danych lub pakietu, który nie może być zaimportowany tutaj, to narzędzie nie będzie działać. Jednak tylko dlatego, że twój obecny kod *obejmuje* te rzeczy, nie oznacza, że o to chodzi w twoim pytaniu. Jeśli masz ogólny problem z Pythonem/programowaniem/logiką, odszukaj ten problem poza innymi rzeczami. Python z Django to wciąż Python. Jeśli nie możesz tego zrobić, przeczytaj [Jak stworzyć Minimalny, Powtarzalny Przykład](https://stackoverflow.com/help/minimal-reproducible-example) przed zadaniem pytania."

msgid "frontend.refresh_and_try_again"
msgstr "Odśwież stronę i spróbuj ponownie."

msgid "frontend.repeated_frames_description"
msgstr "${name} w linii ${lineno} (${count} razy)"

msgid "frontend.requirements"
msgstr "Wymagania"

msgid "frontend.requirements_description"
msgstr ""
"Musisz uruchomić kod zgodnie z instrukcjami powyżej. Na wypadek, gdyby te "
"nie były wystarczająco jasne, oto pewne dodatkowe wyjaśnienia:"

msgid "frontend.reveal"
msgstr "Odsłoń"

msgid "frontend.reverse_step"
msgstr "Cofnij krok"

msgid "frontend.run"
msgstr "Uruchom"

msgid "frontend.send_email_to"
msgstr "Email"

msgid "frontend.settings"
msgstr "Ustawienia"

msgid "frontend.show_shuffled_solution"
msgstr "Pokaż pomieszane rozwiązanie"

msgid "frontend.show_solution"
msgstr "Pokaż rozwiązanie"

msgid "frontend.show_unscrambled_solution"
msgstr "Pokaż niepomieszane rozwiązanie"

msgid "frontend.sign_out"
msgstr "Wyloguj"

msgid "frontend.similar_frames_skipped"
msgstr "Pominięte podobne ramki:"

msgid "frontend.skip_step"
msgstr "Pomiń krok"

msgid "frontend.stop"
msgstr "Zatrzymaj"

msgid "frontend.submit"
msgstr "Zatwierdź"

msgid "frontend.table_of_contents"
msgstr "Spis treści"

msgid "frontend.title"
msgstr "Tytuł"

msgid "frontend.toc_instructions"
msgstr ""
"Poniżej znajdują się linki do różnych stron kursu. Możesz zacząć od dowolnego miejsca i postępować w dowolnej kolejności, a Twój postęp na każdej stronie będzie rejestrowany.\n"
"\n"
"Jeśli jesteś całkowicie nowy w programowaniu, lub masz wątpliwości, po prostu zacznij od początku i klikaj „Następny”, gdy skończysz każdą stronę."

msgid "frontend.try_running_code_again"
msgstr "Spróbuj uruchomić kod ponownie."

msgid "frontend.try_using_different_browser"
msgstr "Spróbuj użyć innej przeglądarki."

msgid "frontend.verbatim"
msgstr ""
"Ten krok ma tylko jedną poprawną odpowiedź. Musisz uruchomić dokładnie "
"poprawny kod, więc sprawdź dokładnie swoją pisownię. Tylko kilka rodzajów "
"szczegółów (takich jak spacje w niektórych miejscach) zostanie "
"zignorowanych, ponieważ nie robią one różnicy dla programu."

msgid "frontend.yes"
msgstr "Tak"

msgid "linting_messages.pyflakes.ImportShadowedByLoopVar.message_format"
msgstr ""
"**Import `{0}`, który jest przesłonięty przez zmienną pętli**\n"
"\n"
"Należy zmienić nazwę zmiennej pętli `{0}`, ponieważ przedefiniowuje ona wcześniej zaimportowany moduł `{0}`.\n"
"Wybierz inną nazwę zmiennej pętli, aby uniknąć tego błędu."

msgid "linting_messages.pyflakes.ImportStarNotPermitted.message_format"
msgstr ""
"**Import przy użyciu `*`**\n"
"\n"
"Użycie konstrukcji `from {0} import *` powoduje zaimportowanie wszystkiego z modułu `{0}` do bieżącej przestrzeni nazw.\n"
"Tworzy to wiele niewidocznych, nieznanych zmiennych.\n"
"Utrudnia to czytanie i rozumienie kodu oraz ustalenie skąd pochodzą poszczególne elementy.\n"
"\n"
"Unikaj tego rodzaju importu i zamiast tego dokładnie zaimportuj tylko te nazwy, których potrzebujesz."

msgid "linting_messages.pyflakes.IsLiteral.message_format"
msgstr ""
"**Porównanie `is` z literałem**\n"
"\n"
"Użyto operatora `is`/`is not` do porównania z literałem (np. ciąg znaków lub liczba).\n"
"Zamiast tego powinno się użyć operatora `==` / `!=`.\n"
"\n"
"Operator `is` sprawdza, czy dwie wyrażenia odnoszą się do dokładnie tego samego obiektu.\n"
"Rzadko chcesz go używać, zwłaszcza w przypadku podstawowych typów danych, takich jak ciągi znaków i liczby.\n"
"W takich przypadkach wydaje się, że czasami działa (np. dla małych liczb) i tajemniczo\n"
"zawodzi przy innych okazjach."

msgid "linting_messages.pyflakes.MultiValueRepeatedKeyLiteral.message_format"
msgstr ""
"**Klucz słownika `{0}` został powtórzony z różnymi wartościami**\n"
"\n"
"Słownik nie może mieć wielu wpisów dla tego samego klucza.\n"
"Sprawdź ponownie swój kod i zmień powtarzający się klucz na coś unikatowego."

msgid "linting_messages.pyflakes.RedefinedWhileUnused.message_format"
msgstr ""
"**Przedefiniowano `{0}` bez jego użycia**\n"
"\n"
"Zdefiniowałeś `{0}` w linii `{1}`, ale zanim go użyłeś, zdefiniowałeś go ponownie,\n"
"nadpisując oryginalną definicję.\n"
"\n"
"Ogólnie twoje funkcje i klasy powinny mieć różne nazwy.\n"
"Sprawdź, czy używasz wszystkiego co zdefiniowałeś, np. czy wywołałeś swoje funkcje."

msgid "linting_messages.pyflakes.UnusedImport.message_format"
msgstr ""
"**Niewykorzystany import `{0}`**\n"
"\n"
"Zaimportowałeś `{0}`, ale go nie użyłeś. Czy zapomniałeś go użyć?\n"
"Może użyłeś w jego miejsce błędnej zmiennej? Jeśli nie potrzebujesz importu, po prostu go usuń."

msgid "linting_messages.pyflakes.UnusedVariable.message_format"
msgstr ""
"**Niewykorzystana zmienna `{0}`**\n"
"\n"
"Zdefiniowałeś zmienną `{0}`, ale nigdy jej nie użyłeś. Czy zapomniałeś jej użyć?\n"
"Może użyłeś w jej miejsce błędnej zmiennej? Jeśli nie potrzebujesz jej, po prostu ją usuń."

msgid "misc_terms.blank_result"
msgstr "<nic>"

msgid "misc_terms.case_sensitive"
msgstr ""
"Python jest uwrażliwiony na wielkość liter! Oznacza to, że małe i duże "
"litery są ważne i ich zmiana zmienia znaczenie programu. Ciągi znaków "
"`'hello'` i `'Hello'` są różne, podobnie jak nazwy zmiennych `word` i "
"`Word`."

msgid "misc_terms.code_should_start_like"
msgstr "Twój kod powinien zaczynać się tak:{expected_start}"

msgid "misc_terms.copy_button"
msgstr "Kopiuj"

msgid "misc_terms.disallowed_default_label"
msgstr "więcej niż {max_count} {label}"

msgid "misc_terms.disallowed_default_message"
msgstr ""
"Brawo, znalazłeś rozwiązanie! Jednakże, dla tego ćwiczenia i twojej nauki, "
"nie wolno ci używać {label}."

msgid "misc_terms.expected_mode_birdseye"
msgstr "Mając swój kod w edytorze, kliknij przycisk `birdseye`."

msgid "misc_terms.expected_mode_pythontutor"
msgstr "Mając swój kod w edytorze, kliknij przycisk Python Tutor."

msgid "misc_terms.expected_mode_shell"
msgstr "Wpisz swój kod bezpośrednio w shell po `>>>` i wciśnij Enter."

msgid "misc_terms.expected_mode_snoop"
msgstr "Mając swój kod w edytorze, kliknij przycisk `snoop`."

msgid "misc_terms.incorrect_mode"
msgstr "Kod jest poprawny, ale nie został uruchomiony zgodnie z instrukcją."

msgid "misc_terms.invalid_inputs"
msgstr ""
"Wartości twoich zmiennych wejściowych są niepoprawne, spróbuj użyć wartości "
"podobnych do przykładu."

msgid "misc_terms.must_define_function"
msgstr "Musisz zdefiniować funkcję `{function_name}`"

msgid "misc_terms.no_more_test_inputs"
msgstr ""
"Brak więcej testowych danych wejściowych - rozwiązanie powinno się już "
"zakończyć"

msgid "misc_terms.not_a_function"
msgstr "`{function_name}` nie jest funkcją."

msgid "misc_terms.q_wiz_debugger"
msgstr ""
"Świetnie, że używasz debugera! Rozwiązanie problemu samodzielnie jest "
"idealne. Jeśli nie możesz, użyj przycisku 'Run', aby wygenerować pytanie."

msgid "misc_terms.q_wiz_final_message"
msgstr ""
"Świetnie! Oto kilka końcowych wskazówek:- Upewnij się, że wynik pokazuje problem, który masz, a nie coś innego.- Zredukuj swój kod do **minimalnego** przykładu. Usuń wszelki kod, który nie jest bezpośrednio związany z problemem.- Przeprowadź swój kod przez debugery `snoop`, `birdseye` i Python Tutor, aby zrozumieć, co robi.- Poszukaj rozwiązania swojego problemu w internecie.- Przeczytaj [Jak zadać dobre pytanie?](https://stackoverflow.com/help/how-to-ask)\n"
"Jeśli jesteś naprawdę gotowy, skopiuj i wklej poniższe na stronę z pytaniem,i zastąp pierwszy wers opisem swojego problemu.Możesz nadal zmieniać swój kod lub oczekiwany wynik i kliknąć Run ponownie, aby wygenerować pytanie na nowo.    __copyable__    *Wyjaśnij, co próbujesz zrobić i dlaczego*    Oto mój kod:{}    To jest wynik:{}    Oczekiwany wynik to:{}"

msgid "misc_terms.q_wiz_input_and_add"
msgstr ""
"i dodaj\n"
"\n"
"    {list_line}\n"
"\n"
"na początku twojego kodu."

msgid "misc_terms.q_wiz_input_message_start"
msgstr ""
"`input()` utrudnia zadawanie pytań i udzielanie odpowiedzi dotyczących kodu."
" Zastąp wywołania funkcji input łańcuchami znaków, tak aby każdy mógł "
"natychmiast uruchomić kod oraz otrzymać te same wyniki."

msgid "misc_terms.q_wiz_input_replace_with"
msgstr ""
"Zastąp:\n"
"\n"
"{original_lines}\n"
"\n"
"przez:\n"
"\n"
"{replaced_lines}"

msgid "misc_terms.q_wiz_no_output"
msgstr ""
"Twój kod nic nie wyświetlił. Dodaj kilka wywołań `print()`, tak aby chociaż "
"coś zostało wyświetlone. Użyj kodu, aby pokazać czytelnikom dokładnie, gdzie"
" jest problem."

msgid "misc_terms.q_wiz_same_as_expected_output"
msgstr ""
"Twój wynik jest taki sam jak oczekiwany! Jeśli problem nadal istnieje, "
"dopasuj swój kod i/lub oczekiwany wynik, tak aby te dwa wyniki się nie "
"zgadzały. Wyraźnie pokaż, co by było inaczej, gdyby kod działał tak, jak "
"chcesz."

msgid "misc_terms.signature_should_be"
msgstr ""
"Sygnatura powinna wyglądać:\n"
"\n"
"    def {function_name}{needed_signature}:\n"
"\n"
"nie:\n"
"\n"
"    def {function_name}{actual_signature}:"

msgid "misc_terms.string_spaces_differ"
msgstr ""
"Sprawdź, czy ciągi znaków w twoim kodzie mają poprawne spacje. Na przykład, "
"`'Hello'` różni się od `'Hello '` ze względu na spację na końcu."

msgid "misc_terms.syntax_error_at_line"
msgstr "w linii"

msgid "misc_terms.when_it_should_output"
msgstr "gdy powinno wyświetlić:"

msgid "misc_terms.which_is_correct"
msgstr "co jest poprawne!"

msgid "misc_terms.your_code_outputs"
msgstr "Twój kod wypisuje:"

msgid "misc_terms.your_code_outputs_given_values"
msgstr ""
"Biorąc pod uwagę te wartości:\n"
"\n"
"{given_values}\n"
"\n"
"twój kod wypisuje:"

#. Special choice at the end of all output prediction multiple choice
#. questions
msgid "output_predictions.Error"
msgstr "Błąd"

#. https://futurecoder.io/course/#AddingStrings
#.     # __code0__:
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27world%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27hello%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27hello+%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27+world%27
msgid "pages.AddingStrings.steps.final_text.text"
msgstr ""
"Brawo! Każde z poniższych rozwiązań jest poprawne:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_concat.text"
msgstr ""
"Stringi można łączyć za pomocą '+', jednak oznacza to coś zupełnie innego niż dodawanie liczb. Na przykład, spróbuj:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#AddingStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid "pages.AddingStrings.steps.hello_world_space.hints.0.text"
msgstr "Spacja to znak tak samo jak każdy inny, np. 'o' lub 'w'."

#. https://futurecoder.io/course/#AddingStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid "pages.AddingStrings.steps.hello_world_space.hints.1.text"
msgstr "Znak spacji musi znajdować się gdzieś wewnątrz cudzysłowów."

#. https://futurecoder.io/course/#AddingStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid ""
"pages.AddingStrings.steps.hello_world_space.messages.literal_answer.text"
msgstr "Wciąż musisz dodać dwa lub więcej łańcuchy znaków do siebie."

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_space.requirements"
msgstr ""
"Użyj '+', aby dodać dwa lub więcej łańcuchów znaków do siebie, tak aby "
"wynikiem było łańcuch `'hello world'`."

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_space.text"
msgstr ""
"Możesz zauważyć, że '+' łączy dwa stringi. Technicznie jest to nazywane konkatenacją.\n"
"\n"
"Ćwiczenie: zmień nieznacznie poprzedni kod, tak aby wynikiem był string `'hello world'`, czyli ze spacją między słowami.\n"
"\n"
"Przy okazji, jeśli utkniesz, możesz kliknąć ikonę żarówki w prawym dolnym rogu, aby uzyskać podpowiedź."

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.title"
msgstr "Łączenie Łańcuchów Znaków"

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.steps.final_text.text"
msgstr ""
"Robimy naprawdę duże postępy! Rozwiązujesz problemy i piszesz nowy kod!\n"
"Załóżmy, że utrzymujemy interesujący poziom."

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.hints.0.text"
msgstr ""
"Powinieneś użyć tylko jednego `print`, ponieważ każdy print wypisuje w nowej"
" linii."

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.hints.1.text"
msgstr "Będziesz musiał użyć `+`."

#. https://futurecoder.io/course/#BasicForLoopExercises
#.     # __code0__:
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.character
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27World%27
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.text"
msgstr ""
"Czas na ćwiczenia! Zmodyfikuj ten program:\n"
"\n"
"__code0__\n"
"\n"
"aby zamiast tego wyświetlił:\n"
"\n"
"    __no_auto_translate__\n"
"    ---W\n"
"    ---o\n"
"    ---r\n"
"    ---l\n"
"    ---d"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.0.text"
msgstr ""
"Na chwilę zapomnij o pętlach. Jak byś napisał program, który wypisze `name` "
"(imię) 3 razy?"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.1.text"
msgstr ""
"Rozwiązanie wygląda bardzo podobnie do innych programów, które widzieliśmy w"
" tej sekcji."

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.2.text"
msgstr ""
"Pętla for stworzy zmienną taką jak `character`, ale program nie musi jej "
"wykorzystywać."

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.text"
msgstr ""
"Świetnie! Napisz teraz program, który wypisze `name` tyle razy, ile ma liter. Na przykład dla `name = 'Amy'`, powinien wyjść wynik:\n"
"\n"
"    __no_auto_translate__\n"
"    Amy\n"
"    Amy\n"
"    Amy\n"
"\n"
"Dla `name = 'World'`, powinien wyjść wynik:\n"
"\n"
"    __no_auto_translate__\n"
"    World\n"
"    World\n"
"    World\n"
"    World\n"
"    World\n"
"\n"
"Pamiętaj, że możesz przypisać cokolwiek do `name` w pierwszej linii. Tylko kod poniżej będzie sprawdzany."

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.title"
msgstr "Podstawowe Ćwiczenia z Pętlą For"

#. https://futurecoder.io/course/#BasicTerminology
msgid "pages.BasicTerminology.steps.final_text.text"
msgstr ""
"Oto słowa, które powinieneś znać:\n"
"\n"
"***Wyrażenie*** to fragment kodu, który ma wartość. Na przykład, w tej linii kodu:\n"
"\n"
"    __no_auto_translate__\n"
"    zdanie = 'Hello ' + name\n"
"\n"
"mamy trzy wyrażenia:\n"
"\n"
"1. `'Hello '`\n"
"2. `name`\n"
"3. `'Hello ' + name`\n"
"\n"
"Natomiast pełna linia `zdanie = ...` to ***instrukcja***. To polecenie, które mówi komputerowi, by wykonał akcję. Samo w sobie nie ma wartości. Oznacza to na przykład, że nie można dodawać do siebie instrukcji. Ten kod jest błędny:\n"
"\n"
"    (slowo = 'Hello') + (name = 'Bob')\n"
"\n"
"Konkretnie, instrukcja taka jak `sentence = ...` w której zmiennej przypisywana jest wartość, nazywana jest ***przypisaniem*** - wartość jest *przypisana do* zmiennej.\n"
"\n"
"Program to lista instrukcji, które są wykonane w kolejności. Pętla `for` to *złożona instrukcja*, co oznacza, że ma własną treść, zawierającą inne instrukcje. Większość instrukcji będzie również zawierać wyrażenia, i wyrażenia mogą zawierać inne, mniejsze wyrażenia, ale wyrażenia nie mogą zawierać instrukcji.\n"
"\n"
"Proces obliczania wartości wyrażenia nazywa się ***ewaluacją*** - zauważ, jak niemal zawiera słowo 'wartość'. Komputer *ewaluuje* `1 + 2`, by uzyskać wartość `3`.\n"
"\n"
"Proces wykonywania pętli nazywa się ***iteracją***. Kod taki jak `for char in 'Hello':` *iteruje przez* łańcuch `'Hello'`. Fakt, że jest to możliwe, oznacza, że łańcuchy znaków są *iterowalne*. W przeciwieństwie do tego, liczby nie są iterowalne, co dokładnie Python ci powie, jeśli spróbujesz `for char in 3:`. Każde wykonanie pętli to *jedna iteracja*, więc w tym przykładzie będzie ich 5."

#. https://futurecoder.io/course/#BasicTerminology
msgid "pages.BasicTerminology.title"
msgstr "Podstawowa Terminologia"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.0.text"
msgstr "Pamiętaj, że możesz mnożyć liczby używając `*`."

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.1.text"
msgstr ""
"Ten program jest strukturalnie bardzo podobny do programów, które pisałeś, "
"budując łańcuchy znaków znak po znaku."

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.2.text"
msgstr ""
"Utwórz nową listę, a następnie zbuduj ją element po elemencie w pętli for."

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.3.text"
msgstr "Zacznij od pustej listy."

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.4.text"
msgstr "Możesz utworzyć listę z jednym elementem `x`, po prostu pisząc `[x]`."

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.5.text"
msgstr ""
"Możesz dodać element do listy, dodając listę zawierającą jeden element."

#. https://futurecoder.io/course/#BuildingNewLists
#.     # __code0__:
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
#.     # __code1__:
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#.     # __code2__:
#.     [6, 2, 8, 2, 10, 18, 4, 12, 10]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.BuildingNewLists.steps.double_numbers.text"
msgstr ""
"Listy i łańcuchy znaków mają wiele wspólnego.\n"
"Na przykład, możesz dodać dwie listy, aby połączyć je w nową listę.\n"
"Możesz także utworzyć pustą listę, która nie ma żadnych elementów.\n"
"Sprawdź to sam:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Z tą wiedzą, napisz program, który bierze listę liczb\n"
"i wyświetla listę, na której każda liczba została podwojona. Na przykład, mając:\n"
"\n"
"__code1__\n"
"\n"
"wydrukowałby:\n"
"\n"
"__code2__"

msgid "pages.BuildingNewLists.steps.filter_numbers.disallowed.0.message"
msgstr ""
"Brawo, to jest poprawne! Jednak powinieneś użyć `.append()` zamiast `+=`."

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.0.text"
msgstr "To jest bardzo podobne do poprzedniego ćwiczenia."

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.1.text"
msgstr ""
"Różnica polega na tym, że czasami powinieneś pominąć dodawanie do nowej "
"listy."

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.2.text"
msgstr "Użyj instrukcji `if`."

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.3.text"
msgstr ""
"Użyj operatora porównania, aby przetestować, czy liczba jest wystarczająco "
"duża, aby ją dodać."

#. https://futurecoder.io/course/#BuildingNewLists
#.     # __code2__:
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#.     # __code1__:
#.     some_list.append(element)
#.     # __code0__:
#.     some_list += [element]
#.     # __code3__:
#.     [9, 6]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.element
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.BuildingNewLists.steps.filter_numbers.text"
msgstr ""
"Świetnie!\n"
"\n"
"Gdy chcesz dodać pojedynczy element na koniec listy, zamiast:\n"
"\n"
"__code0__\n"
"\n"
"częściej pisze się:\n"
"\n"
"__code1__\n"
"\n"
"Nie ma naprawdę dużej różnicy między tymi dwoma sposobami, ale `.append`\n"
"będzie bardziej znajomy i czytelny dla większości osób.\n"
"\n"
"Teraz użyj `.append`, aby napisać program, który bierze listę liczb i\n"
"wyświetla nową listę zawierającą tylko te liczby, które są większe niż 5.\n"
"\n"
"Na przykład, mając:\n"
"\n"
"__code2__\n"
"\n"
"wydrukowałby:\n"
"\n"
"__code3__"

#. https://futurecoder.io/course/#BuildingNewLists
msgid "pages.BuildingNewLists.steps.final_text.text"
msgstr "Fantastycznie! Robimy duże postępy."

#. https://futurecoder.io/course/#BuildingNewLists
msgid "pages.BuildingNewLists.title"
msgstr "Budowanie Nowych List"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.empty_string.text"
msgstr ""
"Ostatni znak w `name` jest dodawany do `line` tylko na końcu pętli, po tym jak `print(line)` już zostało wykonane po raz ostatni. Więc ten znak i pełna `name` nigdy nie zostają wydrukowane na dole trójkąta. Jeśli jesteś zdezorientowany, spróbuj umieścić `print(line)` zarówno przed, jak i po `line = line + char`.\n"
"\n"
"Zróbmy coś z tymi znakami `-` na wyjściu. Możesz już być w stanie zgadnąć jak.\n"
"\n"
"*Pusty łańcuch* to łańcuch nie zawierający w ogóle znaków.\n"
"Jest zapisany jako para cytatów otaczających nic: `''`.\n"
"To jest jak zero łańcuchów.\n"
"Dodanie go do innego łańcucha daje ci po prostu niezmieniony drugi łańcuch,\n"
"tak samo jak `0 + 5` to po prostu `5`.\n"
"\n"
"Spróbuj tego w konsoli:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.final_text.text"
msgstr ""
"Czyż to nie jest piękne?\n"
"\n"
"Wzór rozpoczęcia od czegoś pustego i budowania tego w pętli `for` jest *bardzo* częsty\n"
"i będziesz miał z tym dużo praktyki. Niektóre początkowe puste wartości to\n"
"`''`, `0` i `[]` - pusta lista, o której wkrótce się dowiesz."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid ""
"pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.0"
msgstr ""
"Witaj\n"
"Witaj"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid ""
"pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.1"
msgstr ""
"Witaj\n"
"Witaj!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid ""
"pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.2"
msgstr ""
"Witaj!\n"
"Witaj!"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.hello_plus_equals.text"
msgstr ""
"Zanim przyjrzymy się kilku pętlom, musimy szybko poznać kolejne pojęcie. Spójrz na ten program:\n"
"\n"
"__program_indented__\n"
"\n"
"Co myślisz, robi linia `hello = hello + '!'`? Uruchom program, aby się dowiedzieć."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.0"
msgstr ""
"-\n"
"W\n"
"-\n"
"o\n"
"-\n"
"r\n"
"-\n"
"l\n"
"-\n"
"d"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.1"
msgstr ""
"-W\n"
"-o\n"
"-r\n"
"-l\n"
"-d"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.2"
msgstr "-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.3"
msgstr "-W-o-r-l-d"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.4"
msgstr ""
"-W\n"
"-Wo\n"
"-Wor\n"
"-Worl\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.5"
msgstr ""
"-World\n"
"-Worl\n"
"-Wor\n"
"-Wo\n"
"-W"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.6"
msgstr ""
"-World\n"
"-World\n"
"-World\n"
"-World\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.7"
msgstr ""
"-World\n"
"--World\n"
"---World\n"
"----World\n"
"-----World"

#. https://futurecoder.io/course/#BuildingUpStrings
#.     # __code0__:
#.     temp = hello + '!'
#.     hello = temp
#.     # __code1__:
#.     temp = hello
#.     hello = temp + '!'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.temp
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.hello
msgid "pages.BuildingUpStrings.steps.name_triangle.text"
msgstr ""
"Pythonowi nie przeszkadza, że `hello` znajduje się zarówno po lewej, jak i prawej stronie `=`, po prostu robi to, co zawsze by zrobił, gdyby zmienne były inne: oblicza `hello + '!'`, co w tym przypadku jest `'Hello' + '!'`, co daje `'Hello!'`, i to staje się nową wartością `hello`. Jeśli to pomoże, możesz myśleć o tej linii jako podzielonej na dwa kroki:\n"
"\n"
"__code0__\n"
"\n"
"lub:\n"
"\n"
"__code1__\n"
"\n"
"To jest bardzo użyteczne w pętli. Wypróbuj ten program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.0.text"
msgstr ""
"Najpierw upewnij się, że nie pracujesz na uszkodzonej wersji poprzedniego "
"programu na tej stronie."

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.1.text"
msgstr "Czyli `line = line + char` powinno być przed `print(line)`."

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.2.text"
msgstr "Poza tym musisz dokonać tylko jednej ***malutkiej*** zmiany."

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.3.text"
msgstr "Chcemy pozbyć się `-`. Więc po prostu to zrób. Dosłownie."

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.4.text"
msgstr "Użyj pustego łańcucha!"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.text"
msgstr ""
"Nie myl pustego łańcucha z `' '`, który jest niepustym łańcuchem zawierającym jeden znak: spację.\n"
"\n"
"Teraz napraw oryginalny program, aby pozbyć się tych linii w wyjściu, tak aby\n"
"dla `name = 'World'` wydrukowało:\n"
"\n"
"    __no_auto_translate__\n"
"    W\n"
"    Wo\n"
"    Wor\n"
"    Worl\n"
"    World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid ""
"pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.0"
msgstr ""
"-W\n"
"-Wo\n"
"-Wor\n"
"-Worl\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid ""
"pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.1"
msgstr ""
"-Wo\n"
"-Wor\n"
"-Worl\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid ""
"pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.2"
msgstr ""
"-\n"
"-W\n"
"-Wo\n"
"-Wor\n"
"-Worl"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.name_triangle_missing_last_line.text"
msgstr ""
"Poświęć czas, aby całkowicie zrozumieć ten program. Robi coś w rodzaju:\n"
"\n"
"    line = '-'\n"
"\n"
"    char = 'W'\n"
"    line = line + char\n"
"         = '-' + 'W'\n"
"         = '-W'\n"
"    print('-W')\n"
"\n"
"    char = 'o'\n"
"    line = line + char\n"
"         = '-W' + 'o'\n"
"         = '-Wo'\n"
"    print('-Wo')\n"
"\n"
"    char = 'r'\n"
"    line = line + char\n"
"         = '-Wo' + 'r'\n"
"         = '-Wor'\n"
"    print('-Wor')\n"
"\n"
"    ...\n"
"\n"
"Szczegóły są ważne. Co się stanie, jeśli zamienisz ostatnie dwie linie i uruchomisz ten program zamiast tego?\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.title"
msgstr "Budowanie łańcuchów tekstowych"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.0.text"
msgstr ""
"Pierwsza litera powinna mieć 0 spacji przed nią, druga litera powinna mieć 1"
" spację przed nią, trzecia powinna mieć 2, itd."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.1.text"
msgstr ""
"Powinieneś trzymać spacje w zmiennej i budować je w pętli, jak wcześniej."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.2.text"
msgstr ""
"Różnica polega na tym, że musisz wydrukować litery jednocześnie z "
"zbudowaniem spacji."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.3.text"
msgstr "Innymi słowy, potrzebujesz pojedynczej pętli, która robi to i to."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.4.text"
msgstr "Ciało pętli musi wydrukować spacje i litery, a także dodać spację."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.5.text"
msgstr ""
"Ponieważ pierwsza litera nie powinna mieć spacji przed nią, musisz dodać "
"spację po wydrukowaniu litery."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.messages.add_space_first.text"
msgstr ""
"Prawie tam! Masz jedną spację za dużo przed każdą literą.\n"
"Upewnij się, że pierwszy raz gdy twoja pętla wywoła `print`\n"
"twoja zmienna, która będzie zawierać spacje, jest pustym ciągiem.\n"
"Sprawdź kolejność swojego kodu."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.text"
msgstr ""
"Cudownie! Naprawdę Łapiesz to!\n"
"\n"
"Jeśli chcesz, możesz zrobić jeden dodatkowy opcjonalny bonusowy wyzwanie poniżej.\n"
"Jeśli nie, możesz po prostu kontynuować do [następnej strony](#BasicTerminology) teraz.\n"
"Możesz wrócić i zrobić to później, jeśli chcesz.\n"
"\n"
"Spróbuj napisać program, który wyświetli podaną `nazwę` w przekątnej linii, na przykład:\n"
"\n"
"    Ś\n"
"     w\n"
"      i\n"
"       a\n"
"        t"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.final_text.text"
msgstr "Wow, nic Cię nie powstrzyma!"

msgid "pages.BuildingUpStringsExercises.steps.name_box.disallowed.0.message"
msgstr ""
"Dobra robota, to rozwiązanie jest poprawne! Jednak można je ulepszyć.\n"
"Wystarczy użyć jednej pętli - użycie więcej jest nieefektywne.\n"
"Możesz ponownie użyć zmiennej zawierającej linię z `-` i `+`."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.0.text"
msgstr ""
"Zrobiłeś już wszystkie trudne rzeczy w poprzednim ćwiczeniu. Teraz to tylko "
"proste dodawanie łańcuchów."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.1.text"
msgstr ""
"Potrzebujesz tylko jednej pętli for - tej używanej do tworzenia linii "
"myślników z poprzedniego ćwiczenia."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.2.text"
msgstr ""
"Nie próbuj zrobić wszystkiego naraz. Podziel problem na mniejsze, łatwiejsze"
" podproblemy."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.3.text"
msgstr ""
"Spróbuj napisać program, który wyświetla:\n"
"\n"
"    ------\n"
"    Świat\n"
"    ------"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.4.text"
msgstr ""
"Ponieważ musisz wydrukować trzy oddzielne linie tekstu, będziesz musiał "
"zadzwonić `print()` trzy razy."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.5.text"
msgstr ""
"Spróbuj napisać program, który wyświetla:\n"
"\n"
"    |Świat|"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_box.text"
msgstr ""
"Fantastycznie!\n"
"\n"
"Przy okazji, gdy nie potrzebujesz używać zmiennej, powszechną konwencją jest nazwanie tej zmiennej `_` (podkreślenie), na przykład `for _ in name:`. Nie zmienia to działania programu, ale jest pomocne dla czytelników.\n"
"\n"
"Zróbmy to bardziej wyszukane. Rozszerz swój program, aby narysować ramkę wokół nazwy, taką jak tutaj:\n"
"\n"
"    +-----+\n"
"    |Świat|\n"
"    +-----+"

msgid "pages.BuildingUpStringsExercises.steps.name_box_2.disallowed.0.message"
msgstr ""
"Dobra robota, to rozwiązanie jest poprawne!\n"
"I użyłeś pętli zagnieżdżonej (pętli wewnątrz pętli), której jeszcze nie omawialiśmy!\n"
"Jednakże w tym przypadku pętla zagnieżdżona jest nieefektywna.\n"
"Możesz utworzyć zmienną zawierającą spacje i wykorzystać to w każdej linii."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.0.text"
msgstr "Będziesz potrzebować dwóch oddzielnych pętli for nad `name`."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.1.text"
msgstr ""
"Każda linia z wyjątkiem pierwszej i ostatniej ma te same znaki w środku. To "
"znaczy, że możesz coś wykorzystać ponownie."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.2.text"
msgstr "Stwórz zmienną zawierającą spacje w środku i używaj jej wiele razy."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.3.text"
msgstr ""
"Użyj jednej pętli, aby stworzyć wiele spacji, i drugiej pętli, aby "
"wydrukować wiele linii używając wcześniej stworzonych spacji."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.text"
msgstr ""
"Coraz lepiej Ci idzie! Wygląda na to, że potrzebujesz większego wyzwania... może zamiast umieszczać nazwę w ramce, sama nazwa powinna być ramką? Napisz program, który wyświetla to:\n"
"\n"
"    +Świat+\n"
"    Ś     Ś\n"
"    w     w\n"
"    i     i\n"
"    a     a\n"
"    t     t\n"
"    +Świat+"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.0.text"
msgstr ""
"Rozwiązanie jest bardzo podobne do oryginalnego programu trójkąta, wystarczy"
" zrobić jedną małą zmianę."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.1.text"
msgstr ""
"Chcesz nadal dodawać po jednym znaku do `line`, to tylko kwestia tego, gdzie"
" dodajesz go."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.2.text"
msgstr "Chcesz, aby linie były odwrócone, więc musisz odwrócić coś."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.3.text"
msgstr "Potrzebujesz dodać znak przed ciągiem, zamiast po."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.4.text"
msgstr ""
"3 + 7 to to samo co 7 + 3. Tak samo dla wszystkich liczb. Czy to samo "
"dotyczy ciągów znaków?"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_backwards.text"
msgstr ""
"Świetnie! Teraz zmodyfikuj program tak, aby każda linia była odwrócona, na przykład tak:\n"
"\n"
"    __no_auto_translate__\n"
"    W\n"
"    oW\n"
"    roW\n"
"    lroW\n"
"    dlroW"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_spaced.hints.0.text"
msgstr "Będziesz potrzebować użyć jednego `+` więcej."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_spaced.hints.1.text"
msgstr ""
"Będziesz potrzebować użyć ciągu składającego się z jednej spacji: `' '`."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#.     # __code0__:
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27World%27
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text"
msgstr ""
"Zmodyfikuj ten program:\n"
"\n"
"__code0__\n"
"\n"
"aby dodać spację po każdej literze w trójkącie, tak aby wyglądało to tak:\n"
"\n"
"    W \n"
"    W o \n"
"    W o r \n"
"    W o r l \n"
"    W o r l d"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.0.text"
msgstr "Spójrz na program w kształcie trójkąta w poszukiwaniu inspiracji."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.1.text"
msgstr ""
"Spójrz na program, w którym wydrukowałeś `name` raz dla każdego znaku w "
"poszukiwaniu inspiracji."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.2.text"
msgstr ""
"Będziesz musiał zbudować łańcuch myślników (`-`) dodając po jednym znaku na "
"raz."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.3.text"
msgstr ""
"Pętla for stworzy zmienną, taką jak `char`, ale program nie musi jej używać."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#.     # __code0__:
#.     line = line + char
#.     # __code1__:
#.     line += char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.text"
msgstr ""
"Wspaniale!\n"
"\n"
"Kod taki jak:\n"
"\n"
"__code0__\n"
"\n"
"jest tak powszechny w Pythonie, że można go skrócić. Oznacza to samo:\n"
"\n"
"__code1__\n"
"\n"
"Zwróć uwagę, że nie ma skrótu dla `line = char + line`.\n"
"\n"
"Teraz użyj `+=` i pętli for, aby napisać własny program, który wydrukuje `name` podkreślone, jak tutaj:\n"
"\n"
"    Świat\n"
"    ------\n"
"\n"
"Powinien być jeden `-` dla każdej litery w `name`."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.title"
msgstr "Ćwiczenia: Składanie łańcuchów znaków"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.final_text.text"
msgstr ""
"Słowo 'atrybut' w komunikacie o błędzie odnosi się do użycia `.` - błąd "
"pochodzi właściwie tylko z `word.append`, nawet bez wywołania."

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.introducing_callable.text"
msgstr ""
"Wyrażenie takie jak `len(things)` lub `print(things)` to wywołanie funkcji, czyli ***wywołanie*** - gdy to piszesz, ***wywołujesz*** funkcję `len` lub `print`. Fakt, że jest to możliwe, oznacza, że funkcje są ***wywoływalne***:\n"
"\n"
"__program_wcięty__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.len_of_none.text"
msgstr ""
"`None` to specjalna wartość 'null', która nie może zrobić nic ciekawego. To powszechny symbol zastępczy reprezentujący brak realnej, użytecznej wartości. Funkcje, które nie chcą niczego zwracać, domyślnie zwracają `None`. Jeśli widzisz komunikat o błędzie dotyczący `None` lub `NoneType`, często oznacza to, że przypisałeś coś niewłaściwego do zmiennej:\n"
"\n"
"__program_wcięty__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.methods_of_str.text"
msgstr ""
"***Metoda*** to funkcja należąca do typu, którą można wywołać na wszystkich wartościach tego typu, używając `.`. Na przykład `upper` i `lower` to metody ciągów znaków, które są wywoływane z użyciem np. `word.upper()`:\n"
"\n"
"__program_wcięty__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.no_append_for_str.text"
msgstr ""
"Kolejnym przykładem jest to, że `append` to metoda list. Ale nie możesz użyć `.upper` na liście ani `.append` na ciągu znaków:\n"
"\n"
"__program_wcięty__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.not_callable.text"
msgstr ""
"Większość rzeczy nie jest wywoływalna, więc próba ich wywołania spowoduje błąd:\n"
"\n"
"__program_wcięty__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.print_functions.text"
msgstr ""
"Nadszedł czas, by poszerzyć twoje słownictwo jeszcze bardziej.\n"
"\n"
"`print` i `len` to ***funkcje***. Zobacz sam:\n"
"\n"
"__program_wcięty__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.print_returns_none.text"
msgstr ""
"W wywołaniu `len(things)`, `things` to ***argument***. Czasami spotkasz się też ze słowem ***parametr***, które oznacza w zasadzie to samo co argument. To trochę jakbyś przekazywał argument funkcji - konkretnie mówimy, że argument `things` jest *przekazywany* do `len`, a `len` *akceptuje* lub *odbiera* argument.\n"
"\n"
"`len(things)` wyliczy się do liczby, takiej jak 3, w takim przypadku mówimy, że `len` ***zwrócił*** 3.\n"
"\n"
"Wszystkie wywołania muszą coś zwrócić... nawet jeśli to nic. Na przykład, zadaniem funkcji `print` jest wyświetlenie czegoś na ekranie, a nie zwracanie użytecznej wartości. Dlatego zwraca coś bezużytecznego zamiast tego:\n"
"\n"
"__program_wcięty__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.title"
msgstr "Terminologia: Wywoływanie funkcji i metod"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.final_text.text"
msgstr ""
"`birdseye` pokazuje tylko jedną ramkę (wywołanie funkcji) na raz. Najpierw widać ramkę globalną.\n"
"Na dole jest wywołanie `print_twice`. Kliknij na małą niebieską strzałkę aby przejść\n"
"do tej ramki, a potem kliknij na następną, aby wejść do `print_many`."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many.text"
msgstr ""
"Ciało funkcji może zawierać wszystko, w tym wywołania funkcji. Zresztą już to zrobiliśmy wywołując\n"
"print. Lecz wywołanie naszej własnej funkcji nie różni się niczym, więc nasze funkcje mogą się wzajemnie wywoływać!\n"
"\n"
"Na przykład, możemy zaimplementować `print_twice` przy użyciu `print_many`:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye.requirements"
msgstr "Uruchom ten sam program co powyżej, ale z `birdseye`."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye.text"
msgstr ""
"Za każdym razem, gdy funkcja jest wywołana, tworzona jest nowa *ramka*, która zawiera lokalne wartości zmiennych\n"
"w tym wywołaniu i inne informacje o tym, co się obecnie dzieje.\n"
"Gdy wywołanie funkcji się kończy, ramka jest usuwana.\n"
"\n"
"Można to zobaczyć w Python Tutor po prawej stronie pod \"Frames\". Na górze jest Globalna ramka,\n"
"główna ramka, w której działa cały program. Klikając Dalej, nowe ramki się pojawiają\n"
"i potem znikają. W każdej z nich można zobaczyć wartości zmiennych.\n"
"\n"
"Na koniec, uruchom program z `birdseye`."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor.requirements"
msgstr "Uruchom ten sam program co powyżej, ale z Python Tutor."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor.text"
msgstr ""
"`snoop` rozpoczyna każde wywołanie funkcji od:\n"
"\n"
"1. Nowego poziomu wcięcia w logach.\n"
"2. `>>> Call to <nazwa funkcji>`\n"
"3. Wartości argumentów.\n"
"4. Linii nagłówka funkcji.\n"
"\n"
"Kończy wywołanie z `<<< Return value from <nazwa funkcji>`. Niedługo dowiemy się więcej o wartościach zwracanych.\n"
"\n"
"Teraz uruchom program ponownie z Python Tutor."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop.requirements"
msgstr "Uruchom ten sam program co powyżej, ale z `snoop`."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop.text"
msgstr ""
"Jest ważne aby dobrze zrozumieć co się tutaj dzieje i wiedzieć jak\n"
"badać wywołania funkcji, więc spróbujemy to zrobić w każdym debuggerze.\n"
"\n"
"Najpierw, uruchom program ponownie z `snoop`."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.title"
msgstr "Wywoływanie Funkcji w Funkcjach"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.0.text"
msgstr "Ile przekątnych jest na planszy?"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.1.text"
msgstr ""
"Które wpisy z trzech sublist tworzą każdą przekątną? Jak możesz uzyskać "
"dostęp do tych wpisów?"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.2.text"
msgstr "Każda lista zawsze ma 3 wpisy, więc nie ma potrzeby użycia pętli."

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.3.text"
msgstr ""
"Są dwa problemy do rozwiązania tutaj: sprawdzenie wygranej na konkretnej "
"przekątnej oraz połączenie sprawdzeń dla każdej przekątnej."

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.4.text"
msgstr "Jeden problem można rozwiązać używając `and`, inny używając `or`."

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.5.text"
msgstr ""
"Wiele podobieństw ma funkcja `all_equal`. Możesz nawet użyć tej funkcji do "
"pomocy! Ale wtedy musisz zawrzeć jej definicję."

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.6.text"
msgstr ""
"Podobnie jak `all_equal`, sprawdź, czy 3 wpisy na przekątnej są równoważne "
"sobie, np. używając `and`."

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.7.text"
msgstr "Sprawdź obie przekątne razem, używając `or`."

#. https://futurecoder.io/course/#CombiningAndAndOr
#.     # __code4__:
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     # __code3__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['X', 'X', 'O'],
#.         ['O', 'O', 'X']
#.     ]
#.     # __code1__:
#.     (True or False) and False
#.     # __code2__:
#.     True or (False and False)
#.     # __code0__:
#.     True or False and False
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.text"
msgstr ""
"Jeśli przeczytać to pobieżnie od lewej do prawej, możesz pomyśleć, że:\n"
"\n"
"__code0__\n"
"\n"
"jest równoważne z\n"
"\n"
"__code1__\n"
"\n"
"ale tak naprawdę równoważne jest z\n"
"\n"
"__code2__\n"
"\n"
"To dlatego, że `and` ma wyższy priorytet niż `or`.\n"
"To jest ważne, ponieważ pierwsza interpretacja redukuje się do `True and False` co jest `False`, podczas gdy druga\n"
"interpretacja redukuje się do `True or False` co jest `True`!\n"
"Możesz wypróbować obie opcje z nawiasami w konsoli, aby się przekonać.\n"
"\n"
"**Morał jest taki, aby być szczególnie ostrożnym łącząc operatory.** Albo dodaj nawiasy dla bezpieczeństwa, albo\n"
"podziel swoje wyrażenie na mniejsze części i przypisz każdą część do zmiennej.\n"
"To uczyni twój kod czytelny, zrozumiały i jednoznaczny, oraz uchroni cię przed bolesnymi błędami.\n"
"\n"
"Czas na ćwiczenie. Załóżmy, że piszesz program do gry w kółko i krzyżyk. Jeśli nigdy nie słyszałeś o kółko i krzyżyk, możesz przeczytać zasady\n"
"i zagrać kilka gier [tutaj](https://gametable.org/games/tic-tac-toe/).\n"
"\n"
"Musimy sprawdzić, czy ktoś wygrał grę. Nasza funkcja `all_equal` już w tym pomaga sprawdzając rzędy.\n"
"\n"
"Napisz funkcję do sprawdzania, czy ktoś wygrał grę poprzez umieszczenie 3 tych samych elementów na jednej z linii przekątnych.\n"
"Plansza jest podana jako zagnieżdżona lista `board` z 3 sublistami, każda sublista zawiera 3 ciągi znaków, reprezentujące rząd. Na przykład:\n"
"\n"
"__code3__\n"
"\n"
"Funkcja powinna zwrócić typ booleanowski: `True` jeśli jedna z przekątnych posiada 3 te same elementy, `False` w przeciwnym wypadku.\n"
"Kliknij przycisk Kopiuj, aby rozpocząć z poniższym kodem.\n"
"Dostarczyliśmy kilka testów dla ciebie, twoim zadaniem jest zastąpić `...` twoim kodem.\n"
"\n"
"    __copyable__\n"
"__code4__"

#. https://futurecoder.io/course/#CombiningAndAndOr
msgid "pages.CombiningAndAndOr.steps.CombiningAndOr.text"
msgstr ""
"Jeśli używasz operatów `and` (i) oraz `or` (lub) w jednym wyrażeniu, jest to całkiem jak łączenie `*` oraz `+`.\n"
"Operatory są wykonywane w określonej kolejności.\n"
"\n"
"Na przykład, wypróbuj poniższy kod w konsoli.\n"
"Czego się spodziewasz?\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CombiningAndAndOr
#.     # __code0__:
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#.     # __code1__:
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.middle
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
msgid "pages.CombiningAndAndOr.steps.final_text.text"
msgstr ""
"Brawo! To było trudne. Oto kilka możliwych rozwiązań:\n"
"\n"
"__code0__\n"
"\n"
"lub:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#CombiningAndAndOr
msgid "pages.CombiningAndAndOr.title"
msgstr "Łączenie `and` i `or`"

#. https://futurecoder.io/course/#CombiningCompoundStatements
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_sentence
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
msgid "pages.CombiningCompoundStatements.steps.final_text.text"
msgstr ""
"Zauważ, że ciało instrukcji `if` (4 linie) jest jak zwykle wcięte, podczas gdy ciało\n"
"pętli `for` (1 linia) jest wcięte o dodatkowe 4 spacje w każdej linii, aby pokazać, że\n"
"te linie są wewnątrz pętli `for`. Strukturę całego programu można zobaczyć\n"
"po prostu patrząc na wcięcia.\n"
"\n"
"Alternatywnie, możesz umieścić `if` w środku `for`:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Te dwa programy dają dokładnie ten sam wynik. Jednak pierwszy z nich jest bardziej wydajny, ponieważ\n"
"iteruje po łańcuchu tylko wtedy, gdy jest to potrzebne, ponieważ gdy `excited = False` nic się nie zmienia."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.2"
msgstr "Hello World!!!!!!!!!!!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.3"
msgstr "!!!!!!!!!!!Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.4"
msgstr "Hello World!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.5"
msgstr "!Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.6"
msgstr "!Hello World!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.7"
msgstr "H!e!l!l!o! !W!o!r!l!d!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.8"
msgstr "!H!e!l!l!o! !W!o!r!l!d"

#. https://futurecoder.io/course/#CombiningCompoundStatements
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.text"
msgstr ""
"Złożone instrukcje takie jak pętle `for` i instrukcje `if` mają ciała, które są listą\n"
"wnętrznych instrukcji. Te wewnętrzne instrukcje mogą być czymkolwiek, włącznie z innymi złożonymi instrukcjami.\n"
"Spróbuj tego przykładu pętli `for` wewnątrz instrukcji `if`, gdy chcesz pokazać,\n"
"że jesteś *naprawdę* podekscytowany:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CombiningCompoundStatements
msgid "pages.CombiningCompoundStatements.title"
msgstr "Łączenie Złożonych Instrukcji"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.0.text"
msgstr ""
"Musisz zmienić nazwę w nagłówku definicji funkcji, ale to nie wszystko."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.1.text"
msgstr ""
"Jeśli zmienisz tylko nazwę w nagłówku definicji funkcji, co się stanie?"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.2.text"
msgstr "Otrzymasz błąd. Spójrz na komunikat. Co Ci mówi? Skąd pochodzi błąd?"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.3.text"
msgstr ""
"Jeśli twoja funkcja nazywa się `say_hello`, co oznacza `greet(\"Alice\")`?"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.4.text"
msgstr "Musisz zmienić dokładnie 3 linijki programu."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.5.text"
msgstr "W każdej linijce, którą zmieniasz, zmień dokładnie jedno słowo."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.6.text"
msgstr ""
"Nie ruszaj treści funkcji. Powinna ona nadal zawierać `print(\"Jak się "
"masz?\")`."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.7.text"
msgstr ""
"Nadal powinieneś(aś) wywołać funkcję dwukrotnie po jej zdefiniowaniu, z "
"argumentami `\"Alice\"` i `\"Bob\"`."

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Hello+%7Bname%7D%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22How+are+you%3F%22
msgid "pages.DefiningFunctions.steps.change_function_name.text"
msgstr ""
"Zwróć uwagę, jak zmieniło się wyjście programu. `Jak się masz?` jest wyświetlane dwukrotnie. Możesz myśleć o całym programie jako o czymś\n"
"równoważnym do tego:\n"
"\n"
"__code0__\n"
"\n"
"To pokazuje jedną z najbardziej użytecznych rzeczy odnośnie funkcji. Pozwalają one wielokrotnie używać tego samego kodu bez\n"
"konieczności powtarzania się. To jak pisanie programu wewnątrz programu.\n"
"\n"
"Linia nagłówka definicji funkcji zawsze zawiera te części:\n"
"\n"
"1. Specjalne słowo kluczowe `def`, po którym następuje spacja.\n"
"2. Nazwa funkcji. Jest to jak nazwa zmiennej - możesz wybrać nazwę, którą chcesz, ale istnieją pewne ograniczenia,\n"
"np. nie może zawierać spacji.\n"
"3. Para nawiasów `(` i `)`\n"
"4. Zero lub więcej nazw parametrów pomiędzy nawiasami, oddzielonych przecinkami, jeśli jest ich więcej niż jeden. Tutaj mamy\n"
"jeden parametr o nazwie `name`.\n"
"5. Dwukropek `:`\n"
"\n"
"Zróbmy kilka prostych ćwiczeń. Zmień nazwę funkcji z `greet` na `say_hello`.\n"
"Upewnij się, że cały program nadal działa jak przedtem, ale nie zmieniaj niczego innego."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.0.text"
msgstr ""
"Musisz zmienić nazwę parametru w nagłówku definicji funkcji, ale to nie "
"wszystko."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.1.text"
msgstr ""
"Jeśli zmienisz tylko nazwę parametru w nagłówku definicji funkcji, co się "
"stanie?"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.2.text"
msgstr "Otrzymasz błąd. Spójrz na komunikat. Co Ci mówi? Skąd pochodzi błąd?"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.3.text"
msgstr ""
"Jeśli parametr nazywa się `person_name`, co oznacza `print(f\"Hello "
"{name}!\")`?"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.4.text"
msgstr "Musisz zmienić dokładnie 2 linijki programu."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.5.text"
msgstr "W każdej linijce, którą zmieniasz, zmień dokładnie jedno słowo."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.6.text"
msgstr ""
"Nie ruszaj części po definicji funkcji, tzn. `say_hello(\"Alice\")` i "
"`say_hello(\"Bob\")`."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.7.text"
msgstr ""
"W treści funkcji powinieneś(aś) nadal mieć dwie instrukcje, w tym "
"`print(\"Jak się masz?\")`."

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.change_parameter_name.text"
msgstr ""
"Dobrze! Teraz wykonaj podobne ćwiczenie: zmień nazwę parametru z `name` na "
"`person_name`."

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.define_greet.text"
msgstr ""
"Zobaczyłeś(aś) już, jak wywoływać funkcje takie jak `print()` i `len()`. Teraz nauczysz się pisać własne\n"
"funkcje, z których mogą korzystać Ty lub inni ludzie. Jest to bardzo ważne, ponieważ programy stają się większe i bardziej skomplikowane.\n"
"\n"
"Oto prosty przykład:\n"
"\n"
"__program_indented__\n"
"\n"
"To definiuje funkcję o nazwie `greet`, która akceptuje jeden parametr. Poniżej definicji wywołujemy funkcję dwukrotnie.\n"
"Uruchom kod, aby zobaczyć co się stanie."

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.final_text.text"
msgstr "Doskonale! Teraz masz solidne podstawy podstaw definiowania funkcji."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.0"
msgstr ""
"Cześć Alice!\n"
"Jak się masz?\n"
"Cześć Bob!\n"
"Jak się masz?"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.1"
msgstr ""
"Cześć Alice!\n"
"Cześć Bob!\n"
"Jak się masz?"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.2"
msgstr ""
"Cześć Alice!\n"
"Jak się masz?\n"
"Cześć Bob!"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.how_are_you.requirements"
msgstr ""
"Dodaj `print(\"Jak się masz?\")` po `print(f\"Cześć {name}!\")` z takim samym wcięciem.\n"
"Zachowaj dwa wywołania `greet` po definicji jak są."

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22How+are+you%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Hello+%7Bname%7D%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.greet
msgid "pages.DefiningFunctions.steps.how_are_you.text"
msgstr ""
"Definicja funkcji to składna instrukcja. Podobnie jak `if` i `for`, ma linię nagłówkową, po której następuje wcięty blok\n"
"zawierający jedną lub więcej instrukcji.\n"
"\n"
"Dodaj kolejną instrukcję do funkcji, aby wyglądała ona tak:\n"
"\n"
"__code0__\n"
"\n"
"Następnie uruchom program ponownie."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.2"
msgstr ""
"Cześć\n"
"Cześć\n"
"Cześć"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.3"
msgstr "Cześć"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.4"
msgstr ""
"H\n"
"e\n"
"l\n"
"l\n"
"o"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.print_many.text"
msgstr ""
"Funkcje mogą mieć wiele parametrów. Tutaj jest przykład:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.0.text"
msgstr ""
"Nie ma tu żadnych szczególnych zagadek, chodzi tylko o przestrzeganie "
"receptury na definiowanie funkcji."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.1.text"
msgstr "Upewnij się, że masz wszystkie części funkcji wymienione powyżej."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.2.text"
msgstr "To obejmuje `def`, `()`, i `:`."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.3.text"
msgstr "Upewnij się, że twoja funkcja nazywa się `print_twice`."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.4.text"
msgstr ""
"Upewnij się, że przyjmuje ona jeden parametr o nazwie `x` pomiędzy nawiasami"
" `()`."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.5.text"
msgstr "Spójrz na inne funkcje zdefiniowane powyżej, aby uzyskać pomoc."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.6.text"
msgstr "Użyj parametru wewnątrz treści funkcji."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.7.text"
msgstr "Upewnij się, że treść jest wcięta."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.8.text"
msgstr "Treść powinna zawierać dwie instrukcje lub bardzo prostą pętlę."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.9.text"
msgstr ""
"Upewnij się, że nie wywołujesz `print_twice` wewnątrz treści funkcji "
"`print_twice`. Sprawdź swoje wcięcia."

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.print_twice_exercise.requirements"
msgstr ""
"Napisz program definiujący funkcję o nazwie `print_twice` zgodnie z opisem "
"powyżej."

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     Hello
#.     Hello
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.Hello
msgid "pages.DefiningFunctions.steps.print_twice_exercise.text"
msgstr ""
"Świetnie!\n"
"\n"
"Teraz napisz własną funkcję o nazwie `print_twice`, która przyjmuje jeden argument `x` i drukuje ten argument dwukrotnie\n"
"na dwóch liniach.\n"
"\n"
"Na przykład, `print_twice(\"Hello\")` powinno wyjść:\n"
"\n"
"__code0__\n"
"\n"
"Możesz przetestować swoją funkcję, wywołując ją po definicji funkcji, ale nie jest to wymagane."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.0.text"
msgstr ""
"Jedyna zmiana w definicji funkcji powinna dotyczyć zamiany miejscami "
"parametrów, zgodnie z instrukcją, nic więcej."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.1.text"
msgstr "Musisz naprawić wywołanie `print_many`."

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.2.text"
msgstr ""
"Jeśli funkcja jest zdefiniowana jako `def print_many(n, thing)`, co oznacza "
"`print_many(\"Hello\", 3)`?"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.3.text"
msgstr "Nadal chcemy, aby `thing = \"Hello\"` i `n = 3`."

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
#.     # __code1__:
#.     def print_many(n, thing):
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_many
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Hello%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing
msgid "pages.DefiningFunctions.steps.swap_parameters.text"
msgstr ""
"Zauważ przecinki używane do oddzielania parametrów w definicji funkcji i argumentów w wywołaniu funkcji,\n"
"oraz korespondencję między definicją a wywołaniem:\n"
"\n"
"    def print_many(thing, n):\n"
"                     ^    ^\n"
"                     |    |\n"
"      print_many(\"Hello\", 3)\n"
"\n"
"Więc wywołanie `print_many(\"Hello\", 3)` jest jak uruchomienie:\n"
"\n"
"__code0__\n"
"\n"
"Teraz kolejne proste ćwiczenie. Zamień miejscami parametry w nagłówku definicji funkcji, aby było:\n"
"\n"
"__code1__\n"
"\n"
"Jeśli to zrobisz i nic więcej, otrzymasz błąd. Napraw resztę programu, aby zachowywał się jak wcześniej.\n"
"*Nie zmieniaj treści funkcji*."

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.title"
msgstr "Definiowanie funkcji"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.0.text"
msgstr ""
"Pamiętaj, że wcześniej mieliśmy `for item in cart` w funkcji, ale `cart` już"
" nie jest argumentem."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.1.text"
msgstr ""
"Teraz `quantities` jest jedynym argumentem określającym, co klient kupuje."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.2.text"
msgstr ""
"Musisz teraz iterować po kluczach `quantities`. Pamiętaj, że tutaj "
"'iterować' oznacza 'przechodzić przez' za pomocą pętli `for`."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.3.text"
msgstr "Możesz użyć `.keys()`, ale nie musisz."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantity
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text"
msgstr ""
"Teraz możesz użyć tego, aby zmodyfikować naszą funkcję na poprzedniej stronie poprzez usunięcie argumentu `cart`:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.0.text"
msgstr "Będziesz musiał iterować (pętlić) po słowniku."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.1.text"
msgstr ""
"Musisz wypisać zarówno klucz (angielskie słowo), jak i wartość (francuskie "
"słowo) każdego wpisu w słowniku."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.2.text"
msgstr "Możesz uzyskać wartość używając klucza jak zwykle."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27boite%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27pomme%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.french
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_words
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.text"
msgstr ""
"To wygląda ładnie! Całkowicie rozwiązaliśmy problem sumowania całkowitego kosztu.\n"
"\n"
"Wróćmy do naszego pierwszego przykładu: napisz funkcję,\n"
"która wypisuje każde słowo w słowniku angielsko-francuskim i jego tłumaczenie, oznaczając je ich językami.\n"
"Oto twój kod startowy:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Na przykład, ostatnia linijka powyższego kodu powinna wypisać:\n"
"\n"
"    Angielski: apple\n"
"    Francuski: pomme\n"
"    ---\n"
"    Angielski: box\n"
"    Francuski: boite\n"
"    ---"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.0.text"
msgstr ""
"To jest nadal bardzo podobne do poprzedniego ćwiczenia, nic specjalnego "
"jeszcze."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.1.text"
msgstr ""
"Możesz wykorzystać poprzednie rozwiązanie, dodając tylko kolejny argument i "
"odrobinę kodu w środku."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.2.text"
msgstr "Teraz musisz wypisać jeden klucz słownika i dwie wartości słownika."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apfel%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27boite%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27kasten%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27pomme%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.french
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.german
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_words
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.text"
msgstr ""
"Świetnie! Teraz dodajmy również słownik niemiecki:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"To powinno wypisać:\n"
"\n"
"    Angielski: apple\n"
"    Francuski: pomme\n"
"    Niemiecki: apfel\n"
"    ---\n"
"    Angielski: box\n"
"    Francuski: boite\n"
"    Niemiecki: kasten\n"
"    ---\n"
"\n"
"Oba słowniki zawsze będą mieć te same klucze, tylko różne wartości."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.final_text.text"
msgstr "Gratulacje! Dotarłeś do końca kursu na razie. Więcej treści w drodze!"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.introducing_keys.requirements"
msgstr ""
"Uruchom `print(quantities.keys())`, gdzie `quantities` jest słownikiem."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
msgid "pages.DictionaryKeysAndValues.steps.introducing_keys.text"
msgstr ""
"Skopiuj ten kod do edytora:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Następnie zmień `print(quantities)` na `print(quantities.keys())` i uruchom cały program."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable.text"
msgstr ""
"Metoda `.keys()` słownika `dict` robi w zasadzie to, czego się spodziewasz. Możesz iterować nad wartością, którą zwraca,\n"
"tak jakbyś iterował nad listą:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable2.requirements"
msgstr ""
"Uruchom ten sam kod co w poprzednim kroku, ale bez `.keys()` po "
"`quantities`, więc środkowa linia będzie `for key in quantities:`"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable2.text"
msgstr ""
"Właściwie nie potrzebujesz `.keys()`. Bezpośrednia iteracja nad słownikiem automatycznie iteruje po jego kluczach.\n"
"Czasami dobrze jest napisać `.keys()`, aby kod był czytelniejszy, ale to nie jest wymagane.\n"
"Usuń `.keys()` i uruchom kod ponownie."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.DictionaryKeysAndValues.steps.nested_dictionaries.text"
msgstr ""
"Pięknie! Pojawia się tu wzór. Dwa języki można połączyć w jeden duży zagnieżdżony słownik:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.title"
msgstr "Iterowanie po kluczach słownika"

#. https://futurecoder.io/course/#EqualsVsIs
#.     # __code0__:
#.     list2 = list1.copy()
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.list1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.list2
msgid "pages.EqualsVsIs.steps.final_text.text"
msgstr ""
"Teraz `list1 is list2` to `True`, ponieważ *jest tylko jedna lista*, i obie zmienne\n"
"`list1` i `list2` odnoszą się do tej samej listy. `list1.append(4)` dodaje do jednej listy\n"
"i wynik można zobaczyć zarówno w `print(list1)`, jak i w `print(list2)`, ponieważ obie linie\n"
"są teraz po prostu różnymi sposobami drukowania tej samej listy.\n"
"\n"
"Polecam uruchomić obie wersje z Python Tutor, aby zobaczyć, jak wizualizuje on różnicę.\n"
"W drugim przypadku obie zmienne mają strzałki wskazujące na jeden obiekt listy.\n"
"\n"
"`list2 = list1` nie tworzy wiecznego połączenia między zmiennymi. Jeśli przypiszesz nową wartość\n"
"*którejkolwiek* z zmiennych, np. `list1 = [7, 8, 9]`, druga zmienna nie będzie miała wpływu\n"
"i nadal będzie wskazywać na pierwotną listę.\n"
"\n"
"Podstawowo przypisanie takie jak:\n"
"\n"
"    list2 = <wyrażenie>\n"
"\n"
"oznacza 'spraw, by zmienna `list2` odnosiła się do tego, co ocenia `<wyrażenie>`'.\n"
"To nie robi kopii tej wartości, co pozwala na to, że obie zmienne mogą wskazywać na tę samą listę.\n"
"Ale jak już wcześniej nauczyliśmy się, `list2` nie pamięta `<wyrażenie>`, tylko wartość.\n"
"Ona nie wie o innych zmiennych.\n"
"\n"
"Możesz skopiować listę za pomocą metody `copy`:\n"
"\n"
"__code0__\n"
"\n"
"To spowoduje, że program będzie się zachowywał jak pierwsza wersja znowu.\n"
"\n"
"Jeśli napotkasz taki rodzaj problemu i nadal będziesz mieć trudności z zrozumieniem tych spraw, przeczytaj esej [Fakty i mity na temat nazw i wartości w Pythonie](https://nedbatchelder.com/text/names.html)."

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.steps.same_list.requirements"
msgstr ""
"Uruchom ten sam program co powyżej, ale zastąp *drugie* `[1, 2, 3]` przez "
"`list1`."

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.steps.same_list.text"
msgstr ""
"Ten program jest dość prosty i w większości składa się z rzeczy, które już znasz.\n"
"Tworzymy dwie zmienne, które odnoszą się do list.\n"
"Listy mają te same elementy, więc są one równe: `list1 == list2` to `True`.\n"
"\n"
"Ale jest tu nowy operator porównania: `is`. Tutaj `list1 is list2` to `False`.\n"
"Oznacza to, że mimo że dwie listy są równe,\n"
"są to nadal dwie oddzielne, odrębne, indywidualne listy.\n"
"W rezultacie, gdy dodajesz 4 do `list1`, zmienia się tylko `list1`.\n"
"\n"
"Teraz zmień `list2 = [1, 2, 3]` na `list2 = list1` i zobacz, jakie to robi różnice."

#. https://futurecoder.io/course/#EqualsVsIs
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.EqualsVsIs.steps.two_separate_lists.text"
msgstr ""
"Nadszedł czas, aby nauczyć się niektórych szczegółów technicznych, które są często źle rozumiane i prowadzą do błędów.\n"
"Uruchom ten program:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.title"
msgstr "`==` kontra `is` i posiadanie wielu nazw dla jednej wartości"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate.text"
msgstr ""
"Przyjrzyjmy się, jak pracować z listami. Załóżmy, że mamy listę `nums = [1, 2, 3]`. Możemy użyć:\n"
"\n"
"- **`append`**: Dodaje element na końcu listy. `nums.append(4)` zmienia listę na `[1, 2, 3, 4]`.\n"
"- **`len`**: Zwraca liczbę elementów. `len(nums)` wynosi `3`.\n"
"- **`range`**: `range(n)` to obiekt podobny do listy liczb od `0` do `n - 1`. Oznacza to, że zawiera `n` liczb. W szczególności, `range(len(nums))` jest jak `[0, 1, 2]`, które są indeksami każdego elementu w `nums`.\n"
"- **`[]` (indeksowanie/subskrypcja)**: Pobiera wartość o danym indeksie. `nums[0]` to `1`, `nums[1]` to `2`, `nums[2]` to `3`.\n"
"- **`+`**: Concatenacja list. `nums + [4, 5]` to `[1, 2, 3, 4, 5]`.\n"
"\n"
"Zauważ, że `nums.append(4)` modyfikuje istniejącą listę `nums`, podczas gdy `nums + [4, 5]` tego nie robi.\n"
"Aby zachować wartość `nums + [4, 5]`, można ją przypisać do *nowej zmiennej*.\n"
"Uruchom następujący kod:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.steps.final_text.text"
msgstr "Świetna robota!"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list.index(value)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text"
msgstr ""
"**`index`**: Zwraca pierwszy indeks wartości na liście za pomocą składni\n"
"\n"
"__code0__\n"
"\n"
"Powoduje błąd, jeśli wartość nie znajduje się tam. Na przykład uruchom tę linię w konsoli:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.0.text"
msgstr ""
"Twoje rozwiązanie powinno mieć dokładnie trzy instrukcje: `x = ['a', 'b', "
"'c']`, `y = ` po której następuje jedna linia dokładnie skopiowana z listy, "
"oraz `print(y)`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.1.text"
msgstr "Które linie kodu tworzą nową listę zamiast modyfikować?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.2.text"
msgstr "`x` to lista. Każdy element `x` to łańcuch znaków."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.3.text"
msgstr ""
"Możesz dodawać listy do siebie, możesz dodawać łańcuchy znaków do siebie, "
"ale nie możesz dodawać łańcucha znaków do listy."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.4.text"
msgstr "Jak zrobić listę zawierającą jeden element?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.requirements"
msgstr ""
"Skopiuj trzy powyższe linie, a następnie zastąp "
"`(wstaw_jedną_linię_z_powyżej)` dokładnie jedną linią z długiej listy linii "
"wcześniejszych. Musisz wybrać poprawną linię, jest tylko jedna właściwa "
"odpowiedź. Wpisz linię dokładnie. Nie zastępuj części `y = `, powinna być "
"tam przed linią, którą wpiszesz, w tej samej linii."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x = ['a', 'b', 'c']
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.text"
msgstr ""
"Świetnie!\n"
"\n"
"Możesz zdać sobie sprawę, że praca z ostatnim elementem za pomocą `x[len(x) - 1]` jest nieco kłopotliwa.\n"
"To samo można osiągnąć przez `x[-1]`.\n"
"Podobnie, przedostatni element `x[len(x) - 2]` można zapisać jako `x[-2]`, i tak dalej.\n"
"Python pozwala nam także liczyć indeks do tyłu, zaczynając od ostatniego elementu z `-1`:\n"
"\n"
"| Indeks     | Pierwszy elt. | Drugi elt.   | Trzeci elt.  | ... | Przedostatni elt. | Ostatni elt.  |\n"
"|-----------|---------------|--------------|--------------|-----|-------------------|---------------|\n"
"| Do przodu  | `0`           | `1`          | `2`          | ... | `len(x) - 2`      |`len(x) - 1`   |\n"
"| Do tyłu    | `-len(x)`     |`-len(x) + 1` |`-len(x) + 2` | ... | `-2`              |  `-1`         |\n"
"\n"
"Następne ćwiczenie:\n"
"\n"
"Tym razem, zamiast modyfikować listę `x`, utworzysz nową listę `y`:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"`y` powinno być takie samo jak `x`, ale powinno mieć też pierwszy element powtórzony na końcu.\n"
"Dlatego program wydrukuje `['a', 'b', 'c', 'a']`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list.pop(index)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.index
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text"
msgstr ""
"**`pop`**: Usuwa i zwraca element o danym *indeksie* używając składni\n"
"\n"
"__code0__\n"
"\n"
"Bez argumentu, tzn. po prostu `some_list.pop()`, usunie i zwróci ostatni element.\n"
"Powoduje błąd, jeśli `index` nie jest prawidłowym indeksem `some_list`. Na przykład uruchom ten program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.0.text"
msgstr ""
"Twoje rozwiązanie powinno mieć dokładnie trzy instrukcje: `x = ['a', 'b', "
"'c']`, jedna linia dokładnie skopiowana z listy (bez dodatków), oraz "
"`print(x)`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.1.text"
msgstr "Przesunięcie pierwszego elementu na koniec wymaga dwóch rzeczy."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.2.text"
msgstr "Usunięcie pierwszego elementu..."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.3.text"
msgstr "i dodanie go na koniec."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.4.text"
msgstr "Które funkcje/metody możesz użyć do tego?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.5.text"
msgstr "Pamiętaj, że pierwszy indeks to 0."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.requirements"
msgstr ""
"Skopiuj trzy powyższe linie, a następnie zastąp "
"`(wstaw_jedną_linię_z_powyżej)` dokładnie jedną linią z długiej listy tuż "
"przed tym. Musisz wybrać poprawną linię, jest tylko jedna właściwa "
"odpowiedź. Wpisz linię dokładnie."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x[len(x)] = x[0]
#.     x[len(x) - 1] = x[0]
#.     x[len(x) + 1] = x[0]
#.     x + x[0]
#.     [x] + x[0]
#.     x + [x[0]]
#.     [x] + [x[0]]
#.     x + x.pop(0)
#.     [x] + x.pop(0)
#.     x + [x.pop(0)]
#.     [x] + [x.pop(0)]
#.     x.pop(x.append(0))
#.     x.append(x.pop(0))
#.     x.append(x[0])
#.     x.append(x.index(0))
#.     x.index(x.append(0))
#.     x.pop(x.index(0))
#.     x.index(x.pop(0))
#.     # __code1__:
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.text"
msgstr ""
"Teraz rozwiążesz cztery krótkie ćwiczenia związane z tymi pojęciami.\n"
"Poniżej znajduje się lista poprawnych i niepoprawnych linii kodu wymieszanych ze sobą.\n"
"Każde nadchodzące ćwiczenie ma rozwiązanie, które zawiera dokładnie jedną z poniższych linii,\n"
"a ty musisz znaleźć poprawną linię z listy.\n"
"\n"
"__code0__\n"
"\n"
"Oto niekompletny program:\n"
"\n"
"    __copyable__\n"
"__code1__\n"
"\n"
"Zastąp środkową linię jedną linią z powyższej listy. Ostateczny program powinien zmodyfikować `x` tak, aby przenieść pierwszy element na koniec, tak aby drukował `['b', 'c', 'a']`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.0.text"
msgstr ""
"Twoje rozwiązanie powinno mieć dokładnie trzy instrukcje: `x = [1, 2, 0, "
"3]`, jedna linia dokładnie skopiowana z listy (bez dodatków), oraz "
"`print(x)`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.1.text"
msgstr "Co robi `x.remove(0)`?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.2.text"
msgstr "Usuwa element!"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.3.text"
msgstr "Która funkcja/metoda może także usunąć element?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.4.text"
msgstr ""
"Inna funkcja/metoda nie może po prostu dostać informacji 'usuń 0', "
"potrzebuje innego rodzaju informacji."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.5.text"
msgstr "Dokładniej, musi wiedzieć, gdzie jest 0."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.6.text"
msgstr "Która funkcja/metoda dostarcza tego rodzaju informacji?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.requirements"
msgstr ""
"Skopiuj trzy powyższe linie, a następnie zastąp `x.remove(0)` dokładnie "
"jedną linią z długiej listy linii wcześniejszych. Linia, którą wybierzesz, "
"powinna mieć ten sam efekt co `x.remove(0)`, tak żeby program wydrukował "
"`[1, 2, 3]`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x = [1, 2, 0, 3]
#.     x.remove(0)
#.     print(x)
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.text"
msgstr ""
"Świetna robota. Teraz ostatnie ćwiczenie:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Zastąp środkową linię `x.remove(0)` jedną linią z listy, która robi to samo."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list.remove(value)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text"
msgstr ""
"**`remove`**: Usuwa pierwsze wystąpienie podanej *wartości* za pomocą składni\n"
"\n"
"__code0__\n"
"\n"
"Powoduje błąd, jeśli wartość nie znajduje się na liście. Na przykład uruchom ten program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.0.text"
msgstr ""
"Twoje rozwiązanie powinno mieć dokładnie trzy instrukcje: `x = ['a', 'b', "
"'c']`, jedna linia dokładnie skopiowana z listy (bez dodatków), oraz "
"`print(x)`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.1.text"
msgstr "Musisz pobrać wartość pierwszego elementu w `x`..."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.2.text"
msgstr "i przypisać tę wartość do ostatniej pozycji w `x`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.3.text"
msgstr "Jak przypisujesz wartość na konkretnym indeksie na liście?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.4.text"
msgstr "Jakie są indeksy pierwszego i ostatniego elementu w `x`?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.requirements"
msgstr ""
"Skopiuj trzy powyższe linie, a następnie zastąp "
"`(wstaw_jedną_linię_z_powyżej)` dokładnie jedną linią z poprzedniej długiej "
"listy. Musisz wybrać poprawną linię, jest tylko jedna właściwa odpowiedź. "
"Wpisz linię dokładnie."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.text"
msgstr ""
"Dobra robota. W kolejnym ćwiczeniu, zacznij od tego samego niekompletnego programu:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Wybierz linię kodu z listy, która nadpisuje ostatni element `x` pierwszym elementem,\n"
"tak aby drukowało `['a', 'b', 'a']`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list[index] = new_value
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_value
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.index
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text"
msgstr ""
"Jak widać, `+` nie modyfikuje `nums`, ale `append` tak.\n"
"\n"
"Oto kilka nowych rzeczy.\n"
"\n"
"**`przypisanie subskrypcji`**: Ustawia wartość o danym indeksie (zastępując wartość, która była tam wcześniej) za pomocą składni\n"
"\n"
"__code0__\n"
"\n"
"Powoduje błąd, jeśli `index` nie jest prawidłowym indeksem `some_list`. Na przykład uruchom ten program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.title"
msgstr "Funkcje i metody dla list"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.final_text.text"
msgstr ""
"Jeśli nadal nie czujesz się komfortowo z funkcją `range` i/lub `len`, poćwicz i eksperymentuj z nimi przez chwilę.\n"
"Oto kilka prostych ćwiczeń, które możesz spróbować wykonać samodzielnie, jeśli chcesz.\n"
"\n"
"- Wypisz liczby od `1` do `100` włącznie.\n"
"- Wypisz swoje imię 100 razy.\n"
"- Wypisz każde słowo z listy `words` oprócz ostatniego.\n"
"- Wypisz każde słowo z `words` w odwrotnej kolejności, czyli wypisz ostatnie słowo, potem przedostatnie słowo itp.\n"
"- Powróć do bonusowego problemu na końcu strony [Wprowadzenie do List](#IntroducingLists),\n"
"niezależnie od tego, czy go rozwiązałeś. Jest teraz znacznie łatwiejsze z `range` i `len`!\n"
"\n"
"Gdy będziesz gotowy, kontynuuj na następną stronę, gdzie czeka na ciebie coś trochę bardziej wymagającego."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.index_error
msgid "pages.GettingElementsAtPosition.steps.index_error.program"
msgstr "words[4]"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.index_error.requirements"
msgstr "Uruchom coś takiego jak `words[3]`, ale zastąp `3` większą liczbą."

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.index_error.text"
msgstr ""
"Ogólnie rzecz biorąc, możesz pobrać element na miejscu `i` używając `words[i]`. Operacja ta nazywa się *indeksowanie*, a miejsce to *indeks*.\n"
"\n"
"Prawdopodobnie zauważyłeś, że pierwszy indeks to 0, a nie 1. W programowaniu liczenie zaczyna się od 0. To wydaje się dziwne, ale tak właśnie działa większość języków programowania i ogólnie uznaje się to za lepsze.\n"
"\n"
"To również oznacza, że ostatni indeks w tej liście 4 elementów to 3. Co się stanie, jeśli spróbujesz uzyskać indeks większy niż ten?"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.indices_out_of_bounds.text"
msgstr "Teraz spróbuj `__program__` w konsoli."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.0"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.2"
msgstr ""
"0\n"
"This\n"
"1\n"
"is\n"
"2\n"
"a\n"
"3\n"
"list"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.3"
msgstr ""
"This\n"
"0\n"
"is\n"
"1\n"
"a\n"
"2\n"
"list\n"
"3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.4"
msgstr ""
"0\n"
"1\n"
"2\n"
"3\n"
"This\n"
"is\n"
"a\n"
"list"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.5"
msgstr ""
"This\n"
"is\n"
"a\n"
"list\n"
"0\n"
"1\n"
"2\n"
"3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = [0, 1, 2, 3]\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#.     # __code0__:
#.     [0, 1, 2, ..., len(words) - 2, len(words) - 1]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.words
msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.text"
msgstr ""
"I oto jest. `words[4]` oraz reszta nie istnieje, więc próba ich uzyskania skończy się błędem.\n"
"Ten pierwszy program jest trochę powtarzalny. Ulepszmy go za pomocą listy i pętli!\n"
"\n"
"__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_subscripting
msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"\n"
"print(words[0])\n"
"print(words[1])\n"
"print(words[2])\n"
"print(words[3])"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.text"
msgstr ""
"Pętla jest świetna, ale często chcesz po prostu pobrać pojedynczy element z listy na znanym miejscu.\n"
"Oto jak:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.0.text"
msgstr "Pamiętaj, że wcześniej użyliśmy `range(4)`."

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.1.text"
msgstr ""
"Tym razem powinno to działać dla dowolnej listy. Co jeśli lista ma 5 "
"elementów albo 10?"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.2.text"
msgstr "Połącz dwie funkcje, których się nauczyłeś!"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#.     # __code0__:
#.     [0, 1, 2, ..., len(words) - 2, len(words) - 1]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.words
msgid "pages.GettingElementsAtPosition.steps.print_indices_and_words.text"
msgstr ""
"Zatem ogólnie rzecz biorąc, prawidłowe indeksy to:\n"
"\n"
"__code0__\n"
"\n"
"Teraz możemy naprawić program z wcześniej tak, aby działał z dowolną listą. Uzupełnij `...`:\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"    for index in ...:\n"
"        print(index)\n"
"        print(words[index])\n"
"\n"
"Dla podanej wartości przykładowej 'words' powinno to wydrukować:\n"
"\n"
"    0\n"
"    This\n"
"    1\n"
"    is\n"
"    2\n"
"    a\n"
"    3\n"
"    list"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.0.text"
msgstr ""
"Aby uzyskać dostęp do ostatniego elementu listy, potrzebujesz indeksu "
"ostatniej pozycji."

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.1.text"
msgstr ""
"Jeśli lista ma 2 elementy, pierwszy element znajduje się na indeksie 0, więc"
" ostatni element jest na indeksie 1."

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.2.text"
msgstr ""
"Podobnie, gdyby lista miała 3 elementy, ostatni element byłby na indeksie 2."

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.3.text"
msgstr "Czy widzisz wzór pomiędzy tymi numerami? Jak możesz to wyrazić?"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.4.text"
msgstr ""
"Czy potrafisz wymyślić ogólne rozwiązanie, które działa na każdym rozmiarze?"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.print_last_element.text"
msgstr ""
"Ćwiczenie: dla dowolnej niepustej listy `words`, wydrukuj ostatni element. Na przykład, jeśli\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"twój program powinien wydrukować `list`."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.printing_the_range
msgid ""
"pages.GettingElementsAtPosition.steps.printing_the_range.output_prediction_choices.4"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.GettingElementsAtPosition.steps.printing_the_range.text"
msgstr ""
"Jak widzisz, wynik jest taki sam. Spróbuj tego:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid ""
"pages.GettingElementsAtPosition.steps.range_almost_the_same_as_list.text"
msgstr ""
"`range(4)` to to samo, co `[0, 1, 2, 3]` ... prawie. Spróbuj `__program__` w"
" konsoli."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_len
msgid "pages.GettingElementsAtPosition.steps.range_len.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = range(4)\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_len.requirements"
msgstr ""
"Uruchom ten sam program z poprzedniego kroku, ale zamień drugą linię "
"`indices = [0, 1, 2, 3]` na `indices = range(4)`."

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_len.text"
msgstr ""
"To już jest lepsze, ale wypisywanie `[0, 1, 2, ...]` to nie jest najlepsze rozwiązanie, szczególnie, gdy lista jest długa.\n"
"Istnieje przydatna funkcja `range`, która zrobi to za ciebie. Zamień `[0, 1, 2, 3]` na `range(4)`,\n"
"czyli `indices = range(4)`."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.0"
msgstr "range(4)"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.1"
msgstr "range(0, 4)"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.2"
msgstr "list(range(4))"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.3"
msgstr "list(range(0, 4))"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.4"
msgstr "range(0, 1, 2, 3)"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_versus_list.text"
msgstr ""
"To jest prawdopodobnie trochę zaskakujące. Jeśli jesteś ciekawy, `0` reprezentuje początek zakresu.\n"
"`0` to domyślny początek, więc `range(4)` jest równy `range(0, 4)`.\n"
"`4` to koniec zakresu, ale koniec jest zawsze wykluczony, więc ostatnia wartość to `3`.\n"
"Jeśli teraz jesteś zdezorientowany, nie martw się o to.\n"
"\n"
"Istnieje dobry powód, dla którego `range(4)` nie jest właściwie listą - sprawia, że programy działają szybciej i są bardziej wydajne.\n"
"W tej chwili nie warto tego bardziej wyjaśniać.\n"
"\n"
"Ale łatwo możesz to przekonwertować na listę: spróbuj `__program__` w konsoli."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.using_len_first_time
msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"print(len(words))"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#.     # __code0__:
#.     [0, 1, 2, ..., n - 2, n - 1]
#.     # __code1__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.text"
msgstr ""
"To tylko demonstracja, żebyś mógł zobaczyć zakres w bardziej znajomej formie.\n"
"Nigdy właściwie nie powinieneś tego robić.\n"
"\n"
"Jeśli czujesz się przytłoczony, nie martw się! Wszystko, co musisz wiedzieć, to że `range(n)`\n"
"jest bardzo podobne do listy:\n"
"\n"
"__code0__\n"
"\n"
"Tak przy okazji, możesz uzyskać liczbę elementów listy (często nazywaną *długością*) używając funkcji `len`.\n"
"Spróbuj to, uruchamiając ten kod:\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.title"
msgstr "Pobieranie elementów z pozycji, `range()`, i `len()`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.final_text.text"
msgstr "Fantastycznie! Zrób sobie przerwę, na to zasłużyłeś!"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.0.text"
msgstr ""
"Będziesz musiał spojrzeć na wszystkie możliwe indeksy `things` i sprawdzić, "
"który z nich jest odpowiedzią."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.1.text"
msgstr ""
"Aby przejrzeć wszystkie możliwe indeksy, będziesz potrzebował pętli po "
"`range(len(things))`."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.2.text"
msgstr "Aby sprawdzić, czy indeks jest odpowiedzią, będziesz musiał użyć:"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.3.text"
msgstr "- `if`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.4.text"
msgstr "- indeksu w subskrypcie"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.5.text"
msgstr "- `==`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.6.text"
msgstr ""
"Ponieważ szukasz pierwszego indeksu, musisz zatrzymać pętlę, gdy go "
"znajdziesz."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.7.text"
msgstr "Niedawno nauczyłeś się, jak zatrzymać pętlę w połowie."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.8.text"
msgstr "Potrzebujesz użyć `break`."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.messages.all_indices.text"
msgstr ""
"Jesteś prawie na miejscu! Jednak to drukuje wszystkie indeksy,\n"
" nie tylko pierwszy."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.messages.last_index.text"
msgstr ""
"Jesteś prawie na miejscu! Jednak to drukuje *ostatni* indeks,\n"
" nie pierwszy."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.text"
msgstr ""
"Zakładając, że masz listę `things` oraz wartość `to_find`,\n"
"wydrukuj pierwszy indeks `to_find` na liście, tzn. najmniejszą liczbę `i` taką, że\n"
"`things[i]` jest `to_find`. Na przykład, dla\n"
"\n"
"    __no_auto_translate__\n"
"    things = ['on', 'the', 'way', 'to', 'the', 'store']\n"
"    to_find = 'the'\n"
"\n"
"twój program powinien wydrukować `1`.\n"
"\n"
"Możesz założyć, że `to_find` pojawia się przynajmniej raz."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.0.text"
msgstr ""
"Czy eksperymentowałeś z indeksowaniem i `len()` ze stringami w powłoce "
"(shell)?"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.1.text"
msgstr ""
"Na moment zapomnij o pętlach. Jak byś wydrukował tylko pierwszą linię, która"
" zawiera pierwszy znak każdego z dwóch stringów?"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.2.text"
msgstr ""
"W drugiej linii chcesz wydrukować drugi znak każdego stringa, i tak dalej."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.3.text"
msgstr "Będziesz potrzebować pętli `for`."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.4.text"
msgstr "Będziesz potrzebować indeksowania (subskrypcji)."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.5.text"
msgstr "Będziesz potrzebować `range`."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.6.text"
msgstr "Będziesz potrzebować `len`."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.7.text"
msgstr "Będziesz potrzebować `+`."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.8.text"
msgstr "Będziesz musiał zindeksować oba stringi."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.9.text"
msgstr ""
"Będziesz musiał przekazać ten sam indeks do obu stringów za każdym razem, "
"aby pobierać odpowiadające sobie znaki."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.text"
msgstr ""
"Świetnie!\n"
"\n"
"Tak na marginesie, indeksowanie i `len()` również działają na stringach. Wypróbuj je w powłoce.\n"
"\n"
"Oto kolejne ćwiczenie. Mając dwa stringi o równych długościach, np:\n"
"\n"
"    __no_auto_translate__\n"
"    string1 = 'Hello'\n"
"    string2 = 'World'\n"
"\n"
"wydrukuj je pionowo, obok siebie, z odstępem między każdą parą znaków:\n"
"\n"
"    H W\n"
"    e o\n"
"    l r\n"
"    l l\n"
"    o d"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.0.text"
msgstr ""
"Rozwiązanie ma tę samą ogólną strukturę i kluczowe elementy co poprzednie "
"rozwiązanie, jednak jest znacznie dłuższe i będzie wymagać kilku dodatkowych"
" pomysłów i części."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#.     # __code0__:
#.     for i in range(...):
#.         ...
#.         print(char1 + ' ' + char2)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char2
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.1.text"
msgstr ""
"W szczególności powinno nadal zawierać coś w stylu:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.2.text"
msgstr ""
"Co powinno się znaleźć w `range()`? Ani `len(string1)`, ani `len(string2)` "
"nie są wystarczająco dobre."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.3.text"
msgstr "Chcesz iteracji pętli dla każdego znaku w dłuższym stringu."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.4.text"
msgstr "To oznacza, że potrzebujesz `range(<długość najdłuższego stringu>)`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.5.text"
msgstr ""
"Innymi słowy, potrzebujesz znaleźć większą z dwóch wartości `len(string1)` i"
" `len(string2)`. Już wykonałeś podobne ćwiczenie."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.6.text"
msgstr ""
"Kiedy już rozwiążesz kwestię pętli `for i in range(...)`, `i` czasami będzie"
" za duże, żeby było ważnym indeksem dla obu stringów. Będziesz musiał "
"sprawdzić, czy nie jest za duże przed indeksowaniem."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.7.text"
msgstr ""
"Pamiętaj, że największy ważny indeks dla `string1` to `len(string1) - 1`. "
"`len(string1)` jest za duże."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.8.text"
msgstr ""
"Będziesz potrzebować dwóch instrukcji `if`, jednej dla każdego stringu."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.9.text"
msgstr ""
"Będziesz musiał ustawić np. `char1 = ' '` gdy `string1[i]` nie jest ważny."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#.     # __code0__:
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string2
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text"
msgstr ""
"Niesamowite!\n"
"\n"
"Twoje rozwiązanie prawdopodobnie wyglądało mniej więcej tak:\n"
"\n"
"__code0__\n"
"\n"
"To nie działa zbyt dobrze, jeśli stringi mają różne długości.\n"
"W rzeczywistości, błędy pojawiają się na różne sposoby w zależności od tego, czy `string1` czy `string2` jest dłuższy.\n"
"Twoje kolejne wyzwanie polega na rozwiązaniu tego problemu poprzez wypełnienie 'brakujących' znaków spacjami.\n"
"\n"
"Na przykład, dla:\n"
"\n"
"    __no_auto_translate__\n"
"    string1 = 'Goodbye'\n"
"    string2 = 'World'\n"
"\n"
"wypisz:\n"
"\n"
"    G W\n"
"    o o\n"
"    o r\n"
"    d l\n"
"    b d\n"
"    y\n"
"    e\n"
"\n"
"i dla:\n"
"\n"
"    __no_auto_translate__\n"
"    string1 = 'Hello'\n"
"    string2 = 'Elizabeth'\n"
"\n"
"wypisz:\n"
"\n"
"    H E\n"
"    e l\n"
"    l i\n"
"    l z\n"
"    o a\n"
"      b\n"
"      e\n"
"      t\n"
"      h"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.title"
msgstr "Ćwiczenia z `range()` i `len()`"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.dir_list.text"
msgstr ""
"Świetnie!\n"
"\n"
"Może być również przydatne wyszukiwanie takich rzeczy jak \"python list tutorial\", na przykład gdy:\n"
"\n"
"- Wyszukiwanie konkretnej metody się nie powiodło i chcesz ją znaleźć ręcznie.\n"
"- Nadal masz wątpliwości dotyczące list po tym kursie.\n"
"- Minęło trochę czasu odkąd uczyłeś się o listach i potrzebujesz przypomnienia.\n"
"- Zmagasz się z rozwiązaniem problemu z listami i musisz wrócić do podstaw i wzmocnić swoje podstawy.\n"
"\n"
"Są również sposoby na znalezienie informacji bez googlowania. Spróbuj `__program__` w konsoli."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.final_text.text"
msgstr ""
"`dir()` zwraca listę atrybutów argumentu, które są przeważnie metodami. "
"Wiele z nich zaczyna się od `__` , które na razie możesz zignorować - "
"przewiń do końca listy, a zobaczysz kilka znajomych metod."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.0.text"
msgstr "Użyj słów 'python' i 'lista' w zapytaniu wyszukiwania."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.1.text"
msgstr ""
"Zamiast umieszczać wartość na początku lub na końcu, chcemy ją umieścić "
"________?"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.2.text"
msgstr "'w środku' lub 'na indeksie' lub 'w określonej pozycji'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.3.text"
msgstr "'python dodaj wartość na indeksie'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.requirements"
msgstr ""
"Uruchom kod podobny do trzech powyższych linii, ale zmień `nums.append(9)` na odpowiednie wywołanie funkcji/metody,\n"
"aby umieścić 9 zaraz po drugim elemencie (2 w przykładzie `nums = [1, 2, 3, 4, 5]`) zamiast na końcu.\n"
"Istnieje tylko jedna poprawna odpowiedź na to, co powinna być środkowa linia.\n"
"Musisz przeszukać internet, aby dowiedzieć się, jakiej funkcji/metody użyć i jak jej używać."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#.     # __code0__:
#.     nums = [1, 2, 3, 4, 5]
#.     nums.append(9)
#.     print(nums)
#.     # __code1__:
#.     [1, 2, 3, 4, 5, 9]
#.     # __code2__:
#.     [1, 2, 9, 3, 4, 5]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.nums
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.text"
msgstr ""
"Dobrze ci poszło! Zróbmy jeszcze jedno zadanie. Rozważ ten program:\n"
"\n"
"__code0__\n"
"\n"
"To zmieni `nums`, tak że wydrukuje:\n"
"\n"
"__code1__\n"
"\n"
"Ale załóżmy, że nie chcesz, aby 9 było na końcu, chcesz by znalazła się między drugim a trzecim elementem, aby wynik był:\n"
"\n"
"__code2__\n"
"\n"
"Zastąp środkową linię `nums.append(9)` odpowiednim wywołaniem funkcji/metody, aby to osiągnąć."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.0.text"
msgstr "Użyj słów 'python' i 'lista' w zapytaniu wyszukiwania."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.1.text"
msgstr ""
"Jednym słowem, co jest szczególnego w `91` na liście `[21, 55, 4, 91, 62, "
"49]`?"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.2.text"
msgstr "'największy' lub 'największa'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.3.text"
msgstr "'python największa wartość na liście'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.requirements"
msgstr ""
"Uruchom kod podobny do `sum([21, 55, 4, 91, 62, 49])`, ale zastąp `sum` nazwą innej konkretnej funkcji.\n"
"Istnieje tylko jedna poprawna odpowiedź na to, jaka funkcja powinna zostać użyta. Musisz przeszukać internet,\n"
"aby dowiedzieć się, której użyć. Jest to powszechnie używana wbudowana funkcja w Pythonie."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.text"
msgstr ""
"Przydatne jest znać funkcje, które właśnie omówiliśmy, ale nie jest łatwo je wszystkie zapamiętać, a jest ich jeszcze więcej. Ważniejszą umiejętnością jest potrafić wyszukać informacje. Na przykład, oto kilka typowych sposobów jak byś mógł wyszukać wyżej wymienione funkcje w Google, jeśli zapomniałeś ich nazw:\n"
"\n"
"- `append`\n"
"    - python dodaj element do listy\n"
"    - python dodaj element na końcu listy\n"
"- `len`\n"
"    - python rozmiar listy\n"
"    - python liczba elementów na liście\n"
"    - python ile znaków w ciągu\n"
"- `sum`\n"
"    - python dodaj listę liczb\n"
"    - python suma liczb\n"
"- `in`\n"
"    - python sprawdź czy lista zawiera wartość\n"
"    - python sprawdź czy lista ma element\n"
"- `index`\n"
"    - python znajdź pozycję elementu\n"
"    - python uzyskaj indeks wartości\n"
"\n"
"Ćwiczymy teraz tę umiejętność. Znajdź funkcję/metodę, która zwraca wartość na liście, która jest większa niż jakakolwiek inna wartość. Na przykład, podana lista `[21, 55, 4, 91, 62, 49]`, powinna zwrócić `91`. Powinieneś napisać odpowiedź w konsoli jako pojedyncze, małe wyrażenie. Na przykład, jeśli szukałbyś funkcji `sum`, moglibyśmy napisać `sum([21, 55, 4, 91, 62, 49])`. Nie rozwiązuj tego ręcznie za pomocą pętli. Zauważ, że funkcja, której szukasz, nie była wcześniej tutaj wspomniana."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.title"
msgstr "Jak szukać informacji z pomocą Google, i nie tylko"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.0.text"
msgstr ""
"Nauczyłeś się wszystkich narzędzi, których potrzebujesz. Wierzę w Ciebie! "
"Szukaj inspiracji w poprzednich programach."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.1.text"
msgstr "Będziesz potrzebować pętli, aby zbudować nowe zdanie znak po znaku."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.2.text"
msgstr ""
"Będziesz potrzebował `if/else`, aby zdecydować, czy dodać wielką literę, czy"
" małą."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.3.text"
msgstr ""
"Twoje `if/else` musi wykonać różne bloki kodu w zależności od iteracji "
"pętli, w której się znajduje."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.4.text"
msgstr ""
"To oznacza, że warunek Twojego `if` musi być zmienną, która zmienia się "
"wewnątrz pętli."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.5.text"
msgstr ""
"W pierwszej iteracji potrzebujesz wielkiej litery. W kolejnych iteracjach "
"potrzebujesz małej litery."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.capitalise.text"
msgstr ""
"Czas na wyzwanie!\n"
"\n"
"Napisz program, który, mając dany ciąg `sentence`, wydrukuje zmodyfikowaną wersję z\n"
"tymi samymi literami, gdzie pierwsza litera jest wielka, a reszta małe.\n"
"Na przykład, wynik powinien być `Hello world`, niezależnie czy wejście `sentence = 'hello world'`\n"
"czy `'HELLO WORLD'`."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.0.text"
msgstr ""
"Nie zmieniaj niczego, co jest już tam, dodaj tylko trochę więcej kodu."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.1.text"
msgstr ""
"`else` musi znajdować się bezpośrednio po ciele `if`, z niczym pomiędzy."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.2.text"
msgstr ""
"`sentence += char` musi zostać wykonane zarówno, gdy `excited` jest `True`, "
"jak i `False`."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.3.text"
msgstr ""
"Mógłbyś mieć kopię `sentence += char` zarówno w bloku `if`, jak i `else`, "
"ale jest lepszy sposób."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.4.text"
msgstr "Użyj `else`, aby przypisać inną wartość dla `char`."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.5.text"
msgstr ""
"Jeśli `excited` jest `False`, wtedy `char` powinien być `'.'` zamiast `'!'`."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.else_full_stop.text"
msgstr ""
"Jeśli `excited` jest prawdziwe, to `char` zostało zdefiniowane i wszystko działa poprawnie. W przeciwnym razie\n"
"`char` nigdy nie zostaje przypisane wartość, więc próba użycia go w `sentence += char` kończy się niepowodzeniem.\n"
"\n"
"Napraw to, dodając klauzulę `else` do `if`, tak aby jeśłi `excited` jest nieprawdziwe, kropka (`.`)\n"
"została dodana na końcu zdania zamiast wykrzyknika (`!`)."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.final_text.text"
msgstr ""
"Doskonale! Zatrzymaj się na chwilę i ciesz się z tego, co osiągnąłeś. Czy "
"czujesz, że Twój mózg rośnie?"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else.text"
msgstr ""
"Instrukcja `if` może opcjonalnie mieć część `else`. Uruchom ten przykład:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else_false.requirements"
msgstr ""
"Uruchom ten sam program z poprzedniego kroku, ale zastąp `True` na `False`, "
"więc `condition = False`."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else_false.text"
msgstr ""
"Teraz zmień pierwszą linię na `condition = False` i uruchom to ponownie."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower.text"
msgstr ""
"Pomyśl o `else` jako o sformułowaniu 'w przeciwnym razie'. Oznacza to, że jeśli warunek w `if` jest fałszywy, to zamiast tego zostanie wykonany kod w `else`. Bez względu na to, czy warunek jest prawdziwy czy fałszywy, dokładnie jeden z dwóch bloków zostanie wykonany.\n"
"\n"
"Oto bardziej interesujący przykład do uruchomienia:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower_false.requirements"
msgstr ""
"Uruchom ten sam program z poprzedniego kroku, ale zastąp `True` na `False`, "
"więc `excited = False`."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower_false.text"
msgstr ""
"`sentence.upper()` to nowy rodzaj wyrażenia, z którym się jeszcze nie spotkaliśmy. Chodzi o to, że `sentence` to ciąg znaków i ciągi znaków mają różne *metody*, które pozwalają wygodnie obliczać nowe wartości z nich, w tym `upper` i `lower`. Nazwy odnoszą się do wielkich liter (uppercase) i małych liter (lowercase). `'Hello World'.upper()` zwraca `'HELLO WORLD'`. Nie zmienia to jednak zawartości `sentence`, więc musisz przypisać nową wartość ponownie za pomocą `sentence = sentence.upper()`.\n"
"\n"
"Teraz zmień `excited` na `False` i uruchom to ponownie."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.0.text"
msgstr ""
"To podobne do poprzedniego ćwiczenia. Różnica polega na tym, kiedy i gdzie "
"ustawiasz zmienną warunkową."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.1.text"
msgstr ""
"Będziesz potrzebować zmiennej typu boolean, która zmienia się z każdą "
"iteracją."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.2.text"
msgstr ""
"Najpierw napisz mały program, który bierze zmienną typu boolean i odwraca "
"ją, np. jeśli zmienna jest `True`, staje się `False` i odwrotnie, jeśli "
"zaczyna sie od `False`, zmienia się na `True`. Bez pętli, tylko z `if/else`."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.3.text"
msgstr ""
"Będziesz musiał użyć tej zmiennej w warunku `if` oraz przypisać do tej samej"
" zmiennej w ciele."

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.4.text"
msgstr ""
"Połącz to odwracające `if/else` z tym, które wybiera wielką lub małą literę."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.spongebob.text"
msgstr ""
"Wspaniale!!!\n"
"\n"
"Jeszcze jedno ćwiczenie, a potem możesz się zrelaksować.\n"
"\n"
"Napisz program, który drukuje `sentence` w sposób kpiący, np.:\n"
"\n"
"    OnE MoRe eXeRcIsE, aNd tHeN YoU CaN ReLaX.\n"
"\n"
"Co drugi znak powinien być małą literą, reszta wielkimi literami."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
msgid "pages.IfAndElse.steps.undefined_char.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
msgid "pages.IfAndElse.steps.undefined_char.output_prediction_choices.1"
msgstr "Hello World!"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.undefined_char.requirements"
msgstr ""
"Skopiuj program powyżej. Uruchom go tak, jak jest jeśli chcesz. Następnie "
"zmień `excited = True` na `excited = False` i uruchom to ponownie."

#. https://futurecoder.io/course/#IfAndElse
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
msgid "pages.IfAndElse.steps.undefined_char.text"
msgstr ""
"Oto zepsuty program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Czy widzisz problem? Jeśli uruchomisz go, wszystko wydaje się być w porządku. Co może pójść nie tak?\n"
"\n"
"Odpowiedzi poniżej! Czy już to rozgryzłeś?\n"
"\n"
"Co się dzieje, jeśli zmienisz `excited` na `False`?"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.title"
msgstr "`if` i `else`"

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.steps.final_text.text"
msgstr ""
"Kiedy używasz wcięć, powinieneś zawsze wciąć o 4 spacje. Wprawdzie każde "
"spójne wcięcie jest akceptowalne, ale 4 spacje to konwencja, której "
"przestrzega prawie każdy. Zauważ, że edytor na ogół Ci to ułatwia. Na "
"przykład, jeśli naciśniesz klawisz 'Tab' na klawiaturze w edytorze, zostaną "
"wstawione 4 spacje."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.mismatched_indentations
msgid "pages.Indentation.steps.mismatched_indentations.program"
msgstr ""
"for znak in nazwa:\n"
"    print(znak)\n"
"  print('---')"

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.steps.mismatched_indentations.text"
msgstr ""
"Ponieważ `print('---')` nie jest wcięte, nie jest częścią ciała pętli. Oznacza to, że jest wykonywane tylko raz, po zakończeniu całej pętli. Obydwa programy są poprawne, po prostu robią różne rzeczy.\n"
"\n"
"Poniższy program jest niepoprawny. Obie linie w ciele pętli są wcięte, ale o różnych ilościach. Pierwsza linia zaczyna się od 4 spacji, druga linia zaczyna się od 2. Spróbuj go uruchomić.\n"
"\n"
"__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation
msgid "pages.Indentation.steps.missing_indentation.program"
msgstr ""
"for znak in nazwa:\n"
"print(znak)"

#. https://futurecoder.io/course/#Indentation
#.     # __code1__:
#.     for character in name:
#.         print(character)
#.     # __code0__:
#.     for character in name: print(character)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.character
msgid "pages.Indentation.steps.missing_indentation.text"
msgstr ""
"Ta pętla przykładowa:\n"
"\n"
"__code0__\n"
"\n"
"działa, ale zazwyczaj (i powinna) być napisana tak:\n"
"\n"
"__code1__\n"
"\n"
"Konkretnie, kod do powtórzenia (znany jako *ciało*) zaczyna się w nowej linii po dwukropku (`:`), i musi być *wcięty*, tzn. mieć kilka spacji przed nim. Kod poniżej bez wcięcia jest nieprawidłowy, uruchom go, aby przekonać się sam:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#Indentation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Indentation.steps.one_indented_line.text"
msgstr ""
"Są dwie linie z wcięciem, więc obie są częścią ciała, więc `---` zostanie wydrukowane po każdym znaku. Teraz spróbuj uruchomić ten sam kod bez wcięcia w ostatniej linii:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#Indentation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Indentation.steps.two_indented_lines.text"
msgstr ""
"Spacje są wymagane, aby powiedzieć Pythonowi, które linie kodu należą do ciała pętli for. Jest to kluczowe, kiedy pętla zawiera kilka linii, co często ma miejsce. Na przykład, uruchom ten kod:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.title"
msgstr "Wcięcia"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.0.text"
msgstr "`input()` zawsze zwraca string."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.1.text"
msgstr "String wyglądający jak liczba wciąż jest stringiem, a nie liczbą."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.2.text"
msgstr "W `super_secret_number = 7`, `7` to liczba, a nie string."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.3.text"
msgstr "To sprawia, że `super_secret_number` też jest liczbą."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.4.text"
msgstr "String nie może być równy liczbie."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.5.text"
msgstr ""
"Aby sprawdzić, czy dwie wartości są równe, upewnij się najpierw, że są tego "
"samego typu."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.6.text"
msgstr ""
"Więc aby porównać liczbę i string, najpierw przekonwertuj liczbę na string "
"lub przekonwertuj string na liczbę."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.7.text"
msgstr ""
"Nauczyłeś się, jak przekształcać pomiędzy stringami a liczbami na "
"poprzedniej stronie."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.8.text"
msgstr ""
"Użyj `int()` do konwersji na liczbę całkowitą (naturalną) lub `str()` do "
"konwersji na string."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#.     # __code0__:
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.guess
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Amazing%21+Are+you+psychic%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.super_secret_number
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22What+number+am+I+thinking+of%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Nope%21%22
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text"
msgstr ""
"Cokolwiek wpisałeś (nie licząc wciśnięcia Entera na końcu) jest zwracane z funkcji `input()` jako string.\n"
"\n"
"Zasadnicze jest zrozumienie, że `input()` ***zawsze zwraca string***, bez względu na to, co użytkownik wpisał.\n"
"To do Ciebie należy konwersja tego stringa na typ, którego potrzebujesz.\n"
"Zapominanie o tym szczególe jest częstym źródłem zamieszania w błędach.\n"
"\n"
"Na przykład, ten program na pierwszy rzut oka wygląda dobrze, ale jeśli go wypróbujesz, zobaczysz, że właściwie nie działa:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Popraw program tak, aby gdy użytkownik wprowadzi wartość `super_secret_number` (`7` w tym przykładzie)\n"
"program wydrukował `Niesamowite! Czy masz zdolności jasnowidzenia?` jak się spodziewano.\n"
"Powinien działać, gdy `super_secret_number` jest dowolną liczbą całkowitą (`int`)."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#.     # __code0__:
#.     if int(guess) == super_secret_number:
#.     # __code1__:
#.     if guess == str(super_secret_number):
#.     # __code2__:
#.     super_secret_number = '7'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.guess
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.super_secret_number
msgid "pages.InteractiveProgramsWithInput.steps.final_text.text"
msgstr ""
"Świetnie!\n"
"\n"
"Jest dwie główne poprawki, które by tu zadziałały. Możesz przekonwertować wejście na liczbę:\n"
"\n"
"__code0__\n"
"\n"
"lub przekonwertować poprawną odpowiedź na string:\n"
"\n"
"__code1__\n"
"\n"
"Ważną różnicą między tymi dwoma podejściami jest to, że pierwsze podejście spowoduje wyświetlenie błędu,\n"
"jeśli użytkownik wpisze coś, co nie jest liczbą, co może być, albo i nie, tym, czego chcesz."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.InteractiveProgramsWithInput.steps.first_input.text"
msgstr ""
"Programy, które dotychczas napisaliśmy, nie są interaktywne.\n"
"Aby stworzyć naszą interaktywną grę w kółko i krzyżyk, będziemy potrzebować metody odbierania danych wejściowych od graczy.\n"
"Python pozwala na to za pomocą wbudowanej funkcji `input`. Uruchom ten program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Gdy uruchomisz `name = input()`, program faktycznie zatrzymuje się i czeka, aż coś wpiszesz w powłoce i naciśniesz Enter,\n"
"więc musisz to zrobić, aby mógł się zakończyć."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
msgid "pages.InteractiveProgramsWithInput.title"
msgstr "Interaktywne programy z `input()`"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.0.text"
msgstr ""
"Jeśli masz coś takiego jak `x < 0 and x > 100`, to jesteś na złym tropie. To"
" będzie `False` dla *każdej* wartości `x`!"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.1.text"
msgstr ""
"Rozwiązanie z `and` różni się na wiele sposobów od rozwiązania z `or`."

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.2.text"
msgstr ""
"Nasze rozwiązanie z `or` najpierw określa, czy `x` jest nieprawidłowym "
"procentem, w przeciwnym razie zakłada ważność. Używając `and` to zrobi "
"odwrotnie."

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.3.text"
msgstr "Będziesz musiał odwrócić instrukcje `return` odpowiednio."

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.4.text"
msgstr "Będziesz musiał również zmienić operatory porównania."

#. https://futurecoder.io/course/#IntroducingAnd
#.     # __code0__:
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
msgid "pages.IntroducingAnd.steps.AndExercise.text"
msgstr ""
"Ćwiczmy teraz. Wcześniej napisaliśmy funkcję `is_valid_percentage` używając `or`. Oto przykład\n"
"rozwiązania:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Przepisz tę funkcję używając `and`."

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.FalseAndFalse.text"
msgstr ""
"W końcu, spróbuj:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.0.text"
msgstr "Lista będzie zawsze miała 3 elementy."

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.1.text"
msgstr "To oznacza, że nie musisz używać pętli."

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.2.text"
msgstr "Pamiętaj, że możesz uzyskać pierwszy element używając `row[0]`."

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.3.text"
msgstr ""
"Pierwszy element, drugi element i trzeci element muszą być takie same."

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.4.text"
msgstr ""
"To oznacza, że pierwszy element powinien być równy drugiemu elementowi oraz "
"trzeciemu elementowi."

#. https://futurecoder.io/course/#IntroducingAnd
#.     # __code5__:
#.     def all_equal(row):
#.         ...
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#.     # __code0__:
#.     def is_valid_percentage(x):
#.         if 0 <= x and x <= 100:
#.             return True
#.         else:
#.             return False
#.     # __code1__:
#.     def is_valid_percentage(x):
#.         return 0 <= x and x <= 100
#.     # __code4__:
#.     def is_valid_percentage(x):
#.         return 0 <= x <= 100
#.     # __code2__:
#.     a < b and b < c
#.     # __code3__:
#.     a < b < c
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.text"
msgstr ""
"Świetnie! Oto jedno z możliwych rozwiązań:\n"
"\n"
"__code0__\n"
"\n"
"Tak jak wcześniej, możemy to rozwiązanie uprościć:\n"
"\n"
"__code1__\n"
"\n"
"Jest inny sposób, aby to jeszcze bardziej ulepszyć, nazywa się to łączeniem porównań. Każdy warunek taki jak:\n"
"\n"
"__code2__\n"
"\n"
"może być skrócony przez usunięcie dodatkowego `and b`:\n"
"\n"
"__code3__\n"
"\n"
"To działa dla wszystkich operatorów porównania, włączając `==`, i nawet można używać różnych operatorów.\n"
"Więc rozwiązanie można uprościć do:\n"
"\n"
"__code4__\n"
"\n"
"Kolejne ćwiczenie: mając listę trzech elementów, sprawdź czy wszystkie trzy elementy są takie same.\n"
"\n"
"    __copyable__\n"
"__code5__"

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.TrueAndFalse.text"
msgstr ""
"Dobrze, teraz spróbuj:\n"
"\n"
"__program_indented__\n"
"\n"
"Czego się spodziewasz?"

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.TrueAndTrue.text"
msgstr ""
"Inny operatorem logicznym w Pythonie jest `and`.\n"
"Wyrażenie `A and B` jest `True` tylko jeżeli zarówno `A` i `B` są `True`. W przeciwnym przypadku jest `False`.\n"
"Spróbuj w konsoli:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingAnd
#.     # __code0__:
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
#.     # __code2__:
#.         return row == [row[0], row[0], row[0]]
#.     # __code1__:
#.         return row[0] == row[1] == row[2]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.IntroducingAnd.steps.final_text.text"
msgstr ""
"Dobra robota. Istnieje wiele możliwych prawidłowych rozwiązań tutaj:\n"
"\n"
"__code0__\n"
"\n"
"lub używając ponownie łańcucha porównań:\n"
"\n"
"__code1__\n"
"\n"
"lub sprawdzając, czy równa się liście zawierającej trzy razy pierwszy element:\n"
"\n"
"__code2__"

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.title"
msgstr "Wprowadzenie `and`"

#. https://futurecoder.io/course/#IntroducingBirdseye
#.     # __code3__:
#.     __program_indented__
#.     # __code1__:
#.     (a * b) + (c * d)
#.     # __code2__:
#.     ((a * b) + c) * d
#.     # __code0__:
#.     a * b + c * d
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingBirdseye.steps.birdseye_loop_example.text"
msgstr ""
"Inne narzędzia pokazują, jak kod wykonuje się linia po linii oraz jakie są wartości zmiennych, `birdseye` pokazuje wartość każdego wyrażenia w programie. Pozwala to zobaczyć, jak skomplikowane wyrażenie jest rozbijane na mniejsze podwyrażenia\n"
"i jakie są ich wartości.\n"
"\n"
"Najedź kursorem na różne wyrażenia w ramkach w ostatniej linii programu.\n"
"Gdy każda ramka jest podświetlona, wartość zostaje pokazana na dole ekranu. Po kliknięciu na ramkę zostaje ona przymocowana do panelu, dzięki czemu możesz zobaczyć kilka wartości wyrażeń na raz i swobodnie poruszać kursorem.\n"
"\n"
"W tym przypadku `birdseye` pokazuje, że wyrażenie:\n"
"\n"
"__code0__\n"
"\n"
"jest rozbijane na\n"
"\n"
"__code1__\n"
"\n"
"a nie na\n"
"\n"
"__code2__\n"
"\n"
"Innymi słowy, Python przestrzega zwykłej kolejności operacji w matematyce, a nie po prostu oceniając od lewej do prawej.\n"
"\n"
"Zauważ, że istnieją wyrażenia, które `birdseye` nie umieszcza w ramkach. W tym przypadku `2`, `3`, `4`, `5` i `print` to także wyrażenia, ale ich wartości są oczywiste i umieszczenie ich w ramkach tylko by je zaśmiecało.\n"
"\n"
"Oto bardziej skomplikowany przykład do wypróbowania:\n"
"\n"
"    __copyable__\n"
"__code3__"

#. https://futurecoder.io/course/#IntroducingBirdseye
msgid "pages.IntroducingBirdseye.steps.final_text.text"
msgstr ""
"Zauważ, że:\n"
"\n"
"1. Obok pętli for jest para strzałek. Kliknij je, aby nawigować przez pętlę w czasie i zobaczyć, co działo się w różnych iteracjach.\n"
"2. Kod, który nie został wykonany w iteracji z powodu `if`, jest wyszarzony. Wyrażenia w środku nie mają wartości, ponieważ nie zostały ocenione.\n"
"3. Wartości zapisane dla wyrażeń `vowels` i `consonants` zależą od tego, na którą ramkę patrzysz. W linijkach po pętli zawierają wszystkie litery, ale wewnątrz pętli mają tylko niektóre, i dokładnie ile, zależy od tego, która iteracja jest aktualnie wyświetlana.\n"
"4. W `vowels.append(letter)`, widzisz, jakie były wartości tych zmiennych *w tym momencie*. Oznacza to, że `letter` zaraz zostanie dołączony do `vowels`, ale to jeszcze się nie stało, więc `vowels` nie zawiera jeszcze `letter`."

#. https://futurecoder.io/course/#IntroducingBirdseye
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingBirdseye.steps.first_birdseye_example.text"
msgstr ""
"Widziałeś już `snoop` i Python Tutor. futurecoder jest wyposażony jeszcze w jedno narzędzie do analizowania programów w trakcie ich działania, nazywane `birdseye`.\n"
"\n"
"Oto przykładowy program do uruchomienia. Skopiuj go do edytora i kliknij przycisk `birdseye`. Spowoduje to otwarcie nowej karty przeglądarki z wizualizacją.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingBirdseye
msgid "pages.IntroducingBirdseye.title"
msgstr "Zrozumienie Programów przy Pomocy `birdseye`"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access.special_messages.bad_french_value.text"
msgstr ""
"Ups, musisz ustawić `french = {'apple': 'pomme', 'box': 'boite'}`, zanim "
"będziemy mogli kontynuować."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access.text"
msgstr ""
"`french` to słownik z dwoma parami klucz-wartość:\n"
"\n"
"- `'apple': 'pomme'`, gdzie `'apple'` to klucz, a `'pomme'` to wartość.\n"
"- `'box': 'boite'`, gdzie `'box'` to klucz, a `'boite'` to wartość.\n"
"\n"
"Tak jak w listach, przecinek (`,`) służy do oddzielenia od siebie elementów (par klucz-wartość). Dwukropek (`:`) oddziela klucze od wartości.\n"
"Zwróć uwagę, że do utworzenia słownika używane są nawiasy klamrowe (`{}`), a nie nawiasy kwadratowe (`[]`), które stosowane są podczas pisania list.\n"
"\n"
"Pamiętaj, że w przypadku list uzyskujesz wartości na podstawie ich *indeksu*, czyli ich pozycji na liście.\n"
"Więc jeśli `words = ['apple', 'box']`, wtedy `words[0]` to `'apple'`, a `words[1]` to `'box'`.\n"
"Spróbuj to w konsoli:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access2.special_messages.bad_french_value.text"
msgstr ""
"Ups, musisz ustawić `french = {'apple': 'pomme', 'box': 'boite'}`, zanim "
"będziemy mogli kontynuować."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access2.text"
msgstr ""
"To nie działa, ponieważ pozycja elementów w słowniku zwykle nie ma znaczenia.\n"
"Zazwyczaj nie obchodzi cię, który jest 2-gi, 5-ty czy 100-ty wyraz w słowniku,\n"
"ty po prostu chcesz znaleźć konkretny wyraz, jak 'apple'. Więc spróbujmy tego zamiast:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access3.requirements"
msgstr ""
"Uruchom ten sam kod co w poprzednim kroku (`french['apple']`) w konsoli, ale"
" zamień `'apple'` na `'box'`."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access3.special_messages.bad_french_value.text"
msgstr ""
"Ups, musisz ustawić `french = {'apple': 'pomme', 'box': 'boite'}`, zanim "
"będziemy mogli kontynuować."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access3.text"
msgstr ""
"To już lepiej!\n"
"\n"
"Teraz uruchom podobną linijkę w konsoli, aby wyszukać tłumaczenie dla `'box'`."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access4.special_messages.bad_french_value.text"
msgstr ""
"Ups, musisz ustawić `french = {'apple': 'pomme', 'box': 'boite'}`, zanim "
"będziemy mogli kontynuować."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access4.text"
msgstr ""
"I teraz znasz zarówno Pythona, jak i francuski!\n"
"\n"
"Teraz spróbujmy przetłumaczyć z francuskiego na angielski:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.final_text.text"
msgstr ""
"Niestety, tego również nie możesz zrobić. Możesz tylko wyszukać klucz, aby uzyskać jego wartość, a nie na odwrót.\n"
"Słownik `french` ma tylko 2 klucze: `'apple'` i `'box'`. `'pomme'` jest wartością, a nie kluczem.\n"
"Wkrótce dowiemy się, dlaczego nie możesz po prostu wyszukać wartości bezpośrednio i co możesz z tym zrobić.\n"
"\n"
"Zwróć uwagę, że zarówno `french[0]`, jak i `french['pomme']` spowodowały ten sam rodzaj błędu: `KeyError`.\n"
"Ten błąd oznacza, że podany klucz (`0` lub `'pomme'` w tym przypadku) nie został znaleziony w słowniku.\n"
"To nie tak, że `french[0]` jest *nie dozwolone*, po prostu oznacza to samo, co zawsze:\n"
"znajdź wartość skojarzoną z kluczem `0`. W tym przypadku okazuje się, że nie istnieje taki klucz.\n"
"Ale `0` *może* być kluczem, ponieważ dozwolonych jest wiele typów kluczy, w tym ciągi znaków i liczby."

#. https://futurecoder.io/course/#IntroducingDictionaries
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingDictionaries.steps.first_dict.text"
msgstr ""
"Widzieliśmy już kilka typów: `str`, `int`, `float`, `bool` i `list`.\n"
"Tylko jeden z tych typów może zawierać wiele wartości: `list`.\n"
"Teraz nauczymy się o innym typie kontenera: `dict`, co jest skrótem od ***słownik***.\n"
"\n"
"Wyobraź sobie znajomy słownik, w którym wyszukujesz słowo, aby znaleźć jego definicję lub tłumaczenie na inny język.\n"
"Słowniki w Pythonie są podobne, ale bardziej ogólne. Wyszukujesz *klucz* (np. słowo), aby uzyskać powiązaną z nim *wartość* (np. definicję lub tłumaczenie).\n"
"\n"
"Na przykład, oto mały słownik tłumaczący angielskie słowa na francuski:\n"
"\n"
"__code0__\n"
"\n"
"Uruchom powyższą linijkę w konsoli."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.title"
msgstr "Wprowadzenie do Słowników"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingElif.steps.dna_example.text"
msgstr ""
"Szybka lekcja biologii! Większość komórek w twoim ciele zawiera pełny kod genetyczny w DNA.\n"
"Składa się ono z nici molekularnych jednostek zwanych nukleobazami, które występują w czterech odmianach:\n"
"Adenina, Cytozyna, Guanina i Tymina, czyli skrótowo ACGT.\n"
"Część pojedynczej nici może więc wyglądać tak:\n"
"\n"
"    AGTAGCGTCCTTAGTTACAGGATGGCTTAT...\n"
"\n"
"Ta będzie sparowana z inną nicią, gdzie A jest zamienione na T i na odwrót,\n"
"a C jest zamienione na G i na odwrót, np.:\n"
"\n"
"    TCATCGCAGGAATCAATGTCCTACCGAATA...\n"
"\n"
"Dwie nici są 'zazipowane' razem w słynną podwójną helisę,\n"
"połączone przez pasujące pary A-T i C-G. Te parowania są niezbędne przy kopiowaniu DNA, gdy\n"
"komórki się dzielą i rozmnażają. Podwójna helisa jest rozpinana i kod jest przepisywany\n"
"na jego przeciwstawną wersję, aby zrobić kopię.\n"
"\n"
"Zamierzamy powtórzyć ten proces. Spróbujmy napisać taki sam rodzaj programu, co przed chwilą:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingElif
msgid "pages.IntroducingElif.steps.dna_example_with_elif.requirements"
msgstr ""
"Skopiuj program z pierwszego kroku na tej stronie, ale zamień 4 bloki `if` na kombinację bloków `if` i `elif` stąd.\n"
"Innymi słowy, zamień każde z ostatnich trzech `if` na `elif`, ale pozostaw pierwszy `if` bez zmian."

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
msgid "pages.IntroducingElif.steps.dna_example_with_elif.text"
msgstr ""
"Świetnie! Naśladowałeś to, co twoje własne komórki robią ciągle.\n"
"\n"
"`If` wewnątrz `else` może być zastąpione jednym słowem kluczowym `elif`. Na przykład,\n"
"poprzedni kod można zmienić na to:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.0.text"
msgstr ""
"Zmień:\n"
"\n"
"__code0__\n"
"\n"
"aby wyglądało jak poprawiony fragment. To tylko mała zmiana, wykonaj ją bez kopiowania i wklejania."

#. https://futurecoder.io/course/#IntroducingElif
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.1.text"
msgstr "Teraz dokonaj tej samej zmiany w kodzie zamieniającym G i C."

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
msgid "pages.IntroducingElif.steps.dna_example_with_else.text"
msgstr ""
"O nie, to nie do końca działa. `T` zmienia się na `A`, ale `A` nie zmienia się na nic.\n"
"Czy widzisz dlaczego?\n"
"\n"
"Gdy `char == 'A'`, to faktycznie wykonuje się instrukcja `char = 'T'`. Ale to oznacza, że następujący\n"
"warunek `char == 'T'` także jest spełniony, więc `char = 'A'` i wracamy do punktu wyjścia.\n"
"Musimy zmienić `char` z `T` na `A` tylko wtedy, gdy `char` początkowo nie było `A`,\n"
"czyli `char == 'A'` było `Fałsz`. Możemy to zrobić za pomocą `else`, tak jak to:\n"
"\n"
"__code0__\n"
"\n"
"Teraz popraw program, aby zamieniał wszystkie znaki poprawnie."

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if X:
#.         ...
#.     else:
#.         if Y:
#.             ...
#.         else:
#.             if Z:
#.                 ...
#.             else:
#.                 ...
#.     # __code1__:
#.     if X:
#.         ...
#.     elif Y:
#.         ...
#.     elif Z:
#.         ...
#.     else:
#.         ...
msgid "pages.IntroducingElif.steps.final_text.text"
msgstr ""
"Często mamy do czynienia z łańcuchem klauzul `elif`, gdy chcemy, by jeden z wielu\n"
"bloków kodu się wykonał, tak jak w tym przypadku. Ogólnie kod taki jak ten:\n"
"\n"
"__code0__\n"
"\n"
"można przepisać jako:\n"
"\n"
"__code1__\n"
"\n"
"co jest krótsze i oszczędza nam skomplikowanego zagnieżdżania. Różnica jest tylko kosmetyczna:\n"
"gdy komputer wykonuje ten kod, nie potrafi odróżnić jednej wersji od drugiej.\n"
"\n"
"Zauważ, że za `elif`(ami) opcjonalnie można dodać jeden ostatni `else`. Nie umieściliśmy go\n"
"w naszym przykładzie z DNA, ale moglibyśmy dodać go, aby ostrzec nas o wszelkich nieoczekiwanych znakach\n"
"w danych wejściowych lub zmienić `elif char == 'C':` na `else:`, gdybyśmy byli pewni\n"
"że dane wejściowe są poprawne."

#. https://futurecoder.io/course/#IntroducingElif
msgid "pages.IntroducingElif.title"
msgstr "Wprowadzenie do `elif`"

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.steps.final_text.text"
msgstr ""
"Kod można czytać prawie jak zwykły angielski:\n"
"\n"
"> For each character in the string `name`, print that character.\n"
"*> Dla każdego znaku w ciągu `name`, wydrukuj ten znak.*\n"
"\n"
"Każdy znak to po prostu normalny ciąg. `character` to normalna zmienna, której przed wykonaniem kodu po `:` przypisywana jest nowa wartość. Więc kod powyżej jest równoważny:\n"
"\n"
"    __no_auto_translate__\n"
"    name = 'World'\n"
"\n"
"    character = 'W'\n"
"    print(character)\n"
"\n"
"    character = 'o'\n"
"    print(character)\n"
"\n"
"    character = 'r'\n"
"    print(character)\n"
"\n"
"    character = 'l'\n"
"    print(character)\n"
"\n"
"    character = 'd'\n"
"    print(character)\n"
"\n"
"Zauważ, że moglibyśmy użyć innej nazwy zmiennej, `character` po prostu sprawia, że jest to jaśniejsze.\n"
"\n"
"Pętla for zazwyczaj stosuje się w następującej strukturze:\n"
"\n"
"    for <zmienna> in <kolekcja>: <kod do powtórzenia>\n"
"\n"
"Elementy `for`, `in`, i `:` są niezbędne."

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.steps.first_for_loop.text"
msgstr ""
"Dobre wieści! Udało Ci się przebrnąć przez nudne podstawy. Możemy zacząć pisać niektóre ciekawe programy i trochę się bawić. Jednym z najpotężniejszych pojęć w programowaniu jest *pętla*, która pozwala powtarzać ten sam kod wielokrotnie. Python ma dwa rodzaje pętli: pętle `for` i pętle `while`. Oto przykład pętli for, spróbuj uruchomić ten program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.title"
msgstr "Wprowadzenie do pętli for"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.0.text"
msgstr "To jest podobne do podanego przykładu f-stringa."

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.1.text"
msgstr "Czy zapomniałeś o `f`?"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.2.text"
msgstr "Ile par nawiasów klamrowych potrzebujesz?"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.text"
msgstr ""
"Nie powiedzie się, ponieważ nie możemy użyć `+` między ciągiem znaków `\"Cześć Alice. Masz \"` a liczbą `age`.\n"
"\n"
"Napraw to, zastępując wszystkie konkatenacje ciągów znaków (+) jednym f-stringiem."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.0"
msgstr "\"Cześć \" + nazwa + \". Masz \" + wiek + \" lata.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.1"
msgstr "Cześć nazwa. Masz wiek lata."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.2"
msgstr "Cześć Alice. Masz 20 lat."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.3"
msgstr "Cześć 'Alice'. Masz 20 lat."

#. https://futurecoder.io/course/#IntroducingFstrings
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingFstrings.steps.concatenate_string_number.text"
msgstr ""
"Składnia f-stringa zaczyna się od `f` po czym następuje ciąg znaków.\n"
"F-string może zawierać nazwy zmiennych w nawiasach klamrowych `{}`.\n"
"Będą one zastępowane wartościami tych zmiennych przekształconymi na ciągi znaków.\n"
"Zmienne mogą być dowolne: ciągi znaków, liczby, listy i tak dalej.\n"
"\n"
"W związku z tym f-stringi pozwalają łatwo łączyć ciągi znaków z liczbami, które nie mogą\n"
"po prostu zostać dodane do siebie. Na przykład, uruchom poniższy program:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.eval_expr_inside_f_string.text"
msgstr ""
"Ponadto, f-string może zawierać w nawiasach klamrowych dowolne wyrażenie Pythona.\n"
"Spróbuj tego w konsoli:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.final_text.text"
msgstr ""
"Świetnie!\n"
"\n"
"Od teraz zachęcamy do używania f-stringów zamiast `+` do budowania ciągów znaków tam, gdzie to możliwe."

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.0.text"
msgstr "Są cztery problemy z wyrażeniem wewnątrz `print`."

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.1.text"
msgstr "Jest problem z syntaksem znalezienia liczby ludzi."

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.2.text"
msgstr "Potem jeden z ciągów znaków ma problem z cudzysłowami."

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.3.text"
msgstr "Jest też problem z syntaksem znalezienia imienia pierwszej osoby."

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.4.text"
msgstr "Nie możesz dodać ciągu znaków do liczby!"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.5.text"
msgstr "Czy poprawnie użyłeś nawiasów klamrowych w twoim f-stringu?"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.fix_broken_program.text"
msgstr ""
"Jak widać, możemy także zdefiniować f-string używając cudzysłowów, tak jak w przypadku zwykłego ciągu znaków.\n"
"I podobnie jak w przypadku cudzysłowów, f-stringi są tylko notacją. Po ich wyliczeniu komputer zapomina,\n"
"że użyto f-stringa, przechowuje tylko końcowy wynik jako zwykły ciąg znaków.\n"
"\n"
"Oto bardzo zepsuty program:\n"
"\n"
"    __copyable__\n"
"    ludzie = [\"Alice\", \"Bob\", \"Charlie\"]\n"
"    print('Jest' + ludzie.length() + 'ludzi w kolejce, pierwszy z nich ma na imię' + ludzie.1 + '.')\n"
"\n"
"Napraw to!\n"
"Twoje rozwiązanie powinno działać dla dowolnej listy ciągów znaków o nazwie `ludzie`.\n"
"Na przykład w powyższym przypadku powinno wydrukować:\n"
"\n"
"    Jest 3 ludzi w kolejce, pierwszy z nich ma na imię Alice."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.0"
msgstr "f\"{nazwa} poszła na {posiłek} z {przyjacielem}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.1"
msgstr "\"{nazwa} poszła na {posiłek} z {przyjacielem}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.2"
msgstr "{nazwa} poszła na {posiłek} z {przyjacielem}."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.3"
msgstr "'nazwa' poszła na 'posiłek' z 'przyjacielem'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.4"
msgstr "nazwa poszła na posiłek z przyjacielem."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.5"
msgstr "\"Alice\" poszła na \"lunch\" z 'Bobem'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.6"
msgstr "'Alice' poszła na 'lunch' z 'Bobem'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.7"
msgstr "\"Alice poszła na lunch z Bobem.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.8"
msgstr "Alice poszła na lunch z Bobem."

#. https://futurecoder.io/course/#IntroducingFstrings
#.     # __code0__:
#.     name + " went to " + meal + " with " + friend + '.'
#.     # __code1__:
#.     f"{name} went to {meal} with {friend}."
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+went+to+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+with+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22%7Bname%7D+went+to+%7Bmeal%7D+with+%7Bfriend%7D.%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.friend
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.meal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.requirements"
msgstr ""
"Uruchom program powyżej, ale zastąp ten kod wewnątrz `print()`:\n"
"\n"
"__code0__\n"
"\n"
"przez:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingFstrings
#.     # __code0__:
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#.     # __code1__:
#.     print(f"{name} went to {meal} with {friend}.")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+with+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.meal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22%7Bname%7D+went+to+%7Bmeal%7D+with+%7Bfriend%7D.%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+went+to+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.friend
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22lunch%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.text"
msgstr ""
"Do tej pory łączyliśmy ciągi znaków, konkatenując je za pomocą `+`, na przykład:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Jednak jest to trochę niewygodne. Możemy napisać to samo w bardziej elegancki sposób, używając *f-stringa*.\n"
"Zastąp ostatnią linię programu powyżej poniższą linią i uruchom ją.\n"
"Upewnij się, że uwzględnisz `f` przed ciągiem znaków.\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.title"
msgstr "f-stringi"

#. https://futurecoder.io/course/#IntroducingIfStatements
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.0.text"
msgstr ""
"Do istniejącego programu trzeba tylko dodać kilka linii. Wszystkie "
"istniejące kody powinny pozostać takie, jakie są."

#. https://futurecoder.io/course/#IntroducingIfStatements
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.1.text"
msgstr ""
"Kod, który dodajesz, powinien być bardzo podobny do istniejącego kodu."

#. https://futurecoder.io/course/#IntroducingIfStatements
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.confused
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
msgid "pages.IntroducingIfStatements.steps.excited_confused_exercise.text"
msgstr ""
"Czas na ćwiczenie. Zmodyfikuj powyższy program, aby dodać dodatkowy\n"
"parametr logiczny `confused`, tak aby program zaczynał się tak:\n"
"\n"
"__code0__\n"
"\n"
"(`zdanie` może być dowolnym łańcuchem znaków, a dwie wartości logiczne mogą być albo `True`, albo `False`)\n"
"\n"
"Gdy `confused` jest prawdziwe (`True`), wydrukowane zdanie powinno mieć na końcu znak zapytania.\n"
"Jeśli zarówno `confused`, jak i `excited` są prawdziwe (`True`), zdanie powinno kończyć się na `!?`."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.0"
msgstr "Witaj Świecie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.1"
msgstr "Witaj Świecie!"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_example.text"
msgstr ""
"Zauważ, że kod znajdujący się wewnątrz pierwszej instrukcji `if` został wykonany, ale kod drugiej nie.\n"
"\n"
"Generalnie instrukcja `if` wygląda tak:\n"
"\n"
"    if <warunek>:\n"
"        <ciało>\n"
"\n"
"gdzie `<warunek>` to dowolne wyrażenie, które daje wynik w postaci wartości logicznej, a `<ciało>` to **wcięta** lista\n"
"jednego lub więcej stwierdzeń. Struktura jest dość podobna do pętli `for`. Zwróć uwagę na dwukropek (`:`), który\n"
"jest niezbędny.\n"
"\n"
"Gdy komputer widzi `if <warunek>:`, sprawdza, czy `<warunek>` jest `True`. Jeśli tak, wykonuje ciało.\n"
"Jeśli nie, pomija je i kontynuuje resztę programu.\n"
"\n"
"Oto bardziej interesujący przykład, który możesz uruchomić:\n"
"\n"
"__program_wcięty__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.0"
msgstr "Witaj Świecie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.1"
msgstr "Witaj Świecie!"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_false_example.requirements"
msgstr ""
"Uruchom program z poprzedniego kroku, ale zamień `True` na `False`, tak żeby"
" było `excited = False`."

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_false_example.text"
msgstr ""
"(Pamiętaj, że `zdanie += '!'` oznacza `zdanie = zdanie + '!'`)\n"
"\n"
"Zmień `excited = True` na `excited = False` i uruchom program ponownie, aby zobaczyć różnicę."

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.final_text.text"
msgstr ""
"Brawo! Ten program może robić 4 różne rzeczy w zależności od tego, jak łączysz `excited`\n"
"i `confused`. Wypróbuj je, jeśli chcesz."

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.first_if_statements.text"
msgstr ""
"Wartości logiczne są przeznaczone do użycia wewnątrz *instrukcji warunkowych* (nazywanych czasami również *warunkami*).\n"
"\n"
"Oto prosty przykład, który możesz uruchomić:\n"
"\n"
"__program_wcięty__"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.introducing_booleans.text"
msgstr ""
"Teraz nauczymy się, jak powiedzieć komputerowi, aby podejmował decyzje i wykonywał kod\n"
"tylko pod pewnymi warunkami. Do tego będziemy potrzebować nowego rodzaju wartości. Widziałeś już\n"
"liczby i łańcuchy znaków, teraz spotkaj się z *wartościami logicznymi*. Istnieją tylko dwie wartości logiczne:\n"
"`True` i `False`. Wypróbuj ten program:\n"
"\n"
"__program_wcięty__"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.title"
msgstr "Wprowadzenie do Instrukcji Warunkowych"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.can_contain_anything.text"
msgstr ""
"Lista jest *sekwencją* (uporządkowanym zbiorem/kontenerem) dowolnej liczby wartości.\n"
"Wartości te często określane są jako *elementy*.\n"
"Mogą to być cokolwiek: liczby, ciągi znaków, wartości logiczne, nawet inne listy! Mogą także być mieszanką różnych typów.\n"
"\n"
"Aby bezpośrednio utworzyć listę, jak wyżej:\n"
"\n"
"1. Napisz nawiasy kwadratowe: `[]`\n"
"2. Jeśli nie chcesz mieć pustej listy, wewnątrz napisz wyrażenia, które będą elementami.\n"
"3. Umieść przecinki (`,`) pomiędzy elementami, aby je oddzielić.\n"
"\n"
"Oto inny przykład tworzenia listy:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.final_text.text"
msgstr ""
"Gratulacje! To było bardzo trudne! Jedno z możliwych rozwiązań wygląda tak:\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"    separator = ' - '\n"
"    total = ''\n"
"    not_first = False\n"
"\n"
"    for word in words:\n"
"        if not_first:\n"
"            total += separator\n"
"        total += word\n"
"        not_first = True\n"
"\n"
"    print(total)"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.first_list
msgid "pages.IntroducingLists.steps.first_list.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"\n"
"for word in words:\n"
"    print(word)"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.first_list.text"
msgstr ""
"Nadszedł czas, aby dowiedzieć się o potężnym nowym typie wartości, zwanym *listami*. Oto przykład:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.numbers_sum.text"
msgstr ""
"Jak widziałeś powyżej, listy są *iterowalne*, co oznacza, że możesz iterować po nich przy użyciu `pętli for`.\n"
"Oto program, który sumuje wszystkie liczby na liście:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.0.text"
msgstr ""
"To jest bardzo podobne do ćwiczeń, które wykonałeś, tworząc ciągi znaków "
"znak po znaku."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.1.text"
msgstr "Rozwiązanie jest bardzo podobne do programu, który sumuje liczby."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.2.text"
msgstr ""
"Tak naprawdę, co się stanie, jeśli spróbujesz uruchomić ten program z listą "
"ciągów znaków?"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.3.text"
msgstr ""
"Problem polega na tym, że 0. Nie możesz dodać 0 do ciągu znaków, ponieważ "
"liczby i ciągi znaków są niekompatybilne."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.4.text"
msgstr ""
"Czy jest podobne pojęcie wśród ciągów znaków do 0? Pusta początkowa wartość?"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.strings_sum.text"
msgstr ""
"Teraz zmodyfikuj program, tak aby mógł sumować listę ciągów znaków zamiast liczb.\n"
"Na przykład, mając:\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"powinien wydrukować:\n"
"\n"
"    __no_auto_translate__\n"
"    Thisisalist"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.0.text"
msgstr ""
"To jest podobne do poprzedniego ćwiczenia. Możesz zacząć od swojego "
"rozwiązania z tego."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.1.text"
msgstr ""
"To ćwiczenie nie wymaga niczego wyjątkowego, a ostateczne rozwiązanie może "
"być dość proste. Ale wymaga starannego przemyślenia podejścia."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.10.text"
msgstr ""
"Możesz napisać program, który sprawdza, czy jesteś w *pierwszej* iteracji "
"pętli."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.11.text"
msgstr ""
"Wystarczy zrobić zmienną typu bool do śledzenia tego. Nie ma potrzeby "
"używania żadnych operatorów porównania ani liczb."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.12.text"
msgstr ""
"Spojrzeliśmy na programy, które robiły coś takiego "
"[tutaj](#UnderstandingProgramsWithSnoop)."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.13.text"
msgstr ""
"Więc jeśli pominięto dodawanie separatora tylko w pierwszej iteracji, będzie"
" miał `n - 1` separatorów. Teraz wystarczy tylko przemyśleć ostrożnie, jak "
"upewnić się, że separatory są we właściwym miejscu."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.14.text"
msgstr ""
"Zapominając na chwilę o pętli, musisz dodać do ciągu znaków w tej "
"kolejności: pierwsze słowo, separator, drugie słowo, separator, trzecie "
"słowo itd."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.15.text"
msgstr ""
"To oznacza, że w pierwszej iteracji dodajesz tylko pierwsze słowo. W drugiej"
" iteracji dodajesz separator, potem drugie słowo. W trzeciej iteracji "
"dodajesz separator, potem trzecie słowo. I tak dalej."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.16.text"
msgstr "Więc w swojej pętli najpierw dodaj separator, następnie dodaj słowo."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.17.text"
msgstr ""
"Pomiń dodawanie separatora w pierwszej iteracji, sprawdzając zmienną typu "
"bool."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.18.text"
msgstr ""
"Utwórz zmienną typu bool przed pętlą, później zmień ją wewnątrz pętli."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.19.text"
msgstr ""
"Zmieniaj ją dopiero po sprawdzeniu w pętli, inaczej nie będziesz w stanie "
"pominąć pierwszej iteracji."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.2.text"
msgstr ""
"W każdej iteracji, oprócz słowa z listy, musisz również dodać separator."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.3.text"
msgstr ""
"Ale nie chcesz dodawać separatora po dodaniu ostatniego słowa na liście."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.4.text"
msgstr ""
"Niestety nie ma \"odejmowania\" w ciągach znaków; nie możesz dodać "
"ostatniego separatora, a następnie go usunąć."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.5.text"
msgstr ""
"Zróbmy krok wstecz. Ostateczny wynik powinien zawierać każde słowo i `n - 1`"
" separatorów, gdzie `n` to liczba słów."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.6.text"
msgstr "Chcesz dodać separator w każdej iteracji oprócz jednej."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.7.text"
msgstr ""
"Możesz pominąć dodawanie separatora w jednej konkretnej iteracji używając "
"instrukcji `if`."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.8.text"
msgstr ""
"Później nauczysz się sposobu iterowania po liście i sprawdzania, czy jesteś "
"w ostatniej iteracji, ale na razie nie masz możliwości tego zrobienia."

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.9.text"
msgstr "Jednak iteracja, którą pomijasz, nie musi być ostatnia!"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.strings_sum_bonus.text"
msgstr ""
"Wspaniale!\n"
"\n"
"Jeśli chcesz, możesz kontynuować [następnej stronie](#BuildingNewLists).\n"
"\n"
"Dla dodatkowego, opcjonalnego wyzwania: rozszerz program tak, aby dodawał łańcuch separatorów *pomiędzy* każdym słowem.\n"
"Na przykład, mając\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"    separator = ' - '\n"
"\n"
"wydrukowałby:\n"
"\n"
"    __no_auto_translate__\n"
"    This - is - a - list"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.title"
msgstr "Wprowadzenie do list"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.double_subscripting.requirements"
msgstr ""
"Uruchom `print(strings[1][0])` lub coś podobnego używając `birdseye`, aby "
"zobaczyć jak to działa."

#. https://futurecoder.io/course/#IntroducingNestedLists
#.     # __code0__:
#.     string = strings[1]
#.     print(string[0])
#.     # __code1__:
#.     print(strings[1][0])
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
msgid "pages.IntroducingNestedLists.steps.double_subscripting.text"
msgstr ""
"Możesz to rozwiązać tak:\n"
"\n"
"__code0__\n"
"\n"
"Istnieje krótszy sposób. `strings[1]` to wyrażenie jak każde inne i indeksowanie jak `[0]`\n"
"może być użyte na dowolnym wyrażeniu, nie tylko na zmiennych.\n"
"Więc możesz pominąć zmienną pośrednią i zrobić to jedną linią:\n"
"\n"
"__code1__\n"
"\n"
"Przyjrzyj się dobrze tej składni. Jeśli wygląda na nową i wyszukaną, to nie jest.\n"
"To tylko zwykła składnia indeksowania, zastosowana dwa razy.\n"
"Spróbuj użyć `birdseye`, aby zobaczyć jak Python rozkłada to na mniejsze części."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.0.text"
msgstr "To jest bardzo podobne do poprzedniego ćwiczenia."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.1.text"
msgstr ""
"Czy pamiętasz jak uzyskać dostęp do ostatniej pozycji na liście (bez użycia "
"`len`)?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.2.text"
msgstr "Podobnie jak uzyskujesz dostęp do przedostatniej pozycji na liście?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.3.text"
msgstr "Jeśli nie pamiętasz, możesz wyszukać to w Google!"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.4.text"
msgstr "Indeksowanie działa podobnie na listach i ciągach znaków."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.5.text"
msgstr ""
"Czy otrzymujesz błąd `index out of range`? Czy dotyczy on ciągu czy listy? "
"Dlaczego?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.6.text"
msgstr "Upewnij się, że nie mylisz kolejności indeksu listy i indeksu ciągu."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.7.text"
msgstr "Użyj `birdseye` jeśli masz problemy."

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.text"
msgstr ""
"Używając tej składni, zmodyfikuj program tak, aby wydrukować ostatnią literę przedostatniego ciągu na liście `strings`.\n"
"Musisz użyć pojedynczego wyrażenia podobnie jak powyżej i nie wolno ci używać `len`.\n"
"Twoje rozwiązanie powinno działać dla dowolnej niepustej listy ciągów znaków.\n"
"Przy poprzednim przykładzie wejściowym powinno wydrukować `f`."

#. https://futurecoder.io/course/#IntroducingNestedLists
#.     # __code0__:
#.     strings[1].append("today?")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22today%3F%22
msgid "pages.IntroducingNestedLists.steps.final_text.text"
msgstr ""
"Świetnie! Teraz bardzo dobrze rozumiesz zagnieżdżone indeksowanie.\n"
"\n"
"Cały czas możemy używać wszystkich metod i funkcji list, które wcześniej poznaliśmy.\n"
"Na przykład możemy dodać nowe słowo do ostatniej podlisty `strings` używając `append`,\n"
"żeby umieścić je po `'you'`:\n"
"\n"
"__code0__\n"
"\n"
"Przecież podlista `strings[1]` to wciąż lista jak każda inna!\n"
"\n"
"Na następnej stronie dowiemy się, jak iterować po zagnieżdżonych listach."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.0"
msgstr "hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.1"
msgstr "there"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.10"
msgstr "a"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.2"
msgstr "how"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.3"
msgstr "are"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.4"
msgstr "you"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.5"
msgstr "['hello', 'there']"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.6"
msgstr "['how', 'are', 'you']"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.7"
msgstr "h"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.8"
msgstr "t"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.9"
msgstr "e"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.program"
msgstr ""
"strings = [['hello', 'there'], ['how', 'are', 'you']]\n"
"print(strings[1][0])"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.text"
msgstr ""
"Dobra robota!\n"
"\n"
"Zastosowanie indeksowania dwa razy może być nawet bardziej potężne.\n"
"Możemy użyć go nie tylko na liście ciągów znaków, ale także na *liście list*.\n"
"Na przykład, co wydrukuje poniższy program?\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.0.text"
msgstr "Jak możesz uzyskać dostęp do drugiego ciągu na liście?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.1.text"
msgstr "A jak uzyskujesz dostęp do konkretnego znaku w ciągu?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.2.text"
msgstr "Pamiętaj, że indeksowanie list i ciągów znaków jest bardzo podobne."

#. https://futurecoder.io/course/#IntroducingNestedLists
#.     # __code0__:
#.     strings = ["abc", "def", "ghi"]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ghi%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22def%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22abc%22
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.text"
msgstr ""
"Ćwiczenie: mając daną listę ciągów znaków, wydrukuj pierwszą literę drugiego ciągu na liście. Na przykład, mając:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"powinieneś wydrukować `d`."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.0.text"
msgstr "To jest bardzo podobne do poprzednich ćwiczeń."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.1.text"
msgstr "Ile razy musisz użyć indeksowania?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.2.text"
msgstr "Najpierw musisz uzyskać dostęp do podlisty."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.3.text"
msgstr "Potem ciągu na tej podliście."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.4.text"
msgstr "Potem litery w tym ciągu."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.5.text"
msgstr "Użyj `birdseye` jeśli masz problemy."

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.text"
msgstr ""
"Jak widzisz Python pozwala nam mieć *zagnieżdżone listy*: listę, w której każdy element to inna lista (nazywamy je *podlistami*).\n"
"\n"
"Możemy używać indeksowania nawet więcej niż dwa razy.\n"
"Napisz program który bierze zagnieżdżoną listę `strings` jak powyżej,\n"
"i wydrukuje **pierwszą literę trzeciego ciągu na drugiej podliście**.\n"
"Użyj tylko pojedynczego wyrażenia, jak w poprzednim ćwiczeniu.\n"
"Dla listy podanej powyżej powinno wydrukować `y`."

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.title"
msgstr "Wprowadzenie do zagnieżdżonych list"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.0.text"
msgstr ""
"Pomyśl, jak zrobiłbyś to ręcznie i systematycznie, z ołówkiem i papierem."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.1.text"
msgstr ""
"Fakt, że hasło musi mieć dokładnie cztery litery, jest bardzo ważny. To "
"byłoby o wiele trudniejsze do rozwiązania, gdyby hasło mogło być dowolnej "
"długości."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.2.text"
msgstr "Ale string `litery` może mieć dowolną liczbę znaków."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.3.text"
msgstr ""
"Jeśli jest `n` różnych liter, to liczba możliwych haseł wynosi `n^4 == "
"n*n*n*n`, ponieważ dla każdej pozycji są `n` możliwe litery i są one "
"wszystkie niezależne."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.4.text"
msgstr ""
"Załóżmy znowu, że `litery = \"ABCD\"`. Wyobraź sobie, że masz wszystkie "
"możliwe trzyliterowe hasła. Teraz dla każdego z nich dodaj na końcu A, albo "
"B, albo C, albo D. W ten sposób uzyskasz wszystkie możliwe czteroliterowe "
"hasła."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.5.text"
msgstr ""
"Pamiętaj, że pętla for może zawierać dowolną instrukcję, w tym inną pętlę "
"for."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.6.text"
msgstr "Dotyczy to wszystkich pętli for."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.7.text"
msgstr "Jedna pętla for wewnątrz innej pętli for to już nie wystarczy."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.8.text"
msgstr "Musisz iść głębiej."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     letters = "ABCD"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ABCD%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.letters
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.text"
msgstr ""
"Na następne ćwiczenie musisz złamać hasło. Wiesz, że ma ono dokładnie cztery litery i tylko kilka liter jest możliwych, które sobie zanotowałeś:\n"
"\n"
"__code0__\n"
"\n"
"Musisz wydrukować wszystkie możliwe hasła:\n"
"\n"
"    AAAA\n"
"    AAAB\n"
"    AAAC\n"
"    AAAD\n"
"    AABA\n"
"    AABB\n"
"    ...pomijając kilka...\n"
"    DDDA\n"
"    DDDB\n"
"    DDDC\n"
"    DDDD"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayers%5Bi%5D%7D+vs+%7Bplayers%5Bj%5D%7D%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Dylan%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
msgid "pages.IntroducingNestedLoops.steps.final_text.text"
msgstr ""
"Znakomicie! Rozwiązanie wygląda tak:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.steps.first_nested_loop.text"
msgstr ""
"Widziałeś, że wcięcie ciała instrukcji `if` lub pętli może zawierać dowolny rodzaj instrukcji, w tym więcej instrukcji `if` i pętli. W szczególności pętla może zawierać inną pętlę. Oto przykład:\n"
"\n"
"__program_indented__\n"
"\n"
"To nazywa się *zagnieżdżoną pętlą*. Nic w tym naprawdę nowego, warto to jednak dobrze zrozumieć, ponieważ może być bardzo przydatne do pisania interesujących programów."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.0.text"
msgstr "Będziesz potrzebował pętli for wewnątrz pętli for, jak wcześniej."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.1.text"
msgstr "Tym razem coś takiego jak `for player1 in players:` nie wystarczy."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.10.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.11.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.2.text"
msgstr "Twój program musi używać *pozycji* graczy na liście."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.3.text"
msgstr ""
"Oznacza to, że musisz wykonywać pętlę po pozycjach i użyć indeksowania "
"(subskrypcji) aby uzyskać dostęp do wpisów na liście."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.4.text"
msgstr "Aby wykonywać pętlę po pozycjach, użyj `range`..."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.5.text"
msgstr "...i `len`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.6.text"
msgstr "Spójrz na oczekiwane wyjście: "

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.7.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.8.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.9.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Dylan%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text"
msgstr ""
"Wow, jesteś też artystą!\n"
"\n"
"Jeśli chcesz, możesz przejść teraz do [następnej strony](#IntroducingBirdseye). Albo możesz podjąć dodatkowe wyzwanie!\n"
"\n"
"Tak jak w poprzednim ćwiczeniu, organizujesz turniej gry. Masz listę nazwisk graczy:\n"
"\n"
"__code0__\n"
"\n"
"Tym razem każda para graczy powinna pojawić się tylko raz. Konkretnie, wydrukuj tylko te pary, które są w\n"
"takiej samej kolejności od lewej do prawej, jak są w `gracze`, zaczynając od par zawierających osobę najbardziej po lewej\n"
"w `gracze` i przechodząc na prawo. Na przykład, dla powyższego, twój program powinien wydrukować\n"
"\n"
"    Karol kontra Alicja\n"
"    Karol kontra Daniel\n"
"    Karol kontra Bob\n"
"    Alicja kontra Daniel\n"
"    Alicja kontra Bob\n"
"    Daniel kontra Bob"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.0.text"
msgstr ""
"Pomyśl, jak zrobiłbyś to ręcznie i systematycznie, z ołówkiem i papierem."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.1.text"
msgstr "Musisz użyć pętli for wewnątrz pętli for."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.2.text"
msgstr ""
"Potrzebujesz instrukcji if, aby sprawdzić, że dwóch graczy to nie ta sama "
"osoba."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     players = ["Alice", "Bob", "Charlie"]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Charlie%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text"
msgstr ""
"Świetnie!\n"
"\n"
"Następne ćwiczenie: organizujesz turniej gry, takiej jak szachy czy tenis. Masz listę nazwisk graczy:\n"
"\n"
"__code0__\n"
"\n"
"Każdy gracz zagra z każdym innym graczem dwa razy: raz, kiedy uzyska przewagę (np. przez pierwszy ruch lub serwis) i raz bez tej przewagi. Wydrukuj wszystkie kombinacje meczów tak, jak to:\n"
"\n"
"    Alicja kontra Bob\n"
"    Alicja kontra Karol\n"
"    Bob kontra Alicja\n"
"    Bob kontra Karol\n"
"    Karol kontra Alicja\n"
"    Karol kontra Bob\n"
"\n"
"Zauważ, że w liście są zarówno \"Alicja kontra Bob\" jak i \"Bob kontra Alicja\", ale nie ma \"Alicja kontra Alicja\" - nie chcemy, aby ktoś grał sam ze sobą."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.0.text"
msgstr "Musisz użyć pętli for wewnątrz pętli for."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.1.text"
msgstr "Potrzebne są liczby od 1 do 12."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.2.text"
msgstr "Kiedykolwiek potrzebujesz sekwencji kolejnych liczb, użyj `range`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.3.text"
msgstr "Chcesz coś w rodzaju `for x in range(n):`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.4.text"
msgstr ""
"To rozpocznie się od `x = 0`, ale jest na to prosty sposób, aby to naprawić."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.5.text"
msgstr "Możesz po prostu dodać 1 do `x`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.6.text"
msgstr "Użyj `*`, aby pomnożyć liczby."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.7.text"
msgstr "Użyj f-string z kilkoma zmiennymi."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.8.text"
msgstr ""
"Pamiętaj o wydrukowaniu linii z odpowiednią liczbą kresek po każdej sekcji."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.9.text"
msgstr ""
"Upewnij się, że każda linia znajduje się we właściwej pętli i ma odpowiednią"
" ilość wcięć."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.added_str_and_int.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.adding_one_in_wrong_loop.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.too_long.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.used_times_instead_of_x.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.special_messages.multiply_with_x.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.text"
msgstr ""
"Upewnij się, że w pełni rozumiesz, co się dzieje. `print(letter)` i `print('---')` są wykonywane każde po 3 razy, ponieważ ich wcięcie umieszcza je w *zewnętrznej pętli*. `print(f'{letter} {number}')` jest wywoływane 3 × 4 = 12 razy, ponieważ znajduje się w *wewnętrznej pętli* `for number in range(4):`, która ma 4 iteracje, ale sama znajduje się w zewnętrznej pętli, więc działa 3 razy.\n"
"\n"
"Zastosujmy to w praktyce! Załóżmy, że jesteś nauczycielem i musisz wydrukować wszystkie tabliczki mnożenia od 1 do 12 dla swoich uczniów. Nie chcesz ich pisać ręcznie, ale możesz napisać program, który to zrobi za ciebie! Wyjście programu powinno wyglądać tak, łącznie z liniami kresek:\n"
"\n"
"    1 × 1 = 1\n"
"    1 × 2 = 2\n"
"    1 × 3 = 3\n"
"    1 × 4 = 4\n"
"    1 × 5 = 5\n"
"    1 × 6 = 6\n"
"    1 × 7 = 7\n"
"    1 × 8 = 8\n"
"    1 × 9 = 9\n"
"    1 × 10 = 10\n"
"    1 × 11 = 11\n"
"    1 × 12 = 12\n"
"    ---\n"
"    2 × 1 = 2\n"
"    2 × 2 = 4\n"
"    2 × 3 = 6\n"
"    2 × 4 = 8\n"
"    2 × 5 = 10\n"
"    2 × 6 = 12\n"
"    2 × 7 = 14\n"
"    2 × 8 = 16\n"
"    2 × 9 = 18\n"
"    2 × 10 = 20\n"
"    2 × 11 = 22\n"
"    2 × 12 = 24\n"
"    ---\n"
"    3 × 1 = 3\n"
"    3 × 2 = 6\n"
"    3 × 3 = 9\n"
"    (...rozumiesz już ideę...)\n"
"    11 × 10 = 110\n"
"    11 × 11 = 121\n"
"    11 × 12 = 132\n"
"    ---\n"
"    12 × 1 = 12\n"
"    12 × 2 = 24\n"
"    12 × 3 = 36\n"
"    12 × 4 = 48\n"
"    12 × 5 = 60\n"
"    12 × 6 = 72\n"
"    12 × 7 = 84\n"
"    12 × 8 = 96\n"
"    12 × 9 = 108\n"
"    12 × 10 = 120\n"
"    12 × 11 = 132\n"
"    12 × 12 = 144\n"
"    ---"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.0.text"
msgstr "Jak opisałbyś instrukcje wpisywania tego trójkąta ręcznie?"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.1.text"
msgstr ""
"Wydrukuj linię z `size` plusów, potem `size - 1` plusów itd. aż do 1 plusa. "
"Na przykład wydrukuj 5 `+`, potem 4 `+`, potem 3, 2 i 1."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.2.text"
msgstr "Podziel to na podproblemy."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.3.text"
msgstr ""
"Jak wydrukować jedną linię `+` o podanej długości i jak przejść przez "
"wszystkie długości?"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.4.text"
msgstr ""
"Budowanie linii znaków powinno być bardzo znajome z poprzednich ćwiczeń, "
"jedyna różnica polega na tym, że musisz zrobić to o określonej długości "
"zamiast takiej samej długości co inny string."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.5.text"
msgstr ""
"Łatwym sposobem na zrobienie czegoś `n` razy jest pętla po `range(n)`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.6.text"
msgstr "Musisz użyć pętli for wewnątrz pętli for."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.7.text"
msgstr ""
"Potrzebujesz liczb, które maleją, takich jak 5, 4, 3, 2, 1. Istnieje sposób "
"na zrobienie tego z `range`, i łatwo można to znaleźć w internecie, ale to "
"też łatwo zrobić za pomocą zwykłego zakresu i prostej matematyki, aby "
"przekształcić liczby rosnące w liczby malejące."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.8.text"
msgstr "Jaki wzór przekształca 0 w 5, 1 w 4, 2 w 3 itp.?"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     size = 5
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.text"
msgstr ""
"Wow, teraz jesteś właściwie hakerem!\n"
"\n"
"Jeszcze jedno ćwiczenie. Mając daną wielkość:\n"
"\n"
"__code0__\n"
"\n"
"Wydrukuj 'do góry nogami' trójkąt zrobiony ze znaku plus `+`, którego boki są tak długie, jak podana wielkość, np:\n"
"\n"
"    +++++\n"
"    ++++\n"
"    +++\n"
"    ++\n"
"    +"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.title"
msgstr "Wprowadzenie do zagnieżdzonych pętli"

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.steps.IntroducingNot.text"
msgstr ""
"W przeciwieństwie do dwóch innych operatorów boolowskich `and` i `or`,\n"
"które są używane między dwoma wartościami boolowskimi (nazywanymi *operatorami binarnymi*),\n"
"`not` jest używany przed tylko jedną wartością boolowską (nazywanym *operatorem unarnym*).\n"
"Neguje on wyrażenie, do którego jest stosowany, trochę jak znak minus. Spróbuj w powłoce:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.steps.NotFalse.text"
msgstr ""
"Teraz spróbuj następującego:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22cat.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22dog.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22invoice.pdf%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.valid_image
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.0.text"
msgstr ""
"Co by było, gdybyś miał za zadanie uproszczenie tej powiązanej, ale przeciwnej funkcji?\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.1.text"
msgstr ""
"W takim przypadku jest standardowy trik upraszczający, który omówiliśmy "
"kilka stron temu."

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.2.text"
msgstr ""
"Ogólnie rzecz ujmując, `returns` są zbędne, bo `filename.endswith(\".png\") "
"or filename.endswith(\".jpg\")` jest już pożądaną wartością boolowską."

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.valid_image
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.3.text"
msgstr ""
"Więc możesz po prostu napisać:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.4.text"
msgstr "Dla prawdziwego ćwiczenia możesz zrobić coś podobnego."

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.5.text"
msgstr ""
"Różnica w prawdziwym ćwiczeniu polega na tym, że wynik jest odwrócony."

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.6.text"
msgstr ""
"To znaczy, że `invalid_image` zwraca `True` kiedy `valid_image` zwraca "
"`False` i na odwrót."

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.7.text"
msgstr "Pamiętasz, co robi `not`?"

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code7__:
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#.     # __code6__:
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#.     # __code1__:
#.     (not True) or True
#.     # __code2__:
#.     not (True or True)
#.     # __code0__:
#.     not True or True
#.     # __code4__:
#.     (-1) + 2
#.     # __code5__:
#.     -(1 + 2)
#.     # __code3__:
#.     -1 + 2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.invalid_image
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22I+can%27t+process+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22dog.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22cat.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22invoice.pdf%22
msgid "pages.IntroducingNotPage.steps.NotPriority.text"
msgstr ""
"Możesz zobaczyć w `birdseye`, że\n"
"\n"
"__code0__\n"
"\n"
"jest interpretowane przez Pythona jako\n"
"\n"
"__code1__\n"
"\n"
"zamiast:\n"
"\n"
"__code2__\n"
"\n"
"Więc, `not` ma wyższy priorytet niż `or`, jeśli nie ma nawiasów. Jest to takie samo jak w przypadku, gdy\n"
"\n"
"__code3__\n"
"\n"
"oznacza:\n"
"\n"
"__code4__\n"
"\n"
"zamiast\n"
"\n"
"__code5__\n"
"\n"
"`not` ma również wyższy priorytet niż `and`.\n"
"\n"
"Znowu, główną rzeczą do zapamiętania jest używanie nawiasów lub dodatkowych zmiennych w razie wątpliwości.\n"
"\n"
"Ćwiczenie: Załóżmy, że piszesz program przetwarzający obrazy. Tylko niektóre typy plików można przetworzyć.\n"
"Jeśli użytkownik poda ci plik, którego nie można przetworzyć, chcesz wyświetlić błąd:\n"
"\n"
"__code6__\n"
"\n"
"Załóżmy, że pliki .png i .jpg można przetwarzać, ale inne typy plików nie mogą być przetwarzane.\n"
"Oto przykładowa funkcja do tego:\n"
"\n"
"    __copyable__\n"
"__code7__\n"
"\n"
"To jest dłuższe niż potrzeba. Przepisz funkcję `invalid_image`, aby treść była jednoliniowa `return <expression>`,\n"
"tzn. bez instrukcji `if`. Powinna przejść te same testy."

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingNotPage.steps.NotTrueOrTrue.text"
msgstr ""
"Jaki jest priorytet `not` w porównaniu z `and` i `or`? Spróbuj następującego w `birdseye`:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
#.     # __code1__:
#.     if x:
#.         return False
#.     else:
#.         return True
#.     # __code2__:
#.     return not x
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.invalid_image
msgid "pages.IntroducingNotPage.steps.final_text.text"
msgstr ""
"Brawo! Oto dwie poprawne rozwiązania:\n"
"\n"
"__code0__\n"
"\n"
"(jeśli jesteś ciekawy, te rozwiązania są równoważne dzięki czemuś, co nazywa się prawem De Morgana)\n"
"\n"
"Zauważ także, że jest to kolejny ogólny wzorzec, który można uprościć: jeśli twój kod ma formę:\n"
"\n"
"__code1__\n"
"\n"
"gdzie `x` sam w sobie jest wartością boolowską, wówczas można go uprościć do:\n"
"\n"
"__code2__"

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.title"
msgstr "Wprowadzenie do `not`"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     return name == "Alice" or name == "Bob"
#.     # __code1__:
#.     return name == "Alice" or "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.ACommonMistake.requirements"
msgstr ""
"Uruchom program z poprzedniego kroku, ale zamień:\n"
"\n"
"__code0__\n"
"\n"
"na:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     return name == "Alice" or name == "Bob"
#.     # __code1__:
#.     return name == "Alice" or "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
msgid "pages.IntroducingOr.steps.ACommonMistake.text"
msgstr ""
"Zwróć szczególną uwagę, jak napisaliśmy warunek:\n"
"\n"
"__code0__\n"
"\n"
"Typowym błędem jest napisanie tego zamiast:\n"
"\n"
"__code1__\n"
"\n"
"To ma sens, jeśli czytasz to jak po angielsku:\n"
"\n"
"> `return` czy `name` jest równy albo `\"Alice\"` lub `\"Bob\"`\n"
"\n"
"Ale Python nie jest angielskim, i nie tak działa `or`.\n"
"\n"
"Zamień linię `return` w kodzie powyższą linią, i spróbuj uruchomić to ponownie."

msgid "pages.IntroducingOr.steps.AnExercise.disallowed.3.label"
msgstr "łańcuchowe porównanie"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.0.text"
msgstr ""
"Pamiętaj, możesz użyć operatorów porównujących `<, >, <=, >=, ==` do "
"wytworzenia booleanów."

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.1.text"
msgstr "Musisz sprawdzić, jak `x` porównuje się do 0 i jak do 100."

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.2.text"
msgstr "Musisz połączyć dwa porównania w jeden boolean używając `or`."

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.3.text"
msgstr ""
"Powżej użyliśmy triku, aby całe ciało funkcji było po prostu `return "
"<porównanie> or <porównanie>`. Ale to nie zadziała tutaj!"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.4.text"
msgstr "Musisz użyć instrukcji `if`."

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.5.text"
msgstr "Musisz mieć `return False` i `return True`."

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.6.text"
msgstr ""
"Jeśli masz coś w rodzaju `x >= 0 or x <= 100`, jesteś na złym tropie. To "
"będzie prawdą dla *dowolnej* wartości `x`. W końcu 101 jest większe niż 0!"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code4__:
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#.     # __code3__:
#.     return name in ["Alice", "Bob", "Charlie"]
#.     # __code2__:
#.     (name == "Alice") or ("Bob")
#.     # __code1__:
#.     name == ("Alice" or "Bob")
#.     # __code0__:
#.     name == "Alice" or "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Charlie%22
msgid "pages.IntroducingOr.steps.AnExercise.text"
msgstr ""
"Gdy zbadamy to z pomocą `birdseye`, widzimy, że:\n"
"\n"
"__code0__\n"
"\n"
"nie jest tłumaczone na\n"
"\n"
"__code1__\n"
"\n"
"tak jak myślimy po angielsku, ale raczej:\n"
"\n"
"__code2__\n"
"\n"
"co ocenia się jako `\"Bob\"`, gdy `name == \"Alice\"` jest `False`.\n"
"\n"
"Może czujesz się tak:\n"
"\n"
"[![Mam teraz dodatkowe pytania](https://i.imgur.com/jN57tGt.png)](https://imgur.com/a/icKzI)\n"
"\n"
"Jedyna rzecz, którą naprawdę musisz wiedzieć to: dopóki nie wiesz, co robisz, zawsze\n"
"upewnij się, że po obu stronach `or` są booleany, ponieważ to jest operator boolean.\n"
"`name == \"Alice\" or \"Bob\"` łamie tę zasadę.\n"
"\n"
"Jeśli jesteś ciekawy, odpowiedzi są poniżej, ale możesz je pominąć, jeśli chcesz, i przejść do ćwiczenia poniżej.\n"
"\n"
"----\n"
"\n"
"> Dlaczego `(name == \"Alice\") or (\"Bob\")` równa się `\"Bob\"`? Dlaczego równa się cokolwiek? `\"Bob\"` nawet nie jest booleanem!\n"
"\n"
"Definicja \"`A or B` jest `True` jeśli `A` lub `B` jest `True`\" była uproszczeniem. Jest to najłatwiejszy\n"
"sposób myślenia o `or` większość czasu, szczególnie przy pisaniu instrukcji `if`.\n"
"Prawdziwa definicja jest taka, że jeśli `A` jest prawdziwe, to `A or B` to po prostu `A` (w rzeczywistości `B` nawet nie jest oceniane),\n"
"w przeciwnym razie to `B`.\n"
"Możesz samemu sprawdzić, że jeśli `A` i `B` są booleanami, to obie definicje są równoważne.\n"
"W tym przykładzie `A` to `name == \"Alice\"`, co jest `False`, więc `A or B` to `B`, które jest `\"Bob\"`.\n"
"\n"
"> Czy jest lepszy sposób na napisanie warunku bez powtarzania `name ==` za każdym razem?\n"
"\n"
"Tak! W [Funkcje i Metody dla List](#FunctionsAndMethodsForLists) wspomnieliśmy o operatorze `in`,\n"
"którego możesz użyć z listą w taki sposób:\n"
"\n"
"__code3__\n"
"\n"
"Ale nie zawsze możesz pozbyć się `or` w ten sposób.\n"
"\n"
"----\n"
"\n"
"Ćwiczenie: Napisz funkcję o nazwie `is_valid_percentage`, przyjmującą jeden argument numeryczny `x`.\n"
"Powinna zwracać `True`, jeśli `x` jest między 0 a 100 (włącznie), oraz zwracać `False` w przeciwnym przypadku.\n"
"Twoja funkcja powinna używać `or` i spełniać te testy:\n"
"\n"
"    __copyable__\n"
"__code4__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.FalseOrFalse.text"
msgstr ""
"Na koniec spróbuj:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#.     # __code1__:
#.     return name == "Alice" or name == "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.FurtherImprovement.requirements"
msgstr ""
"Uruchom program z poprzedniego kroku, ale zamień:\n"
"\n"
"__code0__\n"
"\n"
"na:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code1__:
#.     if x:
#.         return True
#.     else:
#.         return False
#.     # __code0__:
#.     name == "Alice" or name == "Bob"
#.     # __code2__:
#.     return x
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
msgid "pages.IntroducingOr.steps.FurtherImprovement.text"
msgstr ""
"Możemy zrobić jeszcze lepiej. Zauważ, że\n"
"\n"
"__code0__\n"
"\n"
"jest booleanem, i oba `return` zwracają booleany `True` lub `False`.\n"
"Funkcja:\n"
"\n"
" - zwraca `True` gdy `name == \"Alice\" or name == \"Bob\"` jest `True`, oraz\n"
" - zwraca `False` gdy `name == \"Alice\" or name == \"Bob\"` jest `False`.\n"
"\n"
"Więc moglibyśmy po prostu zwrócić boolean `name == \"Alice\" or name == \"Bob\"` jako taki w obu przypadkach!\n"
"\n"
"To jest częsty sposób na uproszczenie twojego kodu. Jeśli kiedykolwiek znajdziesz się w sytuacji pisania kodu takiego jak:\n"
"\n"
"__code1__\n"
"\n"
"gdzie `x` sam w sobie jest booleanem, zawsze możesz uprościć ten blok kodu do:\n"
"\n"
"__code2__\n"
"\n"
"Zastosuj tę uproszczenie do kodu sam, i uruchom go ponownie."

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.ImprovingWithOr.requirements"
msgstr ""
"Skopiuj program z początku strony, a następnie zmień pierwsze cztery linijki"
" funkcji tak, aby użyć `or` zgodnie z sugestią."

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     # __code1__:
#.     if name == "Alice" or name == "Bob":
#.         return True
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
msgid "pages.IntroducingOr.steps.ImprovingWithOr.text"
msgstr ""
"W edytorze zamień:\n"
"\n"
"__code0__\n"
"\n"
"na:\n"
"\n"
"__code1__\n"
"\n"
"Jak widzisz, `is_friend` zwróci `True` tylko wtedy, gdy `name` to Alice lub Bob.\n"
"Operator `or` używany jest między dwoma booleanami `name == \"Alice\"` i `name == \"Bob\"`."

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingOr.steps.InputAliceBob.text"
msgstr ""
"Dowiedzieliśmy się o *booleanach* (`True` i `False`), gdy wprowadzaliśmy instrukcje warunkowe If.\n"
"Nauczyliśmy się również o operatorach porównujących `==`, `<`, `>`, `<=`, `>=`, które zwracają booleany.\n"
"Teraz chcemy połączyć booleany, aby sprawdzać bardziej złożone warunki.\n"
"\n"
"Oto prosty przykład: wyobraź sobie, że masz dwóch przyjaciół, Alice i Boba.\n"
"Funkcja poniżej przyjmuje jeden parametr, `name`, i sprawdza, czy osoba o podanej nazwie jest wśród twoich przyjaciół.\n"
"Skopiuj i uruchom kod w edytorze:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.InspectWithBirdseye.requirements"
msgstr "Uruchom ten sam kod co w poprzednim kroku, ale użyj `birdseye`."

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.InspectWithBirdseye.text"
msgstr ""
"Drugi i trzeci test zawiodły! Nasza funkcja wydaje się robić coś nie tak:\n"
"zwraca `\"Bob\"` (łańcuch znaków, a nie boolean!) gdy `name` to `\"Bob\"` lub `\"Charlie\"`. Co się dzieje?\n"
"Uruchom ten sam problematyczny kod ponownie z `birdseye`. Dokładnie sprawdź instrukcje `return` każdego wywołania `is_friend`.\n"
"(Użyj niebieskich przycisków ze strzałką)"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.TrueOrFalse.text"
msgstr ""
"Dobrze, teraz spróbuj:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.TrueOrTrue.text"
msgstr ""
"Zobaczmy, czy możemy to zrobić lepiej.\n"
"Możemy połączyć instrukcje `if` i `elif`, używając **`or`**. `or` jest *operatorem boolean*,\n"
"co znaczy, że jest to operator (tak jak `+` lub `-`), który łączy dwa booleany (`True` lub `False`).\n"
"\n"
"Wyrażenie `A or B` jest `True`, jeśli `A` lub `B` jest `True`, to znaczy jeśli `A` jest `True` lub `B` jest `True`, albo oba.\n"
"Jest `False` tylko wtedy, gdy ani `A` ani `B` nie jest `True`, to znaczy oba są `False`.\n"
"\n"
"Wypróbuj poniższe w konsoli.\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.final_text.text"
msgstr "Dobra robota!"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.title"
msgstr "Wprowadzenie do `or`"

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.steps.final_text.text"
msgstr ""
"Konsola zwraca dokładnie to samo, ponieważ nie ma nic więcej do obliczenia. `'hello'` po prostu równa się `'hello'`.\n"
"\n"
"String to sekwencja znaków. Znak to pojedynczy symbol taki jak litera, cyfra, znak interpunkcyjny, spacja itd. W tym przypadku string zawiera 5 znaków `hello`. Cudzysłowy nie są częścią łańcucha - są tam, żeby pokazać zarówno ludziom, jak i komputerom, że jest to string składający się z jakichkolwiek znaków pomiędzy cudzysłowami."

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.steps.hello_string.text"
msgstr ""
"Python pozwala na dużo więcej niż tylko obliczenia. W rzeczywistości, nie będziemy zajmować się liczbami czy matematyką przez jakiś czas. Zamiast tego przyjrzymy się *stringom* (ang. strings). Stringi to w zasadzie fragmenty tekstu. Na przykład, wprowadź następujący kod do konsoli, razem z cudzysłowami (`'`):\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.title"
msgstr "Wprowadzenie do łańcuchów znaków"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.final_text.text"
msgstr ""
"Doskonale! Kontynuuj eksperymentowanie. Gdy będziesz gotowy, kliknij "
"'Dalej', aby kontynuować."

#. https://futurecoder.io/course/#IntroducingTheShell
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTheShell.steps.first_expression
msgid ""
"pages.IntroducingTheShell.steps.first_expression.messages.anything_else.text"
msgstr ""
"Wspaniale, próbujesz własnych eksperymentów!\n"
"To dobry znak. Kontynuuj w tym duchu.\n"
"Tylko informuję, że ostatecznie musisz wpisać `1+2`, aby książka mogła przejść dalej."

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.first_expression.text"
msgstr ""
"Po prawej stronie znajduje się *konsola*. To miejsce do uruchamiania niewielkich fragmentów kodu Pythona. Wystarczy wpisać kod, nacisnąć enter, i już! Spróbuj teraz:\n"
"\n"
"1. Kliknij gdziekolwiek na konsoli (czarny obszar).\n"
"2. Wpisz `__program__`\n"
"3. Naciśnij klawisz Enter na klawiaturze."

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.more_calculation.requirements"
msgstr ""
"Uruchom kod w shellu podobny do `1 + 2`, ale zamiast `+` użyj `*`, `/`, lub "
"`-`."

#. https://futurecoder.io/course/#IntroducingTheShell
#.     # __code0__:
#.     3 * 4
msgid ""
"pages.IntroducingTheShell.steps.more_calculation.special_messages.multiply_with_x.text"
msgstr ""
"Widzę 'x'. Jeśli próbujesz mnożyć, użyj gwiazdki, np.:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.more_calculation.text"
msgstr ""
"Świetnie! Python wykonał `1+2` i otrzymał wynik `3`, i to właśnie wyświetliło się w konsoli.\n"
"\n"
"Konsola to prawdopodobnie najważniejsze narzędzie do nauki Pythona i powinieneś spędzać dużo czasu na eksperymentowaniu i odkrywaniu jej. Bądź ciekawy! Nieustannie zadawaj sobie pytanie \"Co by się stało, gdybym uruchomił X?\" i natychmiast odpowiadaj na to pytanie, wykonując ten kod w konsoli. Nigdy nie bój się próbować czegoś nowego - jeśli zrobisz coś nie tak, nic złego się nie stanie.\n"
"\n"
"Spróbuj teraz wykonać więcej obliczeń. Możesz mnożyć liczby używając `*`, dzielić za pomocą `/`, a odejmować z `-`. Możesz także użyć nawiasów, czyli `(` i `)`."

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.title"
msgstr "Wprowadzenie do Shella"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.0.text"
msgstr ""
"Możesz zacząć od naśladowania `row_winner` powyżej, a następnie zmodyfikować"
" to, aby działało dla kolumn."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.1.text"
msgstr ""
"Nie możesz przechodzić przez kolumny `board` tak prosto jak przez rzędy."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.10.text"
msgstr ""
"Zdefiniuj zmienną logiczną dla każdej kolumny, a następnie aktualizuj ją "
"odpowiednio wewnątrz wewnętrznej pętli."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.11.text"
msgstr "Reszta logiki jest bardzo podobna do `row_winner`."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.12.text"
msgstr "Uważaj na `' '`."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.13.text"
msgstr "Nie zapomnij zwrócić `False` na końcu, jeśli jest to potrzebne."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.2.text"
msgstr ""
"Czym *jest* kolumna zagnieżdżonej listy? Pierwsza kolumna składa się z "
"pierwszego elementu pierwszego rzędu, pierwszego elementu drugiego rzędu i "
"tak dalej."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.3.text"
msgstr ""
"Przechodzenie przez wszystkie kolumny oznacza patrzenie na pierwszy element "
"każdego rzędu, potem drugi element każdego rzędu, i tak dalej."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.4.text"
msgstr ""
"Więc musisz przechodzić przez liczby reprezentujące pozycje pierwszą, drugą,"
" itd."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.5.text"
msgstr "Jak znajdziesz liczbę kolumn w `board`?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.6.text"
msgstr ""
"To pokrywa zewnętrzną pętlę, która przechodzi przez każdą kolumnę. Potem "
"potrzebujesz wewnętrznej pętli, aby przejść przez każdy element w kolumnie."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.7.text"
msgstr ""
"Różne wpisy kolumny NIE znajdują się w tym samym rzędzie. Więc jak możesz je"
" uzyskać?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.8.text"
msgstr ""
"Możesz przechodzić przez rzędy planszy i znajdować element odpowiadający tej"
" kolumnie i rzędowi."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.9.text"
msgstr ""
"Aby uzyskać dostęp do wszystkich wpisów, powiedzmy, piątej kolumny, możesz "
"przechodzić przez wszystkie rzędy i uzyskać dostęp do piątego elementu w "
"każdym rzędzie."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code0__:
#.     def column_winner(board):
#.         ...
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.text"
msgstr ""
"Świetna robota!\n"
"\n"
"Teraz napisz podobną funkcję `column_winner`, która sprawdza wygrywającą *kolumnę* (linię pionową) dowolnej figury:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Tu `O` wygrało w drugiej kolumnie drugiej planszy."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.0.text"
msgstr "Ile przekątnych jest na kwadratowej planszy o dowolnym rozmiarze?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.1.text"
msgstr ""
"Nawet jeśli rozmiar planszy się zmienia, liczba przekątnych pozostaje taka "
"sama!"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.10.text"
msgstr ""
"Możesz użyć jednej pętli i sprawdzić obie przekątne jednocześnie. Albo "
"możesz użyć jednej pętli dla każdej przekątnej."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.2.text"
msgstr ""
"Nie możesz zrobić czegoś takiego jak `środek == board[0][0] i środek == "
"board[2][2]` tym razem, ponieważ nie wiesz, jak długa jest przekątna."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.3.text"
msgstr ""
"Co więcej, dwie przekątne mogą nie mieć ze sobą nic wspólnego, jak `środek`."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.4.text"
msgstr ""
"Najpierw skup się na przekątnej, która biegnie od lewego górnego do prawego "
"dolnego rogu."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.5.text"
msgstr "Jak możesz uzyskać do nich dostęp z podwójnym indeksowaniem?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.6.text"
msgstr ""
"Czy widzisz wzór w tych podwójnych indeksach? Weź kartkę i długopis, pracuj "
"nad tym na kilku przykładach."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.7.text"
msgstr ""
"Teraz skup się na drugiej przekątnej (od prawego górnego do lewego dolnego "
"rogu). Istnieje wzór w indeksach ponownie, ale jest trochę trudniejszy."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.8.text"
msgstr "Czy pamiętasz o indeksowaniu ujemnym? Może być przydatne tutaj."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.9.text"
msgstr ""
"Gdy pojmiesz wzory, użyj tych samych pomysłów jak wcześniej, aby sprawdzić, "
"czy wszystkie wpisy są równe."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code1__:
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#.     # __code0__:
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.middle
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.text"
msgstr ""
"Wspaniale! To było wymagające.\n"
"\n"
"Na końcu musimy sprawdzić wygrywające przekątne. W poprzednim rozdziale napisałeś już funkcję, która to robi dla plansz 3x3.\n"
"\n"
"__code0__\n"
"\n"
"Teraz napisz `diagonal_winner`, która działa dla kwadratowych plansz dowolnego rozmiaru: 4x4, 5x5 i tak dalej...\n"
"\n"
"    __copyable__\n"
"__code1__\n"
"\n"
"W pierwszym przykładzie `X` wygrało na przekątnej od lewego dolnego do prawego górnego rogu."

#. https://futurecoder.io/course/#IntroducingTicTacToe
msgid "pages.IntroducingTicTacToe.steps.final_text.text"
msgstr ""
"Świetna praca!\n"
"\n"
"Teraz mamy kod, który określa wygrywający stan na planszy."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.0.text"
msgstr ""
"Musisz sprawdzić każdy rząd na planszy, więc potrzebujesz pętli do tego."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.1.text"
msgstr "Jak możesz sprawdzić, czy wszystkie wpisy w rzędzie są sobie równe?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.10.text"
msgstr "Upewnij się, że zwracasz `False`, jeśli nie ma wygrywających rzędów."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.2.text"
msgstr ""
"To samodzielny problem sam w sobie. Możesz zacząć od zapomnienia o całej "
"planszy i po prostu sprawdzania jednego rzędu."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.3.text"
msgstr ""
"Moglibyście nawet napisać funkcję, która tylko to robi, chociaż nie musicie "
"tego robić."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.4.text"
msgstr ""
"Ponieważ rząd może mieć dowolny rozmiar, będziesz musiał przeprowadzić pętlę"
" przez cały jego obszar."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.5.text"
msgstr ""
"Dla każdego rzędu zdefiniuj zmienną logiczną (boolean). Następnie "
"przeprowadź pętlę przez ten rząd, aktualizując zmienną odpowiednio."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.6.text"
msgstr ""
"Możesz użyć pierwszego wpisu `row[0]` w rzędzie, aby porównać wszystkie "
"pozostałe wpisy do niego."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.7.text"
msgstr ""
"Zastanów się uważnie, jaką początkową wartość powinna mieć zmienna logiczna "
"i w jakich warunkach powinieneś zmienić jej wartość."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.8.text"
msgstr ""
"Po przeprowadzeniu pętli przez rząd, jeśli stwierdzisz, że wszystkie jego "
"wpisy są sobie równe, wtedy zwróć `True` (kończąc wczesniej zewnętrzną "
"pętlę)."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.9.text"
msgstr "Upewnij się, że nie zwracasz `True` dla rzędu wypełnionego spacjami."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid ""
"pages.IntroducingTicTacToe.steps.intro_row_winner.messages.catch_empty_row.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code2__:
#.     def row_winner(board):
#.         ...
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     # __code1__:
#.     board = [
#.         ['A', 'B', 'A', 'A'],
#.         ['B', ' ', ' ', 'A'],
#.         [' ', 'A', 'B', 'B'],
#.         [' ', 'A', 'B', ' ']
#.     ]
#.     # __code0__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['O', ' ', ' '],
#.         [' ', 'X', 'O']
#.     ]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.text"
msgstr ""
"Wykonaliście już wiele krótkich ćwiczeń rozwiązując niewielkie problemy. Teraz zajmiemy się większym, bardziej skomplikowanym\n"
"projektem, który naprawdę sprawdzi Waszą wiedzę i będzie wymagał połączenia wielu mniejszych części razem.\n"
"Będzie to bardzo zabawne!\n"
"\n"
"Stworzycie tekstową, interaktywną grę w kółko i krzyżyk, przeznaczoną dla 2 graczy ludzkich.\n"
"Oto mały podgląd tego, jak będzie wyglądała gotowa gra w trakcie rozgrywki:\n"
"\n"
"      1 2 3\n"
"    1  | |\n"
"      -+-+-\n"
"    2  | |\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"    Gracz X:\n"
"    1\n"
"    1\n"
"\n"
"      1 2 3\n"
"    1 X| |\n"
"      -+-+-\n"
"    2  | |\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"    Gracz O:\n"
"    2\n"
"    2\n"
"\n"
"      1 2 3\n"
"    1 X| |\n"
"      -+-+-\n"
"    2  |O|\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"    Gracz X:\n"
"    1\n"
"    3\n"
"\n"
"      1 2 3\n"
"    1 X| |X\n"
"      -+-+-\n"
"    2  |O|\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"Dzielimy projekt na kilka małych funkcji, które będą stanowić ćwiczenia.\n"
"\n"
"Użyjecie wielu pojęć, których się już nauczyliście: napisy (strings),\n"
"zagnieżdżone listy, zagnieżdżone pętle, `range`, wywoływanie funkcji w funkcjach, porównania i wartości logiczne (booleans).\n"
"\n"
"Po drodze dowiecie się też o kilku nowych pojęciach, w tym o znakach nowej linii, typach i `input()`.\n"
"\n"
"Oto zarys projektu:\n"
"\n"
"- trzy funkcje `row_winner`, `column_winner`,  `diagonal_winner`, które sprawdzają całą planszę pod kątem wygrywających rzędów, kolumn i przekątnych\n"
"- funkcja `winner`, która sprawdza całą planszę pod kątem zwycięzcy, łącząc powyższe funkcje\n"
"- funkcja `format_board`, która wyświetla bieżący stan gry\n"
"- funkcja `play_move`, która przyjmuje dane wejściowe od użytkownika, aby wykonać ruch,\n"
"- na końcu funkcja `play_game`, która łączy wszystko razem i uruchamia grę interaktywnie.\n"
"- Później dodamy kolejne udoskonalenia.\n"
"\n"
"Zaczynajmy!\n"
"\n"
"Tak jak w ostatnim rozdziale, będziemy reprezentować planszę do gry w kółko i krzyżyk jako zagnieżdżoną listę napisów (stringów).\n"
"Dla typowej gry będzie to lista 3x3, tj. 3 listy zawierające po 3 napisy, z graczami reprezentowanymi przez `'X'` lub `'O'`.\n"
"Puste pola będą reprezentowane przez spację, czyli `' '`. Na przykład:\n"
"\n"
"__code0__\n"
"\n"
"Jednak, aby było ciekawiej, Wasz kod będzie musiał działać dla kwadratowych plansz o dowolnym rozmiarze\n"
"(4x4, 5x5 itd.), gdzie gracze mogą być reprezentowani przez dowolne napisy, np.:\n"
"\n"
"__code1__\n"
"\n"
"Napisz funkcję `row_winner`, która zwraca `True`, jeśli `board` zawiera\n"
"wygrywający rząd, czyli poziomą linię, która ma tę samą postać we wszystkich swoich miejscach (oprócz `' '`):\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"W drugim przykładzie `O` wygrywa w dolnym rzędzie."

msgid "pages.IntroducingTicTacToe.steps.winner.disallowed.0.message"
msgstr ""

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.0.text"
msgstr ""
"Rozwiązanie jest dość krótkie! Po prostu użyj trzech funkcji poprawnie."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.1.text"
msgstr ""
"Pomyśl o możliwych przypadkach. Kiedy `winner(board)` zwraca `False`? Kiedy "
"zwraca `True`?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.2.text"
msgstr ""

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code0__:
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.piece
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winning_line
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.entry
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.col
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.winner.text"
msgstr ""
"Brawo! To było dość trudne.\n"
"\n"
"Teraz możemy połączyć te trzy funkcje! Napisz funkcję `winner`, która przyjmuje jako argument `board` tak jak wcześniej,\n"
"i zwraca `True`, jeśli `board` zawiera wygrywający rząd, kolumnę lub przekątną, `False` w przeciwnym razie.\n"
"\n"
"Twoje rozwiązanie powinno działać przez wywołanie tych trzech funkcji. `winner` sama nie powinna wykonywać żadnej\n"
"pętli, indeksowania itp.\n"
"\n"
"Oto trochę kodu dla `row_winner`, `column_winner` i `diagonal_winner` wraz z kilkoma testami dla funkcji `winner`.\n"
"Kliknij przycisk Kopiuj i uzupełnij luki dla swojej funkcji `winner`.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingTicTacToe
msgid "pages.IntroducingTicTacToe.title"
msgstr "Wprowadzenie do Kółka i Krzyżyka"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.final_text.text"
msgstr ""
"Odpowiedź brzmi, że `sunshine` wygląda na zmienną, więc Python próbuje "
"znaleźć jej wartość, ale ponieważ nigdy nie zdefiniowaliśmy zmiennej o tej "
"nazwie, otrzymujemy błąd."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.0"
msgstr "sunshine"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.1"
msgstr "'sunshine'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.2"
msgstr "Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.3"
msgstr "'Hello'"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.sunshine_undefined_check.text"
msgstr ""
"Jak widać, cudzysłowy wszystko zmieniają. `'word'` to dosłownie tylko `'word'`, stąd technicznie nazywa się to *literałem string* Z drugiej strony, `word` to zmienna, której wartość może być dowolna.\n"
"\n"
"Podobnie, `'sunshine'` to `'sunshine'`, ale co to jest `__program__` bez cudzysłowów?"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_assign.text"
msgstr ""
"Aby tworzyć interesujące programy, nie możemy zawsze manipulować tymi samymi wartościami. Potrzebujemy sposobu na odniesienie się do wartości, które nie są znane z góry i mogą się zmieniać. To właśnie są *zmienne*.\n"
"\n"
"Uruchom ten kod:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingVariables
msgid ""
"pages.IntroducingVariables.steps.word_check.special_messages.bad_word.text"
msgstr ""
"Ups, musisz ustawić `word = 'Hello'` zanim będziemy mogli kontynuować."

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_check.text"
msgstr ""
"To tworzy zmienną o nazwie `slowo`, która odnosi się do wartości ciągu znaków `'Witaj'`.\n"
"\n"
"Teraz zobacz, co się stanie, gdy uruchomisz `__program__` w konsoli."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid "pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.0"
msgstr "slowo"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid "pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.1"
msgstr "'slowo'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid ""
"pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.2"
msgstr "Witaj"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid ""
"pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.3"
msgstr "'Witaj'"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_string_check.text"
msgstr ""
"Dobrze. Dla porównania, uruchom `__program__` w konsoli z cudzysłowami."

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.title"
msgstr "Wprowadzenie do Zmiennych"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.final_text.text"
msgstr ""
"Opanowałeś zagnieżdżone listy i jak je połączyć z zagnieżdżonymi pętlami.\n"
"Brawo! Teraz masz w swoim arsenale bardzo potężne narzędzia programistyczne."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.0.text"
msgstr "To jest bardzo podobne do poprzedniego ćwiczenia."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.1.text"
msgstr "Kiedy powinieneś wydrukować zmienną boolean?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.2.text"
msgstr "Pamiętaj, że chcesz wydrukować ją tylko raz."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.3.text"
msgstr ""
"Zamiast definiować zmienną boolean dla każdej podlisty, zdefiniuj tylko "
"jedną zmienną boolean dla całej listy."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.4.text"
msgstr "Kiedy i jak powinieneś modyfikować zmienną boolean?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Python%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
msgid "pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text"
msgstr ""
"Dobra robota!\n"
"\n"
"Następnie, wydrukuj tylko jeden boolean, aby wskazać, czy `słowo` jest obecne w jakimkolwiek ciągu całej zagnieżdżonej listy. Na przykład, jeśli\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"twój program powinien wydrukować `False`."

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor.requirements"
msgstr ""
"Uruchom pojedynczy program składający się z dwóch powyższych części połączonych.\n"
"Są one oddzielone, aby nie musieć wpisywać części `numbers = [...]`,\n"
"ale wpisanie części z zagnieżdżoną pętlą jest najlepsze dla nauki.\n"
"Upewnij się, że wcięcia są poprawne."

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor.text"
msgstr ""
"Teraz uruchom ten sam program ponownie w Python Tutor.\n"
"\n"
"Zbadaj, jak wygląda `numbers` i co oznaczają `numbers[0]` aż do `numbers[3]`.\n"
"Spójrz, jak zmieniają się zmienne `sublist` i `num`."

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.requirements"
msgstr ""
"Uruchom pojedynczy program składający się z dwóch powyższych części połączonych.\n"
"Są one oddzielone, aby nie musieć wpisywać części `numbers = [...]`,\n"
"ale wpisanie części z zagnieżdżoną pętlą jest najlepsze dla nauki.\n"
"Upewnij się, że wcięcia są poprawne."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code1__:
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
#.     # __code0__:
#.     numbers = [[1, 2, 3], [4, 5], [6], []]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.num
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sublist
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text"
msgstr ""
"Możesz użyć zagnieżdżonej pętli do iteracji przez każdy element i pod-element zagnieżdżonej listy.\n"
"Na przykład, rozważ taką zagnieżdżoną listę.\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Kliknij przycisk, aby skopiować listę do edytora, a następnie wpisz następującą zagnieżdżoną pętlę.\n"
"\n"
"__code1__\n"
"\n"
"Przyjrzyj się uważnie kodowi. Zauważ, że zewnętrzna pętla tworzy zmienną `sublist`\n"
"i wewnętrzna pętla iteruje przez tę samą zmienną. To jest często używany wzorzec.\n"
"Teraz uruchom kod."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.0.text"
msgstr "Jak sprawdzić, czy ciąg zawiera słowo?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.1.text"
msgstr ""
"Upewnij się, że sprawdzasz, czy **ciąg tekstowy** zawiera słowo, a nie "
"podlista."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.2.text"
msgstr ""
"Jak można uzyskać dostęp do każdego ciągu w każdej podliście zagnieżdżonej "
"listy?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.3.text"
msgstr "Musisz użyć zagnieżdżonej pętli."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.4.text"
msgstr ""
"Pętle powinny podążać za tym samym wzorcem co przykład na początku strony."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello%22
msgid "pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text"
msgstr ""
"Teraz rozwiążmy kilka problemów, używając tego rodzaju pętli.\n"
"\n"
"Załóżmy, że mamy zagnieżdżoną listę ciągów tekstowych jak poniższa,\n"
"i chcemy szukać konkretnego `słowa` głęboko w listy.\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Możesz wyobrazić sobie, że `strings` reprezentuje książkę, gdzie każda podlista to strona i każdy ciąg znaków wewnątrz\n"
"to linia na tej stronie.\n"
"Może to również reprezentować bibliotekę, gdzie każda lista to książka, a każdy ciąg znaków to strona.\n"
"\n"
"Napisz program, który wydrukuje każdy ciąg zawierający `słowo`.\n"
"Powinno to działać dla dowolnego `słowa` i `ciągów`. Dla przykładu powyżej, powinien wydrukować\n"
"\n"
"    cześć tam\n"
"    cześć świat\n"
"\n"
"Pamiętaj, że istnieje konkretny sposób na sprawdzenie, czy ciąg zawiera inny ciąg. Jeśli nie pamiętasz jak, poszukaj w Google!"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.0.text"
msgstr "Dla każdej podlisty zdefiniuj zmienną boolean."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.1.text"
msgstr "Przechodząc przez podlistę, aktualizuj zmienną boolean odpowiednio."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.2.text"
msgstr "Wydrukuj zmienną boolean tylko raz dla każdej podlisty."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.3.text"
msgstr "Jaka powinna być początkowa wartość dla zmiennej boolean?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.4.text"
msgstr ""
"Co jeśli jedna z podlist jest pusta? Co powinieneś wydrukować dla tej "
"podlisty?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.5.text"
msgstr ""
"Jeśli znajdziesz słowo w ciągu, zmienna boolean powinna zostać ustawiona na "
"`True`."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.6.text"
msgstr "Co jeśli ciąg nie zawiera słowa?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.7.text"
msgstr "Nie szkodzi! To nie zmienia faktu, że inny ciąg może zawierać słowo."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.8.text"
msgstr ""
"Innymi słowy, nie ustawiaj zmiennej boolean na `False` oprócz na początku."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#.     # __code1__:
#.     False
#.     True
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text"
msgstr ""
"Super!\n"
"\n"
"Teraz zmieńmy nieco ćwiczenie. Tym razem wyjście powinno powiedzieć nam, które *podlisty* zawierają `słowo`,\n"
"zamiast tego, które wewnętrzne ciągi. W szczególności chcemy wydrukować boolean dla każdej podlisty:\n"
"`True`, jeśli podlista zawiera słowo w którymkolwiek z jej ciągów, `False`, jeśli go tam wcale nie ma.\n"
"\n"
"Mając te przykładowe dane wejściowe:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"twój program powinien wydrukować\n"
"\n"
"__code1__\n"
"\n"
"Zauważ, że `słowo w podlista` nie zadziała. Na przykład, `\"cześć\" w [\"cześć tam\", \"jak się masz\"]` jest `False`\n"
"ponieważ `\"cześć\"` nie jest *równa* żadnemu z dwóch elementów tej listy, mimo że znajduje się w jednym z nich."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.0.text"
msgstr "Ponieważ ciągi mogą mieć różne długości, to jest trochę trudne."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.1.text"
msgstr "Jak długo powinna trwać twoja zewnętrzna pętla tym razem?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.2.text"
msgstr ""
"Zanim zaczniesz obsługiwać ciągi, może być dobrym pomysłem najpierw znaleźć "
"najdłuższą długość ciągu."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.3.text"
msgstr "Reszta jest bardzo podobna do poprzedniego ćwiczenia."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.4.text"
msgstr ""
"Jedyna różnica polega na tym, że teraz musisz zdecydować, czy dodać literę z"
" ciągu, czy spację."

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.text"
msgstr ""
"Świetnie! Jeśli chcesz, możesz już teraz przejść do [następnej strony](#DefiningFunctions).\n"
"Albo możesz spróbować dodatkowego wyzwania!\n"
"\n"
"Teraz uogólnijmy poprzednie ćwiczenie do ciągów o różnej długości. Znowu masz daną listę ciągów tekstowych.\n"
"Tak jak poprzednio, napisz program, który wydrukuje pierwszą literę każdego ciągu razem w jednej linii,\n"
"następnie drugie litery razem w następnej linii i tak dalej.\n"
"Ale tym razem, jeśli ciąg nie ma wystarczającej liczby liter, powinien wydrukować spację.\n"
"\n"
"Na przykład, jeśli\n"
"\n"
"    __no_auto_translate__\n"
"    ciągi = [\"abcqwe\", \"def\", \"ghiq\"]\n"
"\n"
"twój program powinien wydrukować\n"
"\n"
"    afg\n"
"    bdh\n"
"    cei\n"
"    q q\n"
"    w\n"
"    e"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.0.text"
msgstr "To NIE jest podobne do poprzednich ćwiczeń na tej stronie."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.1.text"
msgstr ""
"Pomyśl o rozwiązaniu, gdy są tylko dwa ciągi. Jak możesz uogólnić to do "
"listy ciągów?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.2.text"
msgstr "Musisz przejść przez pierwsze litery, następnie drugie litery itd."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.3.text"
msgstr "Będziesz musiał użyć pętli, ale jak długo powinna trwać pętla?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.4.text"
msgstr "Pamiętaj, że ciągi na liście mają równe długości."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.5.text"
msgstr ""
"Dla każdej pozycji (pierwszej, drugiej itd.) zdefiniuj nowy ciąg tekstowy."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.6.text"
msgstr "Jaki powinien być początkowo ten ciąg tekstowy?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.7.text"
msgstr ""
"Dla każdej pozycji (pierwszej, drugiej itd.) będziesz musiał przejść przez "
"każdy ciąg na liście."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.8.text"
msgstr "Będziesz potrzebował kolejnej pętli wewnątrz tej, którą już masz."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = ["abc", "def", "ghi"]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ghi%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22def%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22abc%22
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text"
msgstr ""
"Świetnie!\n"
"\n"
"[Wcześniej w kursie](#GettingElementsAtPositionExercises) było ćwiczenie\n"
"na wydrukowanie dwóch ciągów tekstowych pionowo, obok siebie, takie jak:\n"
"\n"
"    C Ś\n"
"    z w\n"
"    e i\n"
"    ł a\n"
"    o t\n"
"\n"
"Teraz będziemy to uogólniać do listy ciągów, a nie tylko dwóch.\n"
"\n"
"W tym ćwiczeniu otrzymujesz listę ciągów tekstowych o **równej długości**.\n"
"Napisz program, który wydrukuje pierwszą literę każdego ciągu w jednej linii,\n"
"następnie drugą literę każdego ciągu w następnej linii i tak dalej. Na przykład, jeśli\n"
"\n"
"__code0__\n"
"\n"
"twój program powinien wydrukować\n"
"\n"
"    __no_auto_translate__\n"
"    afg\n"
"    beh\n"
"    cdi\n"
"\n"
"Twój program powinien działać dla dowolnej takiej listy. Szczególnie jeśli użyjesz następującej listy,\n"
"odkryjesz ukrytą wiadomość z Zen Pythona!\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    ciągi = [\"  b n\", \"f ete\", \"liths\", \"astat\", \"t ene\", \"  r d\"]\n"
"\n"
"Zauważ, że tym razem nie powinieneś dodawać spacji między literami w wyjściu."

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.title"
msgstr "Pętla po zagnieżdżonych listach"

#. https://futurecoder.io/course/#MakingTheBoard
#.     # __code2__:
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#.     # __code0__:
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#.     # __code1__:
#.     board.append(row.copy())
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_cube
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.test
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cube
msgid "pages.MakingTheBoard.steps.final_text.text"
msgstr ""
"Brawo!\n"
"\n"
"To mogło zostać rozwiązane przez przeniesienie pierwszej pętli do wewnątrz drugiej, aby stworzyć nowy `row` za każdym razem:\n"
"\n"
"__code0__\n"
"\n"
"Inną metodą jest tworzenie kopii `row` za każdym razem, np. zachowując oryginalny kod, ale zmieniając jedną linię:\n"
"\n"
"__code1__\n"
"\n"
"Możesz również skopiować `row` za pomocą `row[:]` lub `list(row)`. Ale ważne jest, aby wiedzieć, że\n"
"wszystkie te metody tworzą *płytką kopię* listy.\n"
"To znaczy, że kopiują całą listę na najwyższym poziomie, bez tworzenia kopii każdego elementu.\n"
"To jest w porządku w tym przypadku, gdy `row` zawiera tylko ciągi, które nie mogą być modyfikowane\n"
"i nie potrzebują kopiowania. Ale jeśli elementy są mutowalnymi obiektami, takimi jak listy,\n"
"tak jak to ma miejsce z `board`, możesz znów napotkać ten sam problem.\n"
"Oto przykład:\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"Tu każdy element `cube` jest oddzielną listą, kopią `board`.\n"
"I w każdej z tych kopii, każdy element jest również oddzielną listą, kopią `row`.\n"
"Ale płytkie kopie `board` wszystkie mają taki sam pierwszy element względem siebie (pierwszą kopię `row`),\n"
"ten sam drugi element itd.\n"
"Zmiana `make_board` nie naprawi niczego tu, rozwiązaniem jest albo:\n"
"\n"
"- Powtórne wywołanie `make_board` aby stworzyć nową `board` za każdym razem, lub\n"
"- Użycie funkcji `deepcopy` zamiast `board.copy()`.\n"
"  `deepcopy` tworzy kopie na każdym poziomie zagnieżdżonych obiektów.\n"
"\n"
"Jeśli nadal jesteś zdezorientowany, nie martw się.\n"
"To jest tylko przygotowanie do radzenia sobie z dziwnym zachowaniem twojego kodu w przyszłości.\n"
"Nie musisz rozumieć tego teraz i ta lekcja będzie wciąż wartościowa.\n"
"\n"
"Tak czy inaczej, jesteśmy gotowi do stworzenia pełnej gry. Możesz to zrobić!"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.0.text"
msgstr "Istniejący kod jest prawie poprawny."

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.1.text"
msgstr "Jest kilka sposobów na rozwiązanie tego."

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.2.text"
msgstr "Niektóre rozwiązania obejmują dodanie czegoś małego."

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.3.text"
msgstr ""
"Możesz także przearanżować kod bez dodawania lub usuwania czegokolwiek "
"(oprócz spacji)."

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.4.text"
msgstr ""
"Problem polega na tym, że pojedyncza lista `row` jest używana kilka razy."

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.5.text"
msgstr ""
"Więc jednym z rozwiązań jest stworzenie kopii `row`, które będą wszystkie "
"oddzielne."

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.6.text"
msgstr ""
"Inne rozwiązanie to stworzenie nowego `row` od podstaw za każdym razem."

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.7.text"
msgstr ""
"Istnieje kilka sposobów na skopiowanie listy w Pythonie za pomocą "
"niewielkiego fragmentu kodu."

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.8.text"
msgstr ""
"Stworzenie nowego rzędu za każdym razem można zrobić przez przearanżowanie "
"kodu."

#. https://futurecoder.io/course/#MakingTheBoard
msgid ""
"pages.MakingTheBoard.steps.fix_make_board.special_messages.not_separate.text"
msgstr "Jednakże podlisty w wyniku nie są wszystkie oddzielne obiekty."

#. https://futurecoder.io/course/#MakingTheBoard
#.     # __code0__:
#.     board[0][0] = 'X'
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#.     # __code4__:
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#.     # __code1__:
#.     board = [row, row, row]
#.     # __code2__:
#.     board[0][0] = 'X'
#.     # __code3__:
#.     row[0] = 'X'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.MakingTheBoard.steps.fix_make_board.text"
msgstr ""
"Czy widzisz co się stało?\n"
"\n"
"Każdy rząd dostał `'X'` na pierwszej pozycji!\n"
"To tak, jakby kod faktycznie zrobił to:\n"
"\n"
"__code0__\n"
"\n"
"Spróbuj samodzielnie rozgryźć co jest źle.\n"
"Ale ponownie, to jest zawiłe, więc nie zwariuj na tym punkcie.\n"
"\n"
"Jeśli chcesz, oto kilka wskazówek:\n"
"\n"
" - Przetestuj kod w debugerach.\n"
" - Eksperymentuj. Dokonuj zmian w kodzie i sprawdź co się stanie.\n"
" - Nie, kod nie zrobił 3 przypisań, jak sugerowałem wyżej. Było tylko jedno przypisanie listy.\n"
" - Nie ma żadnych ukrytych pętli ani niczego podobnego.\n"
" - Ile list zawiera `board`? 3?\n"
" - Poprzednia strona zawiera subtelną wskazówkę co się stało.\n"
" - Jest strona z poprzedniego rozdziału, gdzie ten rodzaj problemu jest wyjaśniony bezpośrednio.\n"
" - W szczególności [ta strona](#EqualsVsIs).\n"
" - Próbuj uruchomić kod z Python Tutor.\n"
"\n"
"OK, jeśli jesteś gotowy, oto odpowiedź.\n"
"\n"
"Lista `row` została stworzona tylko raz i używana wiele razy.\n"
"`board` zawiera tę samą listę trzy razy. Nie kopie, tylko jedna lista w trzech miejscach.\n"
"To tak, jakby zrobił to:\n"
"\n"
"__code1__\n"
"\n"
"Co oznacza, że ten kod:\n"
"\n"
"__code2__\n"
"\n"
"jest równoważny:\n"
"\n"
"__code3__\n"
"\n"
"który wpływa 'na wszystkie listy' w `board`, ponieważ wszystkie są tylko jedną listą `row`.\n"
"Innymi słowy, powyższa linia jest *również* równoważna każdej z tych dwóch linii:\n"
"\n"
"__code4__\n"
"\n"
"ponieważ `row` jest `board[0]`, `board[1]` i `board[2]` naraz.\n"
"\n"
"Twoim zadaniem teraz jest naprawienie `make_board` aby nie miał tego problemu.\n"
"Powinien nadal zwracać listę o długości `size` gdzie każdy\n"
"element jest również listą o długości `size` gdzie każdy element jest stringiem `' '`.\n"
"Podlisty powinny być osobnymi obiektami list, a nie tą samą\n"
"listą powtórzoną."

#. https://futurecoder.io/course/#MakingTheBoard
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MakingTheBoard.steps.naive_make_board.text"
msgstr ""
"Do tej pory plansza była dostarczana jako zagnieżdżona lista.\n"
"Ale do pełnego programu musisz ją stworzyć sam.\n"
"To powinno być proste, prawda? Oto kod do tego:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Jest blisko, ale jest z nim subtelny problem.\n"
"Upewnij się, że rozumiesz kod,\n"
"i punkty dodatkowe, jeśli znajdziesz błąd!\n"
"Jeśli nie, nie czuj się źle ani nie trać zbytnio czasu."

#. https://futurecoder.io/course/#MakingTheBoard
msgid "pages.MakingTheBoard.title"
msgstr "Tworzenie Planszy"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.final_text.text"
msgstr ""
"Żeby powtórzyć, ***nigdy nie modyfikuj czegoś podczas iteracji nad tym***. Twoje opcje to:\n"
"\n"
"- Modyfikuj kopię\n"
"- Iteruj przez kopię\n"
"- Nie modyfikuj niczego, zamiast tego stwórz nową wersję."

#. https://futurecoder.io/course/#ModifyingWhileIterating
#.     # __code1__:
#.     for number in numbers.copy():
#.     # __code0__:
#.     for number in numbers:
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.ModifyingWhileIterating.steps.make_copy.requirements"
msgstr ""
"Uruchom ten sam program co wyżej, ale zmień drugą linię:\n"
"\n"
"__code0__\n"
"\n"
"na:\n"
"\n"
"__code1__\n"
"\n"
"czyli dodaj `.copy()` po `numbers`, ale przed `:`."

#. https://futurecoder.io/course/#ModifyingWhileIterating
#.     # __code0__:
#.     for number in numbers.copy():
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
msgid "pages.ModifyingWhileIterating.steps.make_copy.text"
msgstr ""
"Ale okazuje się, że robi to niemal to samo - nie kończy się błędem, ale nadal nie usuwa 7 ani 3.\n"
"Dzieje się tak z tego samego powodu - iteracja przez listę wciąż odbywa się pod spodem przez indeksy.\n"
"\n"
"Morale z tego jest takie, aby ***nigdy nie modyfikować czegoś, podczas iteracji nad tym***. Trzymaj mutację i pętle oddzielnie.\n"
"\n"
"Dobra wiadomość jest taka, że istnieje wiele sposobów na rozwiązanie tego. Możesz zamiast tego po prostu iterować przez kopię, jak tutaj:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.make_copy2.text"
msgstr ""
"Teraz lista, która jest modyfikowana i lista, która jest iterowana, to oddzielne obiekty, nawet jeśli zaczynają z równą zawartością.\n"
"\n"
"Podobnie, możesz iterować przez oryginał i modyfikować kopię:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.make_new_list.text"
msgstr ""
"Albo możesz zbudować nową listę od zera. W tym przypadku już zrobiliśmy coś podobnego w ćwiczeniu:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.remove_instead_of_pop.text"
msgstr ""
"W trakcie działania programu widać, że pomija on bez nawet patrzenia na 7 lub 3 i nie usuwa ich. Na końcu kończy się niepowodzeniem, kiedy próbuje uzyskać dostęp do indeksu, który jest za wysoki. Czy rozumiesz, dlaczego się tak dzieje?\n"
"\n"
"Zmienna indeksowa `i` przechodzi przez typowe wartości 0, 1, 2, ... jak powinna, ale w miarę zmiany listy te pozycje już nie są tymi, których chcemy. Na przykład w pierwszej iteracji `i` jest 0 i `number` to 10, który zostaje usunięty. Przesuwa to pozostałe numery o jedną pozycję w lewo, więc teraz 7 jest na pozycji 0. Ale w następnej iteracji `i` jest 1, a `numbers[i]` to 8. 7 został pominięty.\n"
"\n"
"Moglibyśmy spróbować napisać program używając `remove` zamiast `pop`, aby nie korzystać z indeksów. Nawet wygląda to ładniej w ten sposób.\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor.text"
msgstr ""
"Rozważ ten program. Przeszukuje on listę numerów i usuwa te mniejsze niż 10. Przynajmniej próbuje to zrobić.\n"
"Uruchom go z Python Tutor.\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(pamiętaj, że `numbers.pop(i)` usuwa element z `numbers` o indeksie `i`)"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.title"
msgstr "Modyfikowanie podczas Iteracji"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.0.text"
msgstr ""
"Twoje rozwiązanie powinno zawierać dokładnie trzy instrukcje: `x = [15, 12, "
"-6, 3]`, `y = ` stanowione przez jedną linię dokładnie skopiowaną z listy, i"
" `print(y)`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.1.text"
msgstr ""
"Jeśli nie jesteś pewien, sprawdź, jak oblicza się średnią/średnią "
"arytmetyczną."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.2.text"
msgstr "Do obliczenia średniej liczb w `x` potrzebujemy dwóch rzeczy."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.3.text"
msgstr "Które dwie funkcje/metody dają ci te dwie rzeczy?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.4.text"
msgstr "Jak połączyć te dwie rzeczy, aby obliczyć średnią?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.requirements"
msgstr ""
"Skopiuj trzy linie powyżej, a następnie zastąp "
"`(insert_one_line_from_above)` dokładnie jedną linią z długiej listy linii "
"powyżej. Środkowa linia powinna nadal zaczynać się od `y = `."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     x = [15, 12, -6, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.text"
msgstr ""
"Świetna praca! Do następnego ćwiczenia zacznij od tego niekompletnego programu:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Zastąp partię po `y = ` jedną linią z listy powyżej.\n"
"Końcowy program powinien wydrukować średnią (technicznie *średnią arytmetyczną*) liczb w `x`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.0.text"
msgstr ""
"Twoje rozwiązanie powinno zawierać dokładnie trzy instrukcje: `x = ['a', "
"'b', 'c']`, `y = ` stanowione przez jedną linię dokładnie skopiowaną z "
"listy, i `print(y)`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.1.text"
msgstr "Kiedy `1 in x` jest prawdziwe?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.2.text"
msgstr "Kiedy `1` jest w `x`!"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.3.text"
msgstr "Może to być, że `1` jest na `x` raz, albo dwa razy, albo trzy razy..."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.4.text"
msgstr "...ale nie zero razy!"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.requirements"
msgstr ""
"Skopiuj trzy linie powyżej, a następnie zastąp `1 in x` dokładnie jedną "
"linią z długiej listy linii powyżej. Środkowa linia powinna nadal zaczynać "
"się od `y = `. Wybrana linia powinna mieć taki sam efekt jak `1 in x`, aby "
"program wydrukował `True`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     sum(len(x))
#.     sum(range(x))
#.     sum(range(len(x)))
#.     sum(len(range(x)))
#.     sum(range(x)) + 1
#.     sum(range(x + 1))
#.     sum(x) / len(x)
#.     sum(x) / range(x)
#.     sum(x) / range(len(x))
#.     sum(x) / len(range(x))
#.     sorted(x)[1]
#.     sorted(x)[2]
#.     sorted(x)[-1]
#.     sorted(x)[-2]
#.     x.count(1) >= 0
#.     x.count(1) > 0
#.     x.count(1) > 1
#.     # __code1__:
#.     x = [1, 2, 0, 3]
#.     y = 1 in x
#.     print(y)
msgid "pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.text"
msgstr ""
"Możesz rozpoznać niektóre z nich z poprzednich ćwiczeń. Zapewniam, że te ćwiczenia nie były bezcelowe,\n"
"ponieważ nauczyłeś się teraz cennych podstawowych umiejętności. Na przykład, możesz użyć `in` do sprawdzenia, czy lista zawiera 5,\n"
"ale nie ma podobnie łatwego sposobu na sprawdzenie, czy jest liczba większa niż 5.\n"
"\n"
"Teraz rozwiążesz kolejny zestaw czterech ćwiczeń dotyczących tych nowych pojęć.\n"
"Znowu, poprawne i niepoprawne linie kodu są ze sobą wymieszane,\n"
"i musisz wybrać poprawną linię z listy.\n"
"\n"
"__code0__\n"
"\n"
"Oto program:\n"
"\n"
"    __copyable__\n"
"__code1__\n"
"\n"
"Zastąp część `1 in x` (zostaw `y = `) jedną linią z listy powyżej, która robi to samo."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     some_list.count(value)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text"
msgstr ""
"**`count`**: Zwraca liczbę wystąpień argumentu na liście używając składni\n"
"\n"
"__code0__\n"
"\n"
"Na przykład uruchom tę linię w powłoce:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.steps.final_text.text"
msgstr "Gratulacje! Jesteś teraz mistrzem metod i funkcji list!"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     value in some_list
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text"
msgstr ""
"**`in`**: Operator porównania, który sprawdza, czy wartość znajduje się na liście, używając składni\n"
"\n"
"__code0__\n"
"\n"
"Na przykład uruchom ten program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.0.text"
msgstr ""
"Twoje rozwiązanie powinno zawierać dokładnie trzy instrukcje: `x = [12, -6, "
"2, -1, 3]`, `y = ` stanowione przez jedną linię dokładnie skopiowaną z "
"listy, i `print(y)`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.1.text"
msgstr ""
"Liczby w `x` wydają się być wszystkie pomieszane. Czy możesz z tym coś "
"zrobić?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.2.text"
msgstr ""
"Jeśli to zrozumiałeś, spróbuj użyć tej funkcji w powłoce, aby pobawić się "
"nią."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.3.text"
msgstr ""
"Jak użyjesz tej funkcji, aby uzyskać najmniejszą wartość na liście? A "
"największą?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.4.text"
msgstr "Potem jak możesz uzyskać *drugą* najmniejszą wartość?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.requirements"
msgstr ""
"Skopiuj trzy linie powyżej, a następnie zastąp "
"`(insert_one_line_from_above)` dokładnie jedną linię z długiej listy linii "
"powyżej. Środkowa linia powinna nadal zaczynać się od `y = `."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     x = [12, -6, 2, -1, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.text"
msgstr ""
"Doskonale. I ostatnie:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Zastąp partię po `y = ` jedną linią z listy powyżej.\n"
"Końcowy program powinien wydrukować *drugą najmniejszą wartość* w `x`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     sorted(some_list)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.MoreListFunctionsAndMethods.steps.sorted_predict_exercise.text"
msgstr ""
"Oto kilka bardziej użytecznych funkcji/metod.\n"
"\n"
"**`sorted`**: Bierze iterowalny obiekt i zwraca listę elementów w kolejności od najmniejszego do największego, używając składni\n"
"\n"
"__code0__\n"
"\n"
"Na przykład uruchom tę linię w powłoce:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     sum(some_list)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.MoreListFunctionsAndMethods.steps.sum_predict_exercise.text"
msgstr ""
"**`sum`**: Sumuje iterowalny zbiór liczb używając składni\n"
"\n"
"__code0__\n"
"\n"
"Na przykład uruchom tę linię w powłoce:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.0.text"
msgstr ""
"Twoje rozwiązanie powinno zawierać dokładnie trzy instrukcje: `x = 100`, `y "
"= ` stanowione przez jedną linię dokładnie skopiowaną z listy, i `print(y)`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.1.text"
msgstr "Jaką funkcję/metodę można użyć do sumowania rzeczy?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.2.text"
msgstr "Która funkcja/metoda daje nam liczby `1, 2, 3, ..., x`?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.3.text"
msgstr ""
"Musisz wprowadzić małą zmianę, inaczej ta ostatnia liczba `x` zostanie "
"pominięta."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.requirements"
msgstr ""
"Skopiuj trzy linie powyżej, a następnie zastąp "
"`(insert_one_line_from_above)` dokładnie jedną linię z długiej listy linii "
"powyżej. Środkowa linia powinna nadal zaczynać się od `y = `."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     x = 100
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.text"
msgstr ""
"Dobra robota! Do następnego ćwiczenia zacznij od tego niekompletnego programu:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Zastąp partię po `y = ` jedną linią z listy powyżej.\n"
"Końcowy program powinien wydrukować wynik sumowania wszystkich liczb od `1` do `x` włącznie, czyli `1 + 2 + 3 + ... + x`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.title"
msgstr "Więcej Funkcji i Metod List"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.break_vs_return.requirements"
msgstr ""
"Uruchom ten sam kod co w poprzednim kroku, ale zastąp całą ostatnią linię "
"funkcji (`return letter`) tylko instrukcją `break`."

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.break_vs_return.text"
msgstr ""
"Jak już wcześniej, `return` ***zatrzymuje całą funkcję***, łącznie z wszelkimi pętlami.\n"
"\n"
"Wcześniej pokazywaliśmy [jak zatrzymać pętlę za pomocą `break`](#UsingBreak).\n"
"Zmien `return letter` na `break` i zobacz jaka jest różnica."

#. https://futurecoder.io/course/#MoreOnReturn
#.     # __code0__:
#.     if condition:
#.         return value1
#.     else:
#.         return value2
#.     # __code1__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.condition
msgid "pages.MoreOnReturn.steps.cannot_return_multiple_values.text"
msgstr ""
"Po wykonaniu instrukcji `return`, funkcja zostaje zakończona, a dalsza część kodu jest ignorowana.\n"
"Oznacza to, że jakikolwiek kod bezpośrednio po `return` w tym samym bloku jest *nieosiągalny*:\n"
"`return 2` nigdy nie może zostać osiągnięty, bez względu na to, ile razy uruchomimy tę funkcję!\n"
"\n"
"***Tylko jeden `return` może być wykonany na wywołanie funkcji, a następnie wykonywanie zostaje zatrzymane.***\n"
"\n"
"Wielokrotne instrukcje `return` mogą być jednak użyteczne, jeśli są stosowane we właściwy sposób, np. w bloku `if-else`:\n"
"\n"
"__code0__\n"
"\n"
"Typowym błędem jest niezrozumienie działania `return` w pętlach `for`. Wypróbuj następujący kod:\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#MoreOnReturn
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MoreOnReturn.steps.double_return_in_one_function.text"
msgstr ""
"Czasami słowo kluczowe `return` może być źródłem zamieszania i błędów wśród początkujących.\n"
"Nauczmy się więcej na ten temat.\n"
"\n"
"Uruchom ten kod:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.final_text.text"
msgstr ""
"W przeciwieństwie do `return`, `break` zatrzymuje tylko najbardziej wewnętrzną pętlę, w której jest użyty, w tym przypadku `for number in range(3):`.\n"
"Oto, co dokładnie się dzieje:\n"
"\n"
"- Dla `letter = b`, linia `print(f\"{letter} {number}\")` jest wykonana tylko dla `number = 0`,\n"
"- następnie wewnętrzna pętla jest zatrzymywana przez `break`, ale\n"
"- zewnętrzna pętla kontynuuje swoje wykonanie, przechodząc do następnej litery `c`\n"
"- która jest wykonywana w pełni, ponieważ nie powoduje aktywacji instrukcji `break`."

#. https://futurecoder.io/course/#MoreOnReturn
#.     # __code0__:
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#.     # __code1__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.doubles
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double_numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.MoreOnReturn.steps.return_ends_whole_function.text"
msgstr ""
"Na pierwszy rzut oka może się wydawać intuicyjne, by `return` zwracał jedną wartość dla każdej iteracji w pętli `for`.\n"
"Ale to nie działa w ten sposób!\n"
"Jeśli przeanalizujesz kod za pomocą `snoop` lub Python tutor, zobaczysz, że funkcja zwraca 2 w pierwszej\n"
"iteracji pętli, a następnie kończy się natychmiast.\n"
"\n"
"Nawet gdy jest tylko jedna instrukcja `return`, zostanie ona wykonana tylko raz i zwróci jedną wartość.\n"
"Jeśli chcesz zwrócić kilka wartości, zwróć listę:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Co się stanie, jeśli są zagnieżdżone pętle? Wypróbuj następującą funkcję:\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.title"
msgstr "`return` kończy wywołanie funkcji"

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.steps.final_text.text"
msgstr ""
"Więc jeśli dostaniesz tajemniczy `SyntaxError`, upewnij się, że nie "
"podzieliłeś linii w niewłaściwy sposób!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.invalid_multiline
msgid "pages.MultiLineExpressions.steps.invalid_multiline.program"
msgstr ""
"is_friend = name == \"Alice\" lub\n"
"            name == \"Bob\""

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.steps.invalid_multiline.text"
msgstr ""
"Nasze linie kodu zaczynają być dość długie.\n"
"Na szczęście Python oferuje kilka sposobów na podzielenie jednego polecenia na wiele linii,\n"
"ale nie dzieje się to automatycznie. Musisz się upewnić, że Python rozumie, że właśnie to robisz.\n"
"Na przykład, ten kod jest nieprawidłową składnią i spowoduje błąd:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MultiLineExpressions
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MultiLineExpressions.steps.valid_multiline.text"
msgstr ""
"Python próbuje zinterpretować to jako dwie oddzielne linie kodu i się gubi. Musisz mu powiedzieć, że\n"
"pierwsza linia kontynuuje się na drugiej linii.\n"
"\n"
"Jednym ze sposobów jest dodanie `\\` na końcu linii, aby 'uciec' przed podziałem linii.\n"
"\n"
"Innym sposobem jest upewnienie się, że podział linii jest zawarty w jakimś rodzaju nawiasów. Wtedy kontynuacja linii\n"
"jest domyślna, ponieważ Python będzie czekał, aż wszystkie nawiasy zostaną zamknięte zanim\n"
"uzna linię za kompletną. Jeśli już masz nawiasy, na przykład dlatego, że wywołujesz funkcję\n"
"lub tworzysz listę, możesz nie musieć nic robić! W przeciwnym wypadku możesz dodać nawiasy do dowolnego wyrażenia\n"
"aby zasugerować kontynuację linii.\n"
"\n"
"Oto kilka przykładów. Zwróć szczególną uwagę na detale.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.title"
msgstr "Wieloliniowe instrukcje"

#. https://futurecoder.io/course/#NavigatingShellHistory
msgid "pages.NavigatingShellHistory.steps.final_text.text"
msgstr ""
"Oto wskazówka: często będziesz chciał ponownie uruchomić wcześniej "
"wprowadzony kawałek kodu lub jego nieco zmodyfikowaną wersję. Możesz "
"skopiować i wkleić, ale to żmudne i przeszkadza w eksperymentowaniu. Lepszą "
"metodą jest naciśnięcie klawisza ze strzałką w górę na klawiaturze. "
"Spowoduje to wstawienie poprzedniej linii kodu do powłoki. Kontynuuj "
"naciskanie, aby cofnąć się dalej w historii, a jeśli przejdziesz za daleko, "
"naciśnij klawisz ze strzałką w dół, aby przejść w drugą stronę. Teraz "
"spróbuj tak zrobić."

#. https://futurecoder.io/course/#NavigatingShellHistory
msgid "pages.NavigatingShellHistory.title"
msgstr "Poruszanie się po historii powłoki"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.steps.final_text.text"
msgstr ""
"Świetnie! Jesteś prawie gotowy, żeby to wszystko ze sobą połączyć, idź "
"dalej!"

#. https://futurecoder.io/course/#NestedListAssignment
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NestedListAssignment.steps.modify_list_in_function.text"
msgstr ""
"Widzieliśmy już, jak uzyskać dane wejściowe od użytkownika, teraz użyjmy tego do faktycznegorozmieszczania elementów na planszy i granie w grę. Na początek wypróbuj ten kod:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.0.text"
msgstr ""
"Twoja funkcja musi wywołać `input()` dwa razy. Dane wejściowe nie są "
"przekazywane do `play_move` jako argument."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.1.text"
msgstr "`input()` zawsze zwraca ciąg znaków."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.10.text"
msgstr ""
"Kiedy masz już dwie liczby, musisz zmodyfikować zagnieżdżoną listę `board` "
"przy pomocy nich."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.11.text"
msgstr "Kod do tego został ci pokazany powyżej."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.12.text"
msgstr ""
"Wystarczy użyć liczb z wejścia użytkownika zamiast zakodowanego na sztywno 1"
" i 0."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.13.text"
msgstr ""
"Możesz użyć zagnieżdżonego indeksowania w jednej linii lub zrobić to w dwóch"
" krokach."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.2.text"
msgstr ""
"Ciąg znaków wyglądający jak liczba jest nadal ciągiem znaków, a nie liczbą."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.3.text"
msgstr "Indeksy listy muszą być liczbami, a nie ciągami znaków."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.4.text"
msgstr ""
"Jeśli plansza ma rozmiar 3x3, użytkownik może wprowadzić 1, 2 lub 3 dla "
"każdej współrzędnej."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.5.text"
msgstr "Jakie są prawidłowe indeksy listy o długości 3?"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.6.text"
msgstr "Musisz zamienić wejściowe 1, 2 lub 3 na 0, 1 lub 2."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.7.text"
msgstr ""
"Musisz także umieć obsłużyć większe plansze, takie jak 9x9 lub większe."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.8.text"
msgstr "Nie możesz robić matematyki na ciągach znaków, tylko na liczbach."

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.9.text"
msgstr "Jak możesz przekształcić ciąg znaków w liczbę?"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.steps.nested_assignment_input.requirements"
msgstr ""
"Twoja funkcja powinna zmodyfikować argument `board`. Nie ma potrzeby, aby "
"`return` albo `print` coś."

#. https://futurecoder.io/course/#NestedListAssignment
#.     # __code3__:
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#.     # __code0__:
#.     row = board[1]
#.     row[0] = player
#.     # __code1__:
#.     board[1][0] = player
#.     # __code2__:
#.     2
#.     1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_game
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.first_row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_move
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5CnX+to+play%3A%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5CnO+to+play%3A%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_rows
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%5Cn%22
msgid "pages.NestedListAssignment.steps.nested_assignment_input.text"
msgstr ""
"Te dwie linijki:\n"
"\n"
"__code0__\n"
"\n"
"mogą być połączone w jedną:\n"
"\n"
"__code1__\n"
"\n"
"Dwa kawałki kodu są praktycznie równoznaczne. Python najpierw oblicza\n"
"`board[1]`, aby *uzyskać* wewnętrzną listę, podczas gdy `[0] = ...` ustawia element `board[1]`.\n"
"Możesz zobaczyć wartość `board[1]` w `birdseye`, ponieważ jest to wyrażenie,\n"
"i możesz je faktycznie zastąpić dowolnym innym wyrażeniem.\n"
"\n"
"Teraz wiesz, jak ustawiać elementy w zagnieżdżonych listach, czas zrobić to interaktywnie!\n"
"Napisz swoją własną wersję funkcji `play_move`, która przyjmuje dane wejściowe od użytkownika\n"
"by określić, gdzie grać, zamiast zawsze grać na `board[1][0]`.\n"
"Funkcja powinna wywołać `input()` dwa razy, aby użytkownik mógł podać wiersz i kolumnę\n"
"jako dwie oddzielne liczby. Ponadto nasi użytkownicy nie są programistami, więc zaczynają liczyć od 1,\n"
"nie od 0.\n"
"\n"
"Na przykład, jeśli użytkownik wpisze te dane wejściowe:\n"
"\n"
"__code2__\n"
"\n"
"to oznacza, że chce zagrać ruch w drugim wierszu i pierwszej kolumnie, co jest tym samym\n"
"co w naszym oryginalnym przykładzie.\n"
"\n"
"Oto jakieś początkowe kody:\n"
"\n"
"    __copyable__\n"
"__code3__\n"
"\n"
"To wywołuje funkcję `play_move` dwa razy, więc użytkownik będzie musiał wprowadzić dwie pary liczb.\n"
"Oto przykład, jak powinna wyglądać gra:\n"
"\n"
"     123\n"
"    1\n"
"    2\n"
"    3\n"
"\n"
"    X do gry:\n"
"\n"
"__code2__\n"
"     123\n"
"    1\n"
"    2X\n"
"    3\n"
"\n"
"    O do gry:\n"
"\n"
"    1\n"
"    3\n"
"     123\n"
"    1  O\n"
"    2X\n"
"    3\n"
"\n"
"Nie musisz używać podanego kodu dosłownie, to tylko ma dać ci wyobrażenie, co się dzieje.\n"
"Co ważne, twoja funkcja `play_move` musi poprawnie modyfikować argument `board`.\n"
"Nie musi niczego zwracać ani drukować, to nie będzie sprawdzane.\n"
"\n"
"Możesz założyć, że użytkownik zawsze wprowadzi prawidłowe liczby. Później nauczymy się, jak radzić sobie\n"
"z nieprawidłowymi danymi wejściowymi, takimi jak liczby poza zakresem lub dane, które w ogóle nie są liczbami."

#. https://futurecoder.io/course/#NestedListAssignment
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NestedListAssignment.steps.nested_assignment_two_lines.text"
msgstr ""
"Zauważ, jak wywołanie `play_move(game_board, 'X')` *modyfikuje* bezpośrednio `game_board`.\n"
"Zmienna `board` wewnątrz wywołania funkcji `play_move` i\n"
"zmienna `game_board` wewnątrz wywołania `play_game` wskazują na ten sam obiekt listy. \n"
"Nie ma kopiowania. Python Tutor dobrze to pokazuje za pomocą strzałek.\n"
"\n"
"To również oznacza, że w tym przypadku nie ma potrzeby, aby `play_move` zwracało cokolwiek,\n"
"wystarczy, że funkcja zmodyfikuje `board`, a wywołujący (w tym przypadku `play_game`) zobaczy efekt.\n"
"\n"
"Jednak nasza plansza jest dwuwymiarowa, reprezentowana przez zagnieżdżoną listę.\n"
"Więc musimy przypisać `player` do elementu listy wewnętrznej, coś takiego:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.title"
msgstr "Przypisanie Zagnieżdżonej Listy: Umieszczanie Ruchów na Planszy"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid ""
"pages.NewlinesAndFormatBoard.steps.discovering_newline.special_messages.bad_string.text"
msgstr ""
"Ups, łańcuch `string` nie ma właściwej wartości. Uruchom ponownie program z "
"poprzedniego kroku."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.steps.discovering_newline.text"
msgstr ""
"Huraa! *Potrójny cytowany łańcuch* może się rozciągać przez wiele linii i one będą pokazane w wyjściu.\n"
"\n"
"Podobnie jak pojedyncze i podwójne cudzysłowy, potrójne cudzysłowy to po prostu inny rodzaj notacji, nie nowy rodzaj łańcucha.\n"
"`\"\"\"abc\"\"\"` to to samo co `\"abc\"`.\n"
"\n"
"Jednakże łańcuch `string` zawiera coś nowego. Uruchom `__program__` w konsoli, aby zobaczyć."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.steps.final_text.text"
msgstr ""
"Świetna robota! To było całkiem trudne.\n"
"\n"
"Teraz opanowałeś budowanie łańcucha znaków z wieloma liniami tekstu i rozwiązałeś problem wyświetlania planszy graczom.\n"
"\n"
"Następnie dowiesz się więcej o typach w Pythonie i jak je konwertować, oraz jak uzyskać dane wejściowe od graczy.\n"
"Jesteś już w połowie drogi do zakończenia projektu. Kontynuuj!"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.0.text"
msgstr ""
"Są dwa typy linii do wyświetlenia: jeden typ łączy elementy symbolem `|` "
"pomiędzy nimi, drugi typ łączy symbole `-` z `+` pomiędzy nimi."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.1.text"
msgstr "Oba te typy linii można zbudować używając odpowiednio `join`."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.10.text"
msgstr ""
"Następnie zastosuj `join` do tej listy, używając linii `+-` jako separatora."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.11.text"
msgstr ""
"Aby poprawnie dodać znaki nowej linii do linii `+-`, spojrzyj na przypadek "
"testowy, który dostarczyliśmy."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.2.text"
msgstr ""
"Na przykład, jak możesz przekształcić rząd `['X', 'O', 'X']` w `'X|O|X'` "
"używając `join`?"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.3.text"
msgstr ""
"Podobnie, jak możesz uzyskać `'-+-+-'` używając `join`? Do jakiej listy "
"powinieneś zastosować `join`?"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.4.text"
msgstr ""
"Gdy już zrozumiesz, jak zbudować oba typy linii, jak możesz je połączyć, aby"
" uzyskać ostateczny wynik?"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.5.text"
msgstr "Zauważ, że linie z `+-` zawsze są takie same."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.6.text"
msgstr ""
"I jest jedna linia z `+-` rozdzielająca każdą parę kolejnych linii z "
"elementami."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.7.text"
msgstr "Możesz użyć `join` na samych liniach!"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.8.text"
msgstr ""
"Linie z elementami można połączyć razem z linią `+-` pomiędzy nimi (dodając "
"nowe linie w odpowiednich miejscach)."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.9.text"
msgstr ""
"Żeby zrobić to, musisz najpierw przechowywać linie z elementami w liście "
"podczas ich budowania."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#.     # __code3__:
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#.     # __code1__:
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#.     # __code2__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         [' ', 'O', 'O'],
#.         [' ', 'X', ' ']
#.     ]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27X%7CO%7CX%5Cn-%2B-%2B-%5CnO%7C+%7C+%5Cn-%2B-%2B-%5Cn+%7CX%7CO%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_rows
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%5Cn%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text"
msgstr ""
"Świetnie! Typowe rozwiązanie wygląda tak:\n"
"\n"
"__code0__\n"
"\n"
"Jeśli wyszukałeś, jak działa `join` i użyłeś go w swoim rozwiązaniu, to świetnie!\n"
"Możesz to rozwiązać w sposób podobny do tego:\n"
"\n"
"__code1__\n"
"\n"
"Jeśli chcesz, możesz teraz przejść do [następnej strony](#Types). Albo możesz podjąć dodatkowe wyzwanie!\n"
"\n"
"Napisz ulepszoną wersję `format_board`, która pokaże separatory rzędów i kolumn. Na przykład, jeśli\n"
"\n"
"__code2__\n"
"\n"
"wtedy `print(format_board(board))` powinno wydrukować\n"
"\n"
"    X|O|X\n"
"    -+-+-\n"
"     |O|O\n"
"    -+-+-\n"
"     |X|\n"
"\n"
"Raz jeszcze powinno to działać dla kwadratowej `board` *dowolnego rozmiaru*.\n"
"\n"
"Zachęcamy do użycia `join` w tym ćwiczeniu. Podajemy jeden test jak poprzednio, możesz napisać dodatkowe testy:\n"
"\n"
"    __copyable__\n"
"__code3__"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.0.text"
msgstr ""
"Dokładnie przyjrzyj się dostarczonemu przez nas przypadkowi testowemu. "
"Pokazuje on wszystko, co potrzebujesz!"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.1.text"
msgstr ""
"Musisz zbudować łańcuch dla całej planszy. Zacznij od pustego łańcucha."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.2.text"
msgstr "Dla każdego rzędu dodaj znaki z tego rzędu do łańcucha."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.3.text"
msgstr "Będziesz potrzebował pętli zagnieżdżonej."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.4.text"
msgstr ""
"Gdy dotrzesz do końca rzędu, musisz dodać znak nowej linii przed następnym "
"rzędem."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.5.text"
msgstr ""
"`'\\n'` jest tak jak inne znaki! Możesz dodać go jak zwykle przy użyciu `+`."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.6.text"
msgstr "Zauważ, że koniec ostatniego rzędu jest inny niż pozostałych."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.7.text"
msgstr ""
"Zanim dodasz nową linię, będziesz musiał sprawdzić, czy to ostatni rząd, czy"
" nie."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.8.text"
msgstr "Twoja zewnętrzna pętla powinna przejść przez długość planszy."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.9.text"
msgstr "Następnie sprawdź, czy jesteś na ostatniej pozycji, czy nie."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27XOX%5CnO++%5Cn+XO%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.text"
msgstr ""
"Teraz użyj znaku nowej linii, aby napisać funkcję `format_board` (twoje rozwiązanie powinno działać dla kwadratowej `board` dowolnego rozmiaru):\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NewlinesAndFormatBoard.steps.introducing_newline.text"
msgstr ""
"Oto sekret!\n"
"\n"
"`\\n` reprezentuje znak ***nowej linii***. To jest po prostu inny znak, tak jak litera czy spacja (`' '`).\n"
"To jest znak między dwoma oddzielnymi liniami, które wpisujesz naciskając Enter na klawiaturze.\n"
"\n"
"Znowu, `\\n` *reprezentuje* znak nowej linii wewnątrz literału łańcucha Pythona.\n"
"Łańcuch rzeczywiście nie zawiera `\\` i `n`, zawiera tylko jeden znak. Sprawdź to w konsoli:\n"
"\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string
msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.program"
msgstr ""
"assert_equal(\n"
"    format_board([\n"
"        ['X', 'O', 'X'],\n"
"        [' ', 'O', 'O'],\n"
"        [' ', 'X', ' ']\n"
"    ]),\n"
"    \"XOX\n"
"      OO\n"
"      X \"\n"
")"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code1__:
#.     def format_board(board):
#.         ...
#.         return ...
#.     assert_equal(format_board([...]), "...")
#.     # __code0__:
#.     assert_equal(print_board([...]), "...")
#.     # __code2__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text"
msgstr ""
"To dobry początek, ale idealnie chcielibyśmy funkcję, która *zwraca* łańcuch znaków zamiast go wyświetlać.\n"
"W ten sposób inny kod może w łatwy sposób wykorzystać ten łańcuch w różnych sposobach. Możemy chcieć manipulować łańcuchem\n"
"(np. rysować dookoła niego ramkę lub wyodrębnić tylko pierwsze kilka linii), możemy chcieć wysłać go gdzieś innego niż na ekran\n"
"(np. do pliku) i w tym konkretnym przypadku chcemy móc go przetestować przy użyciu `assert_equal`. To nie działa:\n"
"\n"
"__code0__\n"
"\n"
"ponieważ `print_board` nie używa `return`, więc domyślnie zwraca `None`.\n"
"Zamiast tego chcemy kodu w stylu:\n"
"\n"
"__code1__\n"
"\n"
"Wtedy `print(format_board(board))` powinno wydrukować coś podobnego do tego, co widzieliśmy na początku.\n"
"Ale jak zwracamy łańcuch ze znakami nowych linii? I jak go przetestować? Chcielibyśmy zrobić coś takiego:\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"Zobacz sam, jak to nie działa."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes
msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.program"
msgstr ""
"string = \"\"\"First line\n"
"Second line\"\"\"\n"
"print(string)"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.text"
msgstr ""
"Zazwyczaj literał łańcucha musi być w jednej linii, więc to jest nieprawidłowe:\n"
"\n"
"    string = \"First line\n"
"    Second line\"\n"
"    print(string)\n"
"\n"
"Ale Python dostarcza rozwiązania! Rozwiązaniem jest użycie *potrójnych cudzysłowów*, czyli trzech znaków cudzysłowia z rzędu\n"
"(albo `'''` albo `\"\"\"`) do otoczenia zawartości łańcucha. Uruchom następujący program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NewlinesAndFormatBoard.steps.one_way_to_print_board.text"
msgstr ""
"Następnie chcemy rozwiązać problem wyświetlania planszy do gry w kółko i krzyżyk. Oto jeden ze sposobów na to:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(Co to jest `\"\".join`? Wyszukaj w Google!)"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.title"
msgstr "Znak nowej linii, `format_board`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.OtherComparisonOperators.steps.brokn_kyboard.text"
msgstr ""
"Oto uroczy mały programik używający `!=`:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.0.text"
msgstr ""
"To prawie dokładnie to samo co w poprzednim kroku, tyle że użyj ciągów "
"znaków zamiast liczb."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.1.text"
msgstr "Musisz tylko uruchomić jedną bardzo małą, prostą linię w powłoce."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.2.text"
msgstr ""
"Możesz to również zrobić poprzez uruchomienie wielu linii w powłoce, "
"najpierw definiując zmienne a następnie porównując je, ale nie musisz tego "
"robić, możesz to zrobić bez zmiennych."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.3.text"
msgstr "Pamiętasz dodawanie dwóch ciągów znaków w powłoce na początku kursu?"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.4.text"
msgstr "Na przykład robiliśmy `'hello' + 'world'`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.5.text"
msgstr ""
"Do tego zadania musisz zrobić właściwie to samo, ale zamiast dodawać, "
"porównuj je."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.comparing_strings.requirements"
msgstr ""
"Uruchom dowolny kod w powłoce używający albo `<` albo `>` na dwóch ciągach "
"znaków."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.comparing_strings.text"
msgstr ""
"Można także używać tych operatorów do porównywania ciągów znaków. Jeśli "
"ustawisz dwa ciągi znaków w kolejności alfabetycznej, pierwszy jest "
"'mniejszy niż' drugi. Sprawdź to sam."

#. https://futurecoder.io/course/#OtherComparisonOperators
#.     # __code0__:
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#.     # __code1__:
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x3
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.first
msgid "pages.OtherComparisonOperators.steps.final_text.text"
msgstr ""
"Wspaniale!\n"
"\n"
"Istnieje wiele sposobów rozwiązania tego problemu. Oto jedno z rozwiązań:\n"
"\n"
"__code0__\n"
"\n"
"Oto inne:\n"
"\n"
"__code1__\n"
"\n"
"Te programy (i twój również) działają równie dobrze zarówno z liczbami, jak i ciągami znaków. Więc dla:\n"
"\n"
"__code2__\n"
"\n"
"wydrukują `Alice`, ponieważ to jest pierwszy ciąg znaków w kolejności alfabetycznej.\n"
"\n"
"`<` oraz `>` dają wynik False, gdy porównywane wartości są równe. Na przykład, 3 nie jest mniejsze od 3, więc `3 < 3` oraz `3 > 3` są oba False.\n"
"Aby uwzględnić równe wartości, użyj `<=` oraz `>=`.\n"
"Jeśli się przyjrzeć, przypominają one trochę ≤ oraz ≥.\n"
"Zauważ, że `=` znajduje się na końcu - nie istnieją takie operatory jak `=<` czy `=>`.\n"
"Aby to zapamiętać, przeczytaj je na głos jako \"mniejsze równa się\"\n"
"i \"większe równa się\".\n"
"\n"
"Podsumowując, główne operatory porównania to `==`, `!=`, `<`, `>`, `<=` oraz `>=`.\n"
"Jeśli masz kiedykolwiek wątpliwości co do tego, co one robią, pobaw się nimi w powłoce!"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.grades_example.text"
msgstr ""
"Oto praktyczny przykład użycia `<`:\n"
"\n"
"__program_indented__\n"
"\n"
"Pamiętaj, że `elif percentage < 60` po `if percentage < 40` oznacza \"jeśli procent nie był mniejszy niż 40 oraz równocześnie jest mniejszy niż 60\", więc zostanie spełnione dla wszystkich liczb od 40 do 59 włącznie. Podobnie ocena 'B' jest dla procentów od 60 do 79, a ocena 'A' jest dla każdej liczby 80 i więcej."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.0.text"
msgstr "Musisz tylko uruchomić jedną bardzo małą, prostą linię w powłoce."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.1.text"
msgstr "Jak byś dodał dwie liczby w powłoce?"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.2.text"
msgstr "Na przykład spróbuj `123 + 456`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.3.text"
msgstr ""
"Do tego zadania musisz zrobić właściwie to samo, ale zamiast dodawać, "
"porównuj je."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.requirements"
msgstr ""
"Uruchom dowolny kod w powłoce używający albo `<` albo `>` na dwóch liczbach."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.introducing_less_than.text"
msgstr ""
"Innymi przydatnymi operatorami są `<` (mniejsze niż) oraz `>` (większe niż)."
" Na przykład `a < b` oznacza \"`a` jest mniejsze od `b`\". Wypróbuj użycie "
"jednego z nich w powłoce, aby porównać dwie liczby."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.hints.0.text"
msgstr ""
"Spróbuj napisać program, który wypisze najmniejszą z wartości `x1` i `x2`."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.hints.1.text"
msgstr "Potrzebujesz tylko kilku użycia `<`, `if`, a może `else`."

#. https://futurecoder.io/course/#OtherComparisonOperators
#.     # __code0__:
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x3
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.text"
msgstr ""
"Teraz zadanie: napisz program, który bierze trzy zmienne `x1`, `x2` i `x3`, oraz drukuje wartość najmniejszej z nich. Więc dla:\n"
"\n"
"__code0__\n"
"\n"
"powinien wydrukować `10`."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.try_not_equals.text"
msgstr ""
"Przeciwieństwem operatora równości `==` jest operator *nierówności* `!=`. "
"Jeśli się przyjrzeć, to trochę przypomina ≠. Zwraca `True`, kiedy dwie "
"wartości są... nie równe. Wypróbuj `__program__` samodzielnie w powłoce "
"(shell)."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.title"
msgstr "Inne operatory porównania"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#.     # __code0__:
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#.     def quadruple(x):
#.         return double(double(x))
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quadruple
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double
msgid "pages.ReturningValuesFromFunctions.steps.final_text.text"
msgstr ""
"Brawo! Oto dwie możliwe rozwiązania:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.first_return.text"
msgstr ""
"Funkcje mogą być szczególnie użyteczne, kiedy *zwracają* wartości, zamiast je tylko wyświetlać. Wypróbuj ten przykład:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.losing_return_value.text"
msgstr ""
"Tu przekazaliśmy `number` (które ma wartość `5`) jako argument `x` do funkcji `double`, a funkcja `double` *zwróciła*\n"
"`x * 2`, to jest `5 * 2`, to jest `10`, co stało się wartością zmiennej `twice`. Specjalne słowo kluczowe `return` wewnątrz\n"
"`double` sprawia, że `double(number)` jest wyrażeniem o wartości - konkretnie wartości, która została zwrócona.\n"
"To trochę tak, jakby `twice = double(number)` było równoważne `twice = number * 2`, chociaż to nie jest\n"
"dokładnie to, co się dzieje.\n"
"\n"
"Zauważ, że `double(number)` *nie zmieniło `number`*. Na końcu `number` wciąż jest `5`. Raczej, `double(number)`\n"
"zwróciło nową wartość. Istotne jest, aby program wykorzystał tę zwróconą wartość, w tym przypadku przechowując ją\n"
"w zmiennej. Natychmiastowe wydrukowanie jej z `print(double(number))` również działa. Z drugiej strony, \n"
"spróbuj to:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.0.text"
msgstr "Aby pomnożyć przez 4, pomnóż przez 2 dwa razy."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.1.text"
msgstr "To oznacza, że musisz wywołać `double` dwa razy."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.10.text"
msgstr "Spojrzyj na definicję funkcji `double` jako przykład."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.11.text"
msgstr ""
"Upewnij się, że nie wywołujesz funkcji `quadruple` w ciele funkcji "
"`quadruple`. Sprawdź swoje wcięcia."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.2.text"
msgstr ""
"Upewnij się, że używasz wartości zwracanej przez `double` za każdym razem."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.3.text"
msgstr "Upewnij się, że posiadasz wszystkie elementy definicji funkcji."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.4.text"
msgstr "To obejmuje `def`, `()`, oraz `:`."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.5.text"
msgstr "Upewnij się, że twoja funkcja jest nazwana `quadruple`."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.6.text"
msgstr ""
"Upewnij się, że przyjmuje jeden parametr o nazwie `x` pomiędzy nawiasami "
"`()`."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.7.text"
msgstr "Użyj parametru w ciele funkcji."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.8.text"
msgstr "Upewnij się, że ciało jest wcięte."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.9.text"
msgstr "Upewnij się, że coś zwracasz na końcu."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.messages.used_multiply.text"
msgstr ""
"Nie możesz używać `*`, `+`, ani nawet żadnych liczb wewnątrz `quadruple`.\n"
"Musisz rozwiązać problem wywołując funkcję `double`."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.requirements"
msgstr ""
"Napisz program, który definiuje funkcję o nazwie `quadruple` zgodnie z "
"powyższym opisem."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.text"
msgstr ""
"Tu `double(number)` nadal zwróciło `10`, ale nie wykorzystaliśmy tego, więc zostało to utracone. `number` jest nadal `5`.\n"
"\n"
"Napisz funkcję `quadruple`, która bierze jeden argument `x` i zwraca ten argument pomnożony przez 4.\n"
"Możesz użyć wyłącznie funkcji `double` - bezpośrednio w ciele funkcji `quadruple` zakazane są liczby lub mnożenie."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.title"
msgstr "Zwracanie Wartości z Funkcji"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.0.text"
msgstr "Jak powinieneś zdefiniować ciąg znaków?"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.1.text"
msgstr "Z pojedynczymi cudzysłowami, czy z podwójnymi?"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.2.text"
msgstr "Potrzebujesz tylko jednego ciągu znaków."

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.3.text"
msgstr "Nie ma potrzeby dodawać ciągów znaków do siebie."

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.text"
msgstr ""
"Jak widzisz, Python traktuje ten sam ciąg znaków zdefiniowany pojedynczymi lub podwójnymi cudzysłowami jako ten sam.\n"
"\n"
"Teraz napisz program, który wydrukuje następujący tekst z Zen of Python:\n"
"\n"
"    __copyable__\n"
"    Specjalne przypadki nie są na tyle specjalne, aby łamać reguły.\n"
"\n"
"Program powinien być jednolinijkowy używając `print()`, bez zmiennych."

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quotes.text"
msgstr ""
"Więc nie możemy użyć apostrofu tak jak nam się podoba w ciągu znaków z pojedynczymi cudzysłowami.\n"
"Apostrof jest traktowany jak pojedynczy cudzysłów i dlatego działa jako *zamykający cudzysłów* definicji ciągu znaków `'Alice'`.\n"
"Potem pozostała część tekstu `s Diner'` jest niepoprawną składnią i Python tego nie rozumie.\n"
"\n"
"Dzięki Bogu, że Python pozwala nam definiować ciągi znaków inaczej, używając podwójnych cudzysłowów `\"` zamiast tego:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.final_text.text"
msgstr ""
"Dobra robota!\n"
"\n"
"W większości przypadków możesz użyć pojedynczych lub podwójnych cudzysłowów do definiowania swoich ciągów znaków, tak jak ci się podoba.\n"
"Ale jeśli ciąg zawiera `'`, to użyj `\"` do jego zdefiniowania i odwrotnie."

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_double_quotes_equal.text"
msgstr ""
"Pamiętaj, że cudzysłowy to tylko część ludzkiej notacji ciągów znaków.\n"
"Nie są przechowywane jako rzeczywista część ciągu znaków.\n"
"Spróbuj tego w powłoce:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.0.text"
msgstr "Pomyśl prostym sposobem! Jak zwykle to robisz?"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.1.text"
msgstr ""
"Jeśli ciąg znaków zawiera pojedynczy cudzysłów, musimy użyć podwójnych "
"cudzysłowów do jego zdefiniowania."

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.2.text"
msgstr "Co jeśli ciąg zawiera podwójne cudzysłowy?"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.text"
msgstr ""
"Doskonale!\n"
"\n"
"Teraz wydrukuj następujący cytat dosłownie (łącznie z podwójnymi cudzysłowami):\n"
"\n"
"    __copyable__\n"
"    \"Pogawędki są tanie. Pokaż mi kod.\" - Linus Torvalds\n"
"\n"
"Program powinien być jednolinijkowy używając `print()`, bez zmiennych."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.program"
msgstr "print('Restauracja Alice's')"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#.     # __code0__:
#.     name = 'Alice'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text"
msgstr ""
"Do tej pory definiowaliśmy ciągi znaków używając pojedynczych cudzysłowów, takich jak:\n"
"\n"
"__code0__\n"
"\n"
"Co jeśli chcemy zdefiniować ciąg znaków zawierający apostrof? Spróbuj tego:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.title"
msgstr "Pojedyncze i podwójne cudzysłowy w ciągach znaków"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid "pages.StoringCalculationsInVariables.steps.final_text.text"
msgstr ""
"W przeciwieństwie do arkusza kalkulacyjnego, gdzie formuły aktualizują się "
"automatycznie, zmienna taka jak `sentence` nie pamięta, jak została "
"obliczona i nie zmieni się, jeśli zmienione zostaną wartości leżące u "
"podstawy `word` lub `name`."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.0"
msgstr ""
"Witaj Swiecie\n"
"Witaj Swiecie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.1"
msgstr ""
"Witaj Swiecie\n"
"Zegnaj Swiecie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.2"
msgstr ""
"Zegnaj Swiecie\n"
"Zegnaj Swiecie"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.requirements"
msgstr ""
"Uruchom program składający się z czterech linii z poprzedniego kroku, a "
"następnie z dwóch linii tutaj."

#. https://futurecoder.io/course/#StoringCalculationsInVariables
#.     # __code0__:
#.     word = 'Goodbye'
#.     print(sentence)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Goodbye%27
msgid "pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text"
msgstr ""
"Teraz `zdanie` ma wartość `'Witaj Swiecie'`, której można używać wielokrotnie. Zauważ, że będzie ona kontynuowała posiadanie tej wartości aż do jej bezpośredniego przypisania, np. za pomocą innego polecenia takiego jak `zdanie = <coś>`. Na przykład, dodaj te dwie linie na końcu programu:\n"
"\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.0"
msgstr "zdanie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.1"
msgstr "slowo + ' ' + imie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.2"
msgstr "Witaj + ' ' + Swiecie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.3"
msgstr "'Witaj' + ' ' + 'Swiecie'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.4"
msgstr "Witaj Swiecie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.5"
msgstr "'Witaj Swiecie'"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.text"
msgstr ""
"Często będziesz używać zmiennych, aby przechowywać wyniki obliczeń. Pomoże to budować bardziej złożone programy. Na przykład, wypróbuj ten program:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid "pages.StoringCalculationsInVariables.title"
msgstr "Przechowywanie Obliczeń w Zmiennych"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     if word.lower() == 'yes':
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27yes%27
msgid "pages.StringMethodsUnderstandingMutation.steps.final_text.text"
msgstr ""
"Zauważ, że `sentence.upper()` nie zmienia oryginalnego `sentence`.\n"
"\n"
"Możesz również użyć `word.lower()` bezpośrednio w większym wyrażeniu, np.\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid ""
"pages.StringMethodsUnderstandingMutation.steps.mutation_string_append.text"
msgstr ""
"Znów te dwie metody także działają na łańcuchach znaków podobnie do list.\n"
"`index` zwraca *indeks początkowy* wyszukiwanego słowa `'the'` w dłuższym łańcuchu\n"
"`'feed the dog and the cat'`, który wynosi `5`.\n"
"\n"
"|  0   |  1   |  2   |  3   |  4   | **5** |  6   |  7   |  8   | ...  |\n"
"| :--: | :--: | :--: | :--: | :--: | :---: | :--: | :--: | :--: | :--: |\n"
"|  f   |  e   |  e   |  d   |      | **t** |  h   |  e   |      | ...  |\n"
"\n"
"Zauważ, że w większości przypadków metody, które *modyfikują listę in situ* (`append`, `insert`, `remove`) po prostu zwracają `None`,\n"
"podczas gdy pozostałe funkcje/metody zwracają nową użyteczną wartość bez zmiany oryginalnego argumentu.\n"
"Jedynym wyjątkiem jest metoda `pop`.\n"
"\n"
"Modyfikowanie wartości bezpośrednio nazywa się *mutacją* - typy wartości które mogą być mutowane są *mutowalne*,\n"
"a te które nie mogą są *niemutowalne*. Listy są mutowalne.\n"
"Łańcuchy znaków są niemutowalne - nie mają żadnych metod takich jak `append` czy nawet przypisanie do indeksu.\n"
"Zobacz sam:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_count_index
msgid ""
"pages.StringMethodsUnderstandingMutation.steps.string_count_index.program"
msgstr ""
"string = 'feed the dog and the cat'\n"
"print(string.count('the'))\n"
"print(string.index('the'))"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.StringMethodsUnderstandingMutation.steps.string_count_index.text"
msgstr ""
"`in` działa na łańcuchach znaków tak, jak na listach! Komenda zwróciła `True`, ponieważ `the` występuje w `feed the dog and the cat` jako *podłańcuch*.\n"
"Co z `count` i `index`?\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_in_step
msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.program"
msgstr "print('the' in 'feed the dog and the cat')"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.text"
msgstr ""
"Widziałeś już, że `len` oraz indeksowanie działają na łańcuchach znaków trochę tak, jakby były one listami znaków.\n"
"Łańcuchy znaków wspierają również niektóre z nowych metod, które poznaliśmy, nie tylko dla pojedynczych znaków, ale również dla dowolnych podłańcuchów.\n"
"Na przykład, wypróbuj poniższe:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code1__:
#.     __program_indented__
#.     # __code0__:
#.     word.lower()
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text"
msgstr ""
"Po prostu nie możesz zmienić łańcucha znaków - możesz jedynie tworzyć nowe łańcuchy i używać ich zamiast starych.\n"
"To oznacza, że to jest bezużyteczne stwierdzenie samo w sobie:\n"
"\n"
"__code0__\n"
"\n"
"Łańcuch odwołany przez `word` nie jest modyfikowany, zamiast tego `word.lower()` zwróciło nowy łańcuch, który został natychmiast odrzucony.\n"
"Jeśli chcesz zmienić wartość, do której odnosi się `word`, musisz przypisać do zmiennej nową wartość:\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
msgid "pages.StringMethodsUnderstandingMutation.title"
msgstr "Metody Łańcuchów Znaków i Niemutowalność"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.0.text"
msgstr ""
"`string` powinien być otoczony jedną spacją i `level` wykrzyknikami (`!`) z "
"obu stron."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.1.text"
msgstr ""
"Dołącz definicję `surround` z poprzedniej części do swojego programu i "
"wywołaj ją w `alert`."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.10.text"
msgstr ""
"Pomyśl, jak budujesz łańcuchy znaków z `+=`. Kolejno aktualizuj tę samą "
"zmienną, budując swój wynik."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.11.text"
msgstr "Czyli napisz `something = surround(something, '!')` w swojej pętli."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.12.text"
msgstr "Upewnij się, że zwracasz coś na końcu `alert`."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.13.text"
msgstr ""
"Upewnij się, że nie `zwracasz` wewnątrz pętli, ale po niej. Sprawdź swoje "
"wcięcia."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.14.text"
msgstr ""
"Upewnij się, że nie wywołujesz `alert` w ciele funkcji `alert`. Sprawdź "
"swoje wcięcia."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.2.text"
msgstr "Użyj `surround` dla spacji."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.3.text"
msgstr "Użyj `surround` dla wykrzykników."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.4.text"
msgstr ""
"Nie wolno łączyć kilku wykrzykników w jeden ciąg znaków, więc wywołaj "
"`surround` kilka razy."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.5.text"
msgstr "Czyli wywołaj `surround` raz dla każdej pary wykrzykników."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.6.text"
msgstr "Więc wywołaj `surround(..., '!')` kilka razy."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.7.text"
msgstr "Użyj pętli, aby wywołać to kilka razy."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.8.text"
msgstr "Użyj `range(n)`, aby twoja pętla miała `n` iteracji."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.9.text"
msgstr "Upewnij się, że używasz wartości zwracanej przez `surround`."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid ""
"pages.TestingFunctions.steps.alert_exercise.messages.catch_return_inside_loop.text"
msgstr ""
"W funkcji `alert` umieściłeś swoją instrukcję `return` w złym miejscu!\n"
"Zwróć uwagę na swoje wcięcia w `alert`. Możesz kończyć pętlę za wcześnie za pomocą `return`."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.messages.used_format.text"
msgstr ""
"Nie możesz używać konkatenacji, formatowania, interpolacji ani mnożenia łańcuchów znakowych ani f-stringów w `alert`.\n"
"Musisz rozwiązać problem, wywołując `surround`."

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#.     # __code1__:
#.     def alert(string, level):
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.alert
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Warning%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%21%21%21%21+DANGER+%21%21%21%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22DANGER%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%21%21+Warning+%21%21%22
msgid "pages.TestingFunctions.steps.alert_exercise.text"
msgstr ""
"Doskonale! Teraz napisz funkcję `alert`, która przejdzie te testy:\n"
"\n"
"__code0__\n"
"\n"
"Ciało funkcji `alert` nie może zawierać `+`. Użyj zamiast tego `surround`. Twoja funkcja powinna zaczynać się tak:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.complete_quadruple_tests.requirements"
msgstr ""
"Wpisz program powyżej.\n"
"Następnie zmień ostatnie dwie linie, dodając po jednym argumencie do każdego wywołania `assert_equal`, aby testy przeszły.\n"
"Nie dotykaj definicji funkcji."

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quadruple
msgid "pages.TestingFunctions.steps.complete_quadruple_tests.text"
msgstr ""
"Świetnie! Nasze testy nie przeszły! Oczywiście to zazwyczaj nie jest dobra rzecz, ale mówi nam, że testy\n"
"sprawdzają swoje zadanie. Upewnią się, że nasza implementacja `double` jest poprawna.\n"
"\n"
"Praktykujmy ten nowy koncept. Poniżej znajduje się funkcja `quadruple` z wcześniej z niektórymi niekompletnymi testami.\n"
"Napraw program, dodając brakujące argumenty do wywołania `assert_equal`.\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.final_text.text"
msgstr ""
"Świetna robota! Te narzędzia będą bardzo przydatne w kolejnych rozdziałach."

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.actual
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22OK%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.expected
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Error%21+%7Brepr%28actual%29%7D+%21%3D+%7Brepr%28expected%29%7D%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
msgid "pages.TestingFunctions.steps.introducing_assert_equal.text"
msgstr ""
"Ważnym elementem pisania programów jest sprawdzanie, czy działają poprawnie. Możesz to zrobić ręcznie, np. sprawdzając, czy\n"
"`print(double(5))` wypisuje `10`, ale tego typu czynności mogą szybko stać się męczące.\n"
"Przydatne jest pisanie programów, które testują twoje programy. To nazywa się *automatycznym testowaniem*,\n"
"a programy to *testy*.\n"
"\n"
"Oto prosta funkcja `assert_equal`, która pomoże nam pisać testy:\n"
"\n"
"__code0__\n"
"\n"
"\n"
"(Co to za funkcja `repr`? Spróbuj `print(f\"{'abc'} {repr('abc')}\")`, żeby zobaczyć jedną różnicę, ale nie martw się tym zbytnio.)\n"
"\n"
"To nie jest standardowa część Pythona (choć podobne funkcje istnieją), ale dodaliśmy ją do twojego środowiska programistycznego\n"
"żebyś zawsze mógł z niej korzystać. Oto przykład użycia, który możesz wypróbować:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.make_tests_fail.requirements"
msgstr ""
"Uruchom program z poprzedniego kroku, zamieniając `x * 2` na `x * 3`. Resztę"
" zostaw bez zmian."

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.make_tests_fail.text"
msgstr ""
"Komunikaty OK mówią nam, że testy przeszły. Nasza funkcja `double` wydaje się działać poprawnie. Zmień ją tak, żeby zwracała\n"
"`x * 3` i zobacz co się stanie."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.0.text"
msgstr "Argument `sides` powinien być dodany przed i po `string`."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.1.text"
msgstr "Użyj konkatenacji łańcuchów znaków, aby to osiągnąć."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.2.text"
msgstr "Upewnij się, że treść jest z wcięciem."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.3.text"
msgstr "Spraw, aby na końcu zwracać coś za pomocą `return`."

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.4.text"
msgstr ""
"Upewnij się, że nie wywołujesz `surround` wewnątrz ciała funkcji `surround`."
" Sprawdź swoje wcięcia."

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#.     # __code1__:
#.     def surround(string, sides):
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%2B%2Bmore%2B%2B%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22more%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22the+same%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.surround
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%3Dthe+same%3D%22
msgid "pages.TestingFunctions.steps.surround_exercise.text"
msgstr ""
"Kolejną przydatną rzeczą dotyczącą testów jest to, że każdy może je przeczytać i zobaczyć jasne, jednoznaczne przykłady\n"
"tego, co funkcja robi. Jest to pomocne, gdy funkcja jest skomplikowana i trudna do opisania po angielsku.\n"
"\n"
"Na przykład, oto kilka testów:\n"
"\n"
"__code0__\n"
"\n"
"Nie muszę wyjaśniać, co robi `surround`, możesz zobaczyć sam.\n"
"\n"
"Napisz funkcję `surround`, która przejdzie te testy i zaczyna się tak:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.title"
msgstr "Testowanie Funkcji"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.equality_vs_assignment
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.program"
msgstr "print(1 + 2 = 3)"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.requirements"
msgstr ""
"Uruchom program z poprzedniego kroku, ale zamień którykolwiek z `==` na po "
"prostu `=`."

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.text"
msgstr ""
"Jak widać, jeśli wartości są równe, wyrażenie równości oceniane jest jako `True`,\n"
"w przeciwnym razie jest `False`.\n"
"\n"
"Zwróć uwagę na różnicę między operatorem równości `==` a pojedynczym `=`, które ma różne znaczenia,\n"
"szczególnie w instrukcjach przypisania, tak jak widziałeś je do tej pory. Co się stanie, jeśli spróbujesz\n"
"usunąć pojedyncze `=` z poprzedniego programu?"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.final_text.text"
msgstr "Dobra robota!"

#. https://futurecoder.io/course/#TheEqualityOperator
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.TheEqualityOperator.steps.if_equals_replacing_characters.text"
msgstr ""
"Użyjmy `==` w instrukcji `if`. W tym programie ciało `if` uruchamia się tylko wtedy, gdy `c` to znak `'s'`. Przekonaj się sam.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#TheEqualityOperator
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
msgid ""
"pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise.hints.0.text"
msgstr ""
"Musisz tylko dodać kilka linii kodu, które są bardzo podobne do "
"istniejących."

#. https://futurecoder.io/course/#TheEqualityOperator
msgid ""
"pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise.text"
msgstr ""
"Rozszerz teraz program, aby również zamieniał `e` na `3` i `a` na `@`."

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.introducing_equality.text"
msgstr ""
"Istnieje kilka sposobów uzyskania wartości boolowskich bez ich bezpośredniego przypisywania,\n"
"co pozwala konstruować bardzo przydatne instrukcje `if`. W szczególności istnieje wiele\n"
"*operatorów porównania*, które porównują wartości dwóch wyrażeń.\n"
"Najczęściej stosowany jest operator równości, który sprawdza, czy dwie wartości są równe.\n"
"Jest on oznaczony dwoma znakami równości: `==`. Spróbuj uruchomić to:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.title"
msgstr "Operator Równości"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
msgid "pages.TheFullTicTacToeGame.steps.final_text.text"
msgstr ""
"### ***GRATULACJE!!!***\n"
"\n"
"Udało Ci się!"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.0.text"
msgstr ""
"Powinieneś użyć wszystkich funkcji `winner`, `format_board` (nie licząc jej "
"użyć w `play_move`), `play_move`, `make_board`, `print_winner` oraz "
"`print_draw` gdzieś w kodzie."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.1.text"
msgstr ""
"W twoim kodzie tylko raz powinna być wspomniana każda z tych funkcji, "
"chociaż niektóre z nich będą wywoływane kilkakrotnie w trakcie działania "
"programu."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.10.text"
msgstr ""
"Którekolwiek funkcja zostanie wywołana, musi być wywołana dokładnie jeden "
"raz."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.11.text"
msgstr ""
"Jednym łatwym sposobem, by upewnić się, że nie wywołasz funkcji wiele razy, "
"jest wywołanie jej na zewnątrz jakiejkolwiek pętli."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.12.text"
msgstr "Nauczyliśmy się dwóch sposobów na zakończenie pętli."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.13.text"
msgstr ""
"Jednym ze sposobów jest `break`, który kończy jedną pętlę i nic więcej."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.14.text"
msgstr "Drugi sposób kończy nie tylko pętlę, ale całe wywołanie funkcji."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.15.text"
msgstr "Drugi sposób to `return`."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.16.text"
msgstr ""
"Nie wykonuj ruchów parami takich jak `play_move(board, player1)` i "
"`play_move(board, player2)` w przykładowym kodzie."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.17.text"
msgstr "Zamiast tego, każda iteracja pętli powinna wykonać jeden ruch."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.18.text"
msgstr "Potrzebujesz zmiennej, aby śledzić, czyja jest kolej."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.19.text"
msgstr "Gracz powinien być przełączony w każdej iteracji pętli."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.2.text"
msgstr "Będziesz potrzebować pętli for do wielokrotnego wykonania ruchów."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.20.text"
msgstr "Instrukcja `if` to dobry sposób na to."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.21.text"
msgstr "Szczególnie w połączeniu z `else`."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.22.text"
msgstr "Upewnij się, że `player1` wykonuje pierwszy ruch."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.23.text"
msgstr ""
"Wywołuj `print_winner` tylko po sprawdzeniu `winner` za pomocą instrukcji "
"`if`."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.24.text"
msgstr ""
"Musisz sprawdzać zwycięzcę wewnątrz pętli, ponieważ nie wiesz, kiedy któryś "
"z graczy może wygrać."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.25.text"
msgstr ""
"Gdy już wywołasz `print_winner`, możesz użyć `return`, aby zakończyć "
"funkcję."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.26.text"
msgstr ""
"Samo `return` wystarczy, funkcja `play_game` nie jest przeznaczona do "
"zwracania wartości."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.27.text"
msgstr ""
"Nie używaj `else` po sprawdzeniu zwycięzcy, aby wywołać `print_draw`, jeśli "
"nie ma zwycięzcy. Brak zwycięzcy na razie nie oznacza od razu remisu."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.28.text"
msgstr ""
"`print_draw` powinien być wywołany tylko po tym, jak wszystkie ruchy zostały"
" wykonane i nadl nie ma zwycięzcy."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.29.text"
msgstr "Więc powinien być wywołany po pętli, na zewnątrz niej."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.3.text"
msgstr ""
"Nie musisz sprawdzać, czy plansza jest już pełna, ponieważ zawsze możesz "
"obliczyć, ile ruchów jest potrzebnych, aby ją wypełnić."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.30.text"
msgstr ""
"Sprawdź wcięcia, aby upewnić się, że `print_draw` nie znajduje się w ciele "
"pętli for."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.4.text"
msgstr ""
"Więc możesz po prostu użyć pętli, która będzie się wykonywać ustaloną ilość "
"iteracji i we wnętrzu pętli sprawdzać, czy trzeba zakończyć pętlę wcześniej."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.5.text"
msgstr ""
"Jaka jest maksymalna liczba ruchów, która może być wykonana na planszy 3x3? "
"4x4?"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.6.text"
msgstr ""
"Pętla z użyciem `range` to łatwy sposób na iterację ustaloną ilość razy."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.7.text"
msgstr ""
"Więc możesz użyć `for _ in range(N):`, aby wykonać maksymalnie `N` ruchów."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.8.text"
msgstr "Gdy pojawi się zwycięzca, musisz zakończyć pętlę i grę."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.9.text"
msgstr ""
"Powinna zostać wywołana funkcja `print_winner` lub `print_draw`, nie obie."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#.     # __code0__:
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22It%27s+a+draw%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_draw
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%5Cn++%7B%22%2B%22.join%28%22-%22+%2A+size%29%7D%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bi+%2B+1%7D+%7B%22%7C%22.join%28row%29%7D%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winning_line
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board_size
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_game
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.main_diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.col
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27++%7B%22+%22.join%28str%28i+%2B+1%29+for+i+in+range%28size%29%29%7D%5Cn%7Bline.join%28rows%29%7D%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_move
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.rows
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayer%7D+wins%21%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayer%7D+to+play%3A%27
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.text"
msgstr ""
"Nadszedł czas, aby połączyć wszystko w całość! Poniżej znajduje się kod, który pomoże Ci zacząć.\n"
"\n"
"Zawiera on implementacje różnych funkcji, które zdefiniowaliśmy na poprzednich stronach do rozwiązania części\n"
"problemu, wykorzystując niektóre sztuczki, których jeszcze się nie nauczyłeś, by je skrócić. Nie zmieniaj ich.\n"
"\n"
"Twoje zadanie to poprawna implementacja funkcji `play_game`. Obecna implementacja pokazuje, co\n"
"powinno się wydarzyć na początku gry, ale jest oczywiście niekompletna.\n"
"Rozwiązanie powinno działać dla dowolnego rozmiaru planszy i kontynuować grę do jej zakończenia.\n"
"Ostatnią rzeczą, którą powinna zrobić funkcja `play_game`, to albo wywołać `print_winner(player)`\n"
"jeśli `winner(board)` jest prawdą, albo wywołać `print_draw()`, jeśli plansza jest wypełniona bez zwycięzcy.\n"
"\n"
"Możesz założyć, że użytkownik wprowadzi tylko poprawne dane,\n"
"czyli liczby od 1 do `board_size`, aby wybrać komórkę na planszy, która nie jest już zajęta.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
msgid "pages.TheFullTicTacToeGame.title"
msgstr "Pełna Gra w Kółko i Krzyżyk"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.check_type_manually.text"
msgstr ""
"Python informuje najpierw, że `type('Hello World')` to `<class 'str'>`. Nie martw się teraz o `class`.\n"
"`str` to skrót od *string* (ciąg znaków).\n"
"\n"
"Następnie `True` to `bool` (skrót od *boolean* - wartość logiczna) i `[1, 2, 3]` ma typ `list` (lista).\n"
"\n"
"Zauważ, że są dwa typy numerów:\n"
"\n"
"- `int`, skrót od 'integer', jest dla liczb całkowitych, to znaczy bez ułamków czy punktów dziesiętnych.\n"
"- `float`, skrót od 'floating point number', jest dla liczb z punktem dziesiętnym i ewentualnie częścią ułamkową\n"
"\n"
"W większości przypadków nie musisz martwić się o różne typy liczbowe, ponieważ można mieszać oba przy wykonywaniu obliczeń matematycznych.\n"
"\n"
"Typy są wartościami, które mogą być wykorzystane na różne sposoby, podobnie jak inne wartości.\n"
"Na przykład, spróbuj tego w powłoce (shell):\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.common_type_errors.text"
msgstr ""
"Co się stanie, jeśli użyjesz operatora między `str` a `int`? Wypróbuj w powłoce:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.different_types_look_same.text"
msgstr ""
"Wartości o różnych typach są zazwyczaj dość różne od siebie, ale mogą wyglądać tak samo, gdy są wydrukowane,\n"
"co może być mylące. Spróbuj tego:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(Możesz użyć `print(repr(123))` i `print(repr('123'))`, aby zauważyć różnicę. Co to jest `repr`? Wygoogluj to!)"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.final_text.text"
msgstr ""
"Wspaniale!\n"
"\n"
"Przy okazji, kiedy musisz skonkatenować ciągi znaków i liczby, pamiętaj, że możesz także\n"
"użyć f-stringów. Często wyglądają ładniej.\n"
"\n"
"Nauczyłeś się o typach w Pythonie oraz jak unikać powszechnych błędów poprzez konwersję typów.\n"
"Kontynuuj prace nad resztą projektu!"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.five_different_types.text"
msgstr ""
"Jak dotąd zobaczyliśmy różne rodzaje danych: ciągi znaków (strings), listy, liczby i wartości logiczne (booleans).\n"
"Nazywa się je *typami*. Każda wartość ma określony typ, który wpływa na jej zachowanie\n"
"i może być ujawniony za pomocą funkcji `type`:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid ""
"pages.Types.steps.fixing_type_errors_with_conversion.disallowed.0.label"
msgstr "f-stringi"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.0.text"
msgstr "W których miejscach ten kod jest uszkodzony?"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.1.text"
msgstr "Są wartości, które muszą być przekonwertowane na inny typ."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.2.text"
msgstr "Konkretnie jest `str`, które musi być przekonwertowane na `int`."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.3.text"
msgstr "I jest `int`, które musi być przekonwertowane na `str`."

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Go%21%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Starting...+%27
msgid "pages.Types.steps.fixing_type_errors_with_conversion.text"
msgstr ""
"Użycie ciągu znaków zamiast liczby całkowitej w `range` jak `range('5')`,\n"
"lub przy indeksowaniu listy jak `list['3']` także spowoduje błąd.\n"
"\n"
"Większość z tych problemów można rozwiązać poprzez konwersję ciągu znaków na liczbę całkowitą za pomocą funkcji `int`:\n"
"`int('5')` zwróci liczbę całkowitą `5`.\n"
"Podobnie, liczbę całkowitą można przekonwertować na ciąg znaków za pomocą funkcji `str`:\n"
"`str(5)` zwróci ciąg znaków `'5'`.\n"
"\n"
"Używając tej nowej wiedzy, napraw ten pokazany program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Poprawny program powinien wydrukować:\n"
"\n"
"    Starting... 1\n"
"    Starting... 2\n"
"    Starting... 3\n"
"    Go!\n"
"\n"
"Twoje rozwiązanie powinno działać dla dowolnej wartości zmiennej `number`."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.0.text"
msgstr ""
"Możesz zacząć od wykorzystania pomysłów z poprzedniego rozwiązania do "
"`format_board`. Bardzo polecam użycie `join`!"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.1.text"
msgstr "Pierwsza linia musi być potraktowana oddzielnie od reszty."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.2.text"
msgstr "Pamiętaj, że `range` daje liczby w sposób: 0, 1, 2, ..."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.3.text"
msgstr "Chcemy numerów na pierwszej linii takich jak: 1, 2, 3..."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.4.text"
msgstr ""
"Każdy numer musi być przekonwertowany na ciąg znaków przed dodaniem do "
"pierwszego wiersza!"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.5.text"
msgstr "Dla wierszy samej planszy zrób coś podobnego."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.6.text"
msgstr ""
"Zacznij z listą składającą się tylko z pierwszej linii, którą wyżej "
"zbudowałeś."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.7.text"
msgstr ""
"Dodaj do listy ciąg znaków każdego wiersza, następnie połącz listę ze "
"znakiem nowej linii."

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27+123%5Cn1XOX%5Cn2O++%5Cn3+XO%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
msgid "pages.Types.steps.format_board_with_numbers.text"
msgstr ""
"Napisz ulepszoną wersję `format_board`, która zawiera numery rzędów i kolumn, tak jak tutaj:\n"
"\n"
"     123\n"
"    1XOX\n"
"    2 OO\n"
"    3 X\n"
"\n"
"To powinno działać dla plansz dowolnej jednocyfrowej wielkości. Oto przypadek testowy:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.less_than_has_two_meanings.text"
msgstr ""
"Dla dwóch liczb całkowitych `+` działa jako dodawanie, natomiast dla dwóch ciągów znaków działa jako konkatenacja ciągów znaków.\n"
"Python automatycznie wywnioskuje znaczenie `+` z typów danych wejściowych.\n"
"Podobnie `<` działa inaczej na dwóch ciągach znaków i dwóch liczbach całkowitych:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.less_than_sorting_strings.text"
msgstr ""
"Więc `<` działa jak zwykłe 'mniej niż' między dwoma liczbami całkowitymi, ponieważ `13` jest mniejsze od `120`,\n"
"ale działa jako sortowanie słownikowe między dwoma ciągami znaków: `13` jest 'alfabetycznie' po `120`\n"
"ponieważ `3` jest po `2` w kolejności alfabetycznej.\n"
"\n"
"Zobacz jaką różnicę to robi podczas sortowania listy:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.plus_has_two_meanings.text"
msgstr ""
"Różne typy mają różne metody i obsługują różne operatory.\n"
"Ta sama metoda lub operator może również oznaczać różne rzeczy.\n"
"Na przykład zobacz, jak `+` ma różne znaczenia dla `str` i `int`:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.title"
msgstr "Typy"

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
msgid "pages.UnderstandingProgramsWithPythonTutor.steps.final_text.text"
msgstr ""
"Zwróć uwagę, że kod wykonuje się dwukrotnie oddzielnie: raz tutaj, a raz na stronie pythontutor.com.\n"
"W zależności od Twojego programu, oba uruchomienia mogą dać różne wyniki."

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid ""
"pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor.text"
msgstr ""
"Nadszedł czas, aby poznać kolejne narzędzie do eksploracji programów.\n"
"Skopiuj poniższy kod do edytora, a następnie kliknij nowy przycisk \"Python Tutor\".\n"
"Przycisk otworzy nową kartę z wizualizacją na stronie [pythontutor.com](http://pythontutor.com).\n"
"Tam możesz przeglądać program krok po kroku, korzystając z przycisków \"Prev\" lub \"Next\",\n"
"lub przeciągając suwak w lewo lub w prawo. Możesz także obserwować wartości zmiennych po prawej stronie.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
msgid "pages.UnderstandingProgramsWithPythonTutor.title"
msgstr "Zrozumienie programów z Python Tutor"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.final_text.text"
msgstr ""
"Świetna robota! Pracujesz z coraz bardziej skomplikowanymi programami."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.0.text"
msgstr ""
"Kod powinien być prawie taki sam, wystarczy zrobić kilka małych zmian."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.1.text"
msgstr ""
"Upewnij się, że kod wewnątrz `jeśli zawiera:` działa na początku pętli, w "
"pierwszej iteracji."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.2.text"
msgstr "To znaczy, że `zawiera` powinno być `True` w tym momencie."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.3.text"
msgstr ""
"Upewnij się, że kod wewnątrz `jeśli zawiera:` *nie* działa po pierwszej "
"iteracji."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.4.text"
msgstr "To znaczy, że `zawiera` powinno być `False` po pierwszej iteracji."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_first_character.text"
msgstr ""
"Tada! Przewiń na początek terminala i przeanalizujmy, co `snoop` pokazuje.\n"
"Zaczyna się bardzo prosto:\n"
"\n"
"        1 | zdanie = 'Witaj Świecie'\n"
"        3 | zawiera = False\n"
"        4 | nowe_zdanie = ''\n"
"        5 | dla znaku w zdaniu:\n"
"     ...... znak = 'W'\n"
"\n"
"Pierwsze linie po prostu pokazują ci linie programu, które komputer wykonał.\n"
"Po lewej stronie jest numer linii widziany w edytorze.\n"
"\n"
"Uruchomienie `dla znaku w zdaniu:` przypisuje wartość do zmiennej `znak`, więc `snoop` pokazuje tę wartość.\n"
"Linie zaczynające się od `......` wskazują na nową zmienną lub zmianę wartości istniejącej zmiennej.\n"
"Takie linie nie będą pokazywane, gdy są zbędne, dlatego wynik `snoop` nie zaczyna się tak:\n"
"\n"
"        1 | zdanie = 'Witaj Świecie'\n"
"     ...... zdanie = 'Witaj Świecie'\n"
"        3 | zawiera = False\n"
"     ...... zawiera = False\n"
"        4 | nowe_zdanie = ''\n"
"     ...... nowe_zdanie = ''\n"
"        5 | dla znaku w zdaniu:\n"
"     ...... znak = 'W'\n"
"\n"
"Następne dwie linie to:\n"
"\n"
"        6 |     jeśli zawiera:\n"
"        8 |     zawiera = True\n"
"\n"
"Ważne jest to, czego nie widać: ponieważ `zawiera` jest `False`, linia 7 (`nowe_zdanie += znak`) zostaje pominięta. Ale potem `zawiera` jest ustawione na `True`, więc kolejne iteracje pętli są inne:\n"
"\n"
"        5 | dla znaku w zdaniu:\n"
"     ...... znak = 'e'\n"
"        6 |     jeśli zawiera:\n"
"        7 |         nowe_zdanie += znak\n"
"     .............. nowe_zdanie = 'e'\n"
"\n"
"`nowe_zdanie += znak` działa po raz pierwszy i zmienna `nowe_zdanie` otrzymuje nową wartość.\n"
"\n"
"Teraz zmodyfikuj program, aby zrobić odwrotnie: wydrukuj tylko pierwszy znak, resztę pomijając."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.0"
msgstr "Witaj Świecie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.1"
msgstr "itaj Świecie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.2"
msgstr "Witaj Swiecie"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.3"
msgstr "W"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.4"
msgstr "e"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail.text"
msgstr ""
"Uruchom ten program:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop.requirements"
msgstr ""
"Uruchom ten sam program z poprzedniego kroku, ale użyj przycisku `snoop` "
"zamiast przycisku 'Uruchom'. Skopiuj program jeszcze raz, jeśli mogłeś go "
"zmienić."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop.text"
msgstr ""
"Programy zaczynają być skomplikowane!\n"
"Czas przedstawić nowe narzędzie, które pomoże ci zrozumieć programy. Kliknij przycisk `snoop`, aby uruchomić ten sam program i pokazać co się dzieje."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.title"
msgstr "Zrozumienie programów z `snoop`"

#. https://futurecoder.io/course/#UsingBreak
#.     # __code0__:
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
#.     # __code1__:
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.found
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.things
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing_to_find
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing
msgid "pages.UsingBreak.steps.final_text.text"
msgstr ""
"Świetnie!\n"
"\n"
"Typowe rozwiązanie wygląda mniej więcej tak:\n"
"\n"
"__code0__\n"
"\n"
"Twoje rozwiązanie prawdopodobnie jest podobne. Jest w porządku, ale trochę niewydajne.\n"
"To dlatego, że pętla będzie iterować przez całą listę nawet jeśli znajdzie element na początku.\n"
"Możesz zatrzymać dowolną pętlę używając instrukcji `break`, na przykład:\n"
"\n"
"__code1__\n"
"\n"
"To jest równie poprawne, ale pomija niepotrzebne iteracje i sprawdzenia po znalezieniu elementu.\n"
"Możesz użyć `snoop`, żeby zobaczyć różnicę."

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.0.text"
msgstr "Będziesz potrzebować pętli."

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.1.text"
msgstr "Będziesz potrzebować instrukcji `if`."

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.2.text"
msgstr "Będziesz potrzebować operatora porównania."

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.3.text"
msgstr "Konkretnie `==`."

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.4.text"
msgstr "Potrzebujesz zmiennej logicznej, którą wydrukujesz na końcu."

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.5.text"
msgstr ""
"Jeśli znajdziesz element na liście, powinieneś ustawić tą zmienną na `True`."

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.6.text"
msgstr "Gdy już znajdziesz element, nie możesz go 'odnaleźć'."

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.7.text"
msgstr ""
"To oznacza, że raz ustawiona zmienna na `True`, nigdy nie powinna być "
"ustawiona na coś innego po tym."

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.8.text"
msgstr "Nie używaj `else`."

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.9.text"
msgstr ""
"Nie ma powodu, aby kiedykolwiek ustawiać zmienną na `False` wewnątrz pętli."

#. https://futurecoder.io/course/#UsingBreak
msgid "pages.UsingBreak.steps.list_contains_exercise.text"
msgstr ""
"Ćwiczenie: napisz program, który przyjmuje listę i wartość i sprawdza,\n"
"czy lista zawiera daną wartość. Na przykład, dla:\n"
"\n"
"    __no_auto_translate__\n"
"    things = ['This', 'is', 'a', 'list']\n"
"    thing_to_find = 'is'\n"
"\n"
"powinien wyświetlić `True`, ale dla:\n"
"\n"
"    __no_auto_translate__\n"
"    thing_to_find = 'other'\n"
"\n"
"powinien wyświetlić `False`."

#. https://futurecoder.io/course/#UsingBreak
msgid "pages.UsingBreak.title"
msgstr "Użycie `break` do wcześniejszego zakończenia pętli"

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingDictionaries.steps.dna_part1.text"
msgstr ""
"Nieźle! Ale mogłeś zauważyć, że wygląda to trochę niezgrabnie. Dlaczego musimy określać `'dog'` i `'box'` zarówno w `cart` jak i `quantities`?\n"
"Na następnej stronie przyjrzymy się, jak pętlować bezpośrednio po kluczach słownika,\n"
"żebyśmy mogli pozbyć się argumentu `cart`.\n"
"\n"
"Ale najpierw, poćwiczmy trochę więcej to, czego się nauczyliśmy.\n"
"\n"
"[Wcześniej w kursie](#IntroducingElif) przyjrzeliśmy się konwertowaniu jednej nici DNA\n"
"na nową nić z pasującymi nukleotydami.\n"
"Oto wersja tego kodu używająca funkcji. Zastępuje każdą literę w wejściowym `string`\n"
"inną.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.0.text"
msgstr ""
"To wciąż jest bardzo podobne do poprzednich ćwiczeń, ale z ciągami znaków "
"zamiast liczb."

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.1.text"
msgstr "Musisz tylko pomyśleć o kluczach i wartościach `d`."

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.2.text"
msgstr "Musisz uzyskać poprawne wartości, aby zbudować zwracany ciąg znaków."

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.3.text"
msgstr "Możesz zasadniczo zastąpić cały łańcuch `if/elif` jedną linią."

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.4.text"
msgstr "Ta linia po prostu musi użyć `d` do uzyskania poprawnej wartości."

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.5.text"
msgstr "Pamiętaj, że kluczami `d` są znaki w `string`."

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code0__:
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27AGTAGCGTCCTTAGTTACAGGATGGCTTAT%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27TCATCGCAGGAATCAATGTCCTACCGAATA%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.expected
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.original
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.substitute
msgid "pages.UsingDictionaries.steps.dna_part2.text"
msgstr ""
"Teraz możemy użyć słowników, aby ten kod uczynić krótszym i bardziej ogólnym, aby mógł być używany do innych celów.\n"
"\n"
"Twoim zadaniem jest dodanie kolejnego argumentu do funkcji `substitute`: słownika `d`.\n"
"Klucze `d` reprezentują znaki\n"
"w pierwszym argumencie `string`, które powinny być zastąpione odpowiadającymi im wartościami `d`. Na przykład, `'A': 'T'`\n"
"oznacza, że `'A'` powinno być zastąpione przez `'T'`:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Ta wersja `substitute` powinna działać dla każdych argumentów, gdzie wszystkie znaki w `string` są kluczami w `d`.\n"
"Nie potrzeba więcej instrukcji `if`!"

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code0__:
#.     def substitute(string, d):
#.         result = ""
#.         for letter in string:
#.             result += d[letter]
#.         return result
#.     plaintext = 'helloworld'
#.     encrypted = 'qpeefifmez'
#.     letters = {'h': 'q', 'e': 'p', 'l': 'e', 'o': 'f', 'w': 'i', 'r': 'm',
#. 'd': 'z'}
#.     reverse = {'q': 'h', 'p': 'e', 'e': 'l', 'f': 'o', 'i': 'w', 'm': 'r',
#. 'z': 'd'}
#.     assert_equal(substitute(plaintext, letters), encrypted)
#.     assert_equal(substitute(encrypted, reverse), plaintext)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27helloworld%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27qpeefifmez%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.encrypted
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.letter
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.letters
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.plaintext
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.reverse
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.substitute
msgid "pages.UsingDictionaries.steps.final_text.text"
msgstr ""
"Dobrze! Oto przykład, jak ta funkcja może być również używana do szyfrowania i odszyfrowywania sekretnych wiadomości:\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    def substitute(string, d):\n"
"        result = \"\"\n"
"        for letter in string:\n"
"            result += d[letter]\n"
"        return result\n"
"\n"
"    plaintext = 'helloworld'\n"
"    encrypted = 'qpeefifmez'\n"
"    letters = {'h': 'q', 'e': 'p', 'l': 'e', 'o': 'f', 'w': 'i', 'r': 'm', 'd': 'z'}\n"
"    reverse = {'q': 'h', 'p': 'e', 'e': 'l', 'f': 'o', 'i': 'w', 'm': 'r', 'z': 'd'}\n"
"    assert_equal(substitute(plaintext, letters), encrypted)\n"
"    assert_equal(substitute(encrypted, reverse), plaintext)\n"
"\n"
"Ta sama funkcja działa w obu kierunkach, wystarczy przekazać jej inne słowniki.\n"
"\n"
"Dwa słowniki są prawie takie same, po prostu zamieniamy klucz i wartość w każdej parze.\n"
"Więc żeby zaszyfrować, zastępujemy `e` przez `p`, a żeby odszyfrować, zmieniamy `p` z powrotem na `e`.\n"
"\n"
"Zauważ, że `'e'` jest zarówno kluczem jak i wartością w `letters`.\n"
"\n"
"Sprawdzanie `letters['e']` oznacza, że pytamy o `'e'` jako *klucz*, więc to daje `'p'`.\n"
"Pamiętaj, że nie możemy użyć `letters`, aby zapytać, który klucz jest skojarzony z `'e'` jako *wartość*.\n"
"Ale w tym przypadku możemy użyć innego słownika do tego: `reverse['e']` daje `'l'`,\n"
"a `letters['l']` daje znowu `'e'`.\n"
"\n"
"Wkrótce napiszesz funkcję do automatycznego tworzenia słownika jak `reverse`,\n"
"czyli `reverse = swap_keys_values(letters)`."

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.0.text"
msgstr "Pamiętaj, że `prices` to słownik."

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.1.text"
msgstr "Aby uzyskać wartość w słowniku, potrzebujesz klucz."

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.2.text"
msgstr "Kluczami dla `prices` są przedmioty w `cart`."

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code2__:
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#.     # __code0__:
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#.     # __code1__:
#.     prices = {'apple': 2, 'apple': 3}
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cart
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.UsingDictionaries.steps.shopping_cart1.text"
msgstr ""
"Zobaczmy słowniki w prawdziwym problemie życiowym. Wyobraź sobie, że tworzysz internetowy sklep.\n"
"Ceny wszystkich swoich produktów trzymasz w słowniku:\n"
"\n"
"__code0__\n"
"\n"
"Tu widać jeden z problemów związanych z wyszukiwaniem wartości w słowniku.\n"
"Co by było `prices[100]`? `'dog'`? `'cat'`? `['dog', 'cat']`?\n"
"Ta sama wartość może się powtarzać wiele razy w słowniku.\n"
"Z drugiej strony, klucze muszą być unikalne. Wyobraź sobie, że twoje ceny zaczynają się od tego:\n"
"\n"
"__code1__\n"
"\n"
"Ile kosztuje jabłko? Wiemy, że to `prices['apple']`, ale czy to `2` czy `3`?\n"
"Jasne, że powinna być tylko jedna cena, więc nie wolno mieć zduplikowanych kluczy.\n"
"\n"
"W każdym razie to jest normalny sklep, gdzie rzeczy mają jedną cenę.\n"
"Ten normalny sklep ma normalnych klientów z normalnymi listami zakupów jak `['apple', 'box', 'cat']`.\n"
"A chociaż twoi klienci mają kalkulatory w swoich kieszeniach, to nadal oczekują, że sam dodasz wszystkie ceny\n"
"i powiesz im, ile to wszystko będzie kosztować, bo tak robią normalne sklepy.\n"
"\n"
"Więc napiszmy funkcję, która to zrobi. Uzupełnij poniższą funkcję, zwłaszcza linię `price = ...`\n"
"\n"
"    __copyable__\n"
"__code2__"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.0.text"
msgstr "Pamiętaj, że klucze `prices` i `quantities` są takie same."

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.1.text"
msgstr ""
"To jest bardzo podobne do poprzedniego ćwiczenia, po prostu trenujemy."

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.2.text"
msgstr "`price` powinno być wartością z `prices`, podobnie jak `quantity`."

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.3.text"
msgstr "Jakiego klucza należy użyć do uzyskania każdej wartości?"

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code0__:
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cart
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantity
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.UsingDictionaries.steps.shopping_cart4.text"
msgstr ""
"Perfekcyjnie! Publikujesz swoją stronę internetową i zaczynasz marzyć, jak bogatym się staniesz.\n"
"\n"
"Ale wkrótce otrzymujesz skargę od klienta, który chce kupić 5 milionów psów... i 2 skrzynki, aby je w nich umieścić.\n"
"\n"
"Twoja strona internetowa pozwala na zakup tych samych przedmiotów kilka razy, np. `total_cost(['box', 'box'], {...})` działa,\n"
"ale muszą dodawać każdy przedmiot pojedynczo, i z jakiegoś powodu ten klient nie chce kliknąć\n"
"'Dodaj do koszyka' 5 milionów razy. Ludzie są tacy leniwi!\n"
"\n"
"Oto nowy kod, który musisz naprawić:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Dodaliśmy kolejny parametr zwany `quantities` do `total_cost`.\n"
"Teraz `cart` wciąż jest listą ciągów znaków, ale nie ma żadnych duplikatów.\n"
"`quantities` jest słownikiem, gdzie klucze to przedmioty w `cart`, a odpowiadające im wartości są ilością\n"
"tego przedmiotu, który klient chce kupić."

#. https://futurecoder.io/course/#UsingDictionaries
msgid "pages.UsingDictionaries.title"
msgstr "Praktyczne wykorzystanie słowników"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.final_text.text"
msgstr ""
"Hurra! Już bez cudzysłowów! Wyjaśnimy, co dzieje się w tym kodzie później. "
"Na razie wystarczy wiedzieć, że `print(<coś>)` wyświetla `<coś>` w konsoli. "
"W szczególności pokazuje rzeczywistą zawartość napisów, na której nam "
"zazwyczaj zależy, zamiast przedstawienia napisów odpowiednich dla kodu, "
"które zawierają rzeczy takie jak cudzysłowy. Słowo `print` tutaj nie ma nic "
"wspólnego drukarką ani drukowaniem."

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.first_print.text"
msgstr ""
"Te cudzysłowy przy napisach zaczynają być irytujące. Spróbuj uruchomić to:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.goodbye_plus_name.text"
msgstr "Obserwuj efekt tej zmiany uruchamiając `__program__` ponownie."

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.hello_plus_name.text"
msgstr ""
"Możesz używać zmiennych w obliczeniach dokładnie tak samo, jak używałbyś literałów. Na przykład spróbuj:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid ""
"pages.UsingVariables.steps.name_assign.messages.assigned_something_else.text"
msgstr ""
"Umieść `your_name` przed `=` aby stworzyć zmienną o nazwie `your_name`."

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid "pages.UsingVariables.steps.name_assign.messages.empty_string.text"
msgstr "Do tego ćwiczenia wybierz niepusty napis (string)"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid ""
"pages.UsingVariables.steps.name_assign.messages.name_equals_something_else.text"
msgstr ""
"Masz prawidłową część `your_name = `, teraz po prawej stronie `=` umieść "
"napis (użyj cudzysłowów)."

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid "pages.UsingVariables.steps.name_assign.messages.starts_with_space.text"
msgstr "Do tego ćwiczenia wybierz imię, które nie zaczyna się od spacji."

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.name_assign.requirements"
msgstr ""
"Uruchom coś podobnego do `word = 'Hello'`, ale zamień `word` na `your_name`."

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     word = 'Hello'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello%27
msgid "pages.UsingVariables.steps.name_assign.text"
msgstr ""
"Wcześniej utworzyliśmy zmienną o nazwie `word` z wartością `'Hello'` przy użyciu tego kodu:\n"
"\n"
"__code0__\n"
"\n"
"Teraz utwórz zmienną o nazwie `your_name`, której wartością jest inny napis (string).\n"
"\n"
"(Znak `_` w `your_name` to *podkreślnik*. Używaj go do rozdzielenia słów, kiedy potrzebujesz nazwy zmiennej zawierającej kilka słów. Możesz go wpisać na większości klawiatur, naciskając Shift oraz myślnik/pauza/minus (`-`).)"

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.word_assign_goodbye.text"
msgstr ""
"Doskonale!\n"
"\n"
"Zmienne mogą również zmieniać swoje wartości w czasie. Aktualnie zmienna `word` ma wartość `'Hello'`. Możesz zmienić jej wartość w ten sam sposób, w jaki ją ustawiałeś po raz pierwszy. Uruchom to:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#UsingVariables
msgid ""
"pages.UsingVariables.steps.word_plus_name.special_messages.bad_word.text"
msgstr ""
"Ups, musisz ustawić `word = 'Hello'` zanim będziemy mogli kontynuować."

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.word_plus_name.text"
msgstr ""
"Ewentualnie możesz po prostu dodać zmienne do siebie. Spróbuj:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.0.text"
msgstr "Musisz użyć `+` dwa razy, tak jak w 1+2+3."

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.1.text"
msgstr ""
"Twoja odpowiedź powinna zawierać mieszankę zmiennych (bez cudzysłowu) i "
"literałów łańcuchowych (w cudzysłowie)."

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.2.text"
msgstr "Musisz mieć znak spacji wewnątrz cudzysłowów."

#. https://futurecoder.io/course/#UsingVariables
msgid ""
"pages.UsingVariables.steps.word_plus_name_with_space.special_messages.bad_word.text"
msgstr ""
"Ups, musisz ustawić `word = 'Hello'` zanim będziemy mogli kontynuować."

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.word_plus_name_with_space.text"
msgstr ""
"Ups... to nie wygląda dobrze. Czy możesz zmodyfikować powyższy kod tak, aby "
"między słowem a twoim imieniem była spacja?"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.title"
msgstr "Używanie zmiennych i `print()`"

#. https://futurecoder.io/course/#WritingPrograms
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.WritingPrograms.steps.editor_hello_world.text"
msgstr ""
"Nadszedł czas, aby przestać robić wszystko w konsoli. W prawym górnym rogu można zobaczyć *edytor*. Jest to miejsce, w którym możesz pisać i uruchamiać dłuższe programy. Konsola jest świetna i powinieneś nadal z niej korzystać do eksploracji, ale to w edytorze robi się prawdziwe programy.\n"
"\n"
"Wpisz poniższy program do edytora, a następnie kliknij przycisk 'Uruchom':\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#WritingPrograms
msgid "pages.WritingPrograms.steps.final_text.text"
msgstr ""
"Gratulacje, uruchomiłeś swój pierwszy rzeczywisty program!\n"
"\n"
"Poświęć trochę czasu, aby zrozumieć ten program. Python wykonuje każdą linię po kolei, od góry do dołu. Powinieneś spróbować symulować ten proces w swojej głowie - zastanów się, co robi każda linia. Zobacz, jak zmieniła się wartość zmiennej 'word' i jaki miało to wpływ. Zauważ, że gdy używane jest wielokrotnie 'print', każda rzecz (w tym przypadku 'Hello World' i 'Goodbye World') jest wyświetlana we własnej linii.\n"
"\n"
"Kilka rzeczy, które warto wspomnieć o programach w edytorze:\n"
"\n"
"1. Program jest uruchamiany w konsoli, co oznacza, że zmienne zdefiniowane w programie istnieją teraz w konsoli z ostatnimi wartościami, które miały w programie. Pozwala Ci to badać w konsoli po zakończeniu programu. Na przykład 'name' ma teraz wartość 'World' w konsoli.\n"
"2. Programy uruchamiają się w izolacji - nie zależą od żadnych wcześniej zdefiniowanych zmiennych. Konsola jest resetowana i wszystkie poprzednie zmienne są czyszczone. Więc pomimo że 'word' obecnie istnieje w konsoli, jeśli usuniesz pierwszą linię programu i uruchomisz go ponownie, otrzymasz błąd o niezdefiniowanej zmiennej 'word'.\n"
"3. Jeśli wpiszesz kod w konsoli i ma on wartość, ta wartość zostanie automatycznie wyświetlona. Nie dzieje się tak w przypadku programów w edytorze - musisz wypisać wartości. Jeśli usuniesz 'print()' z programu, zmieniając dwie linie na po prostu 'word + ' ' + name', nic nie zostanie wyświetlone.\n"
"\n"
"Polecam, sprawdź samodzielnie wszystkie te rzeczy."

#. https://futurecoder.io/course/#WritingPrograms
msgid "pages.WritingPrograms.title"
msgstr "Pisanie programów"
