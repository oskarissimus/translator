#
msgid ""
msgstr ""
"Project-Id-Version: futurecoder\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: POEditor.com\n"



#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.steps.first_for_loop.text"
msgstr ""
"Dobre wiadomości! Przekroczyłeś już nudne podstawy. Możemy zacząć pisać ciekawe programy i trochę się zabawić. Jednym z najpotężniejszych pojęć w programowaniu jest *pętla*, która pozwala powtarzać ten sam kod wielokrotnie. Python posiada dwa rodzaje pętli: pętlę `for` i pętlę `while`. Oto przykład pętli for, spróbuj uruchomić ten program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.steps.final_text.text"
msgstr ""
"Możesz odczytać kod prawie jak zwykły angielski:\n"
"\n"
"> Dla każdego znaku w łańcuchu znaków `name`, wydrukuj ten znak.\n"
"\n"
"Każdy znak to po prostu normalny łańcuch znaków. `character` to normalna zmienna, której przed wykonaniem kodu za `:` przypisywana jest nowa wartość. Więc powyższy kod jest równoważny z:\n"
"\n"
"    __no_auto_translate__\n"
"    name = 'World'\n"
"\n"
"    character = 'W'\n"
"    print(character)\n"
"\n"
"    character = 'o'\n"
"    print(character)\n"
"\n"
"    character = 'r'\n"
"    print(character)\n"
"\n"
"    character = 'l'\n"
"    print(character)\n"
"\n"
"    character = 'd'\n"
"    print(character)\n"
"\n"
"Zauważ, że moglibyśmy użyć innej nazwy zmiennej, `character` po prostu czyni to jaśniejszym.\n"
"\n"
"Pętla for zazwyczaj podąża za tą strukturą:\n"
"\n"
"    for <zmienna> in <kolekcja>: <kod do powtórzenia>\n"
"\n"
"`for`, `in` i `:` są wszystkie niezbędne."