msgid "pages.MultiLineExpressions.steps.final_text.text"
msgstr ""
"Więc jeśli dostaniesz tajemniczy `SyntaxError`, upewnij się, że nie "
"podzieliłeś linii w niewłaściwy sposób!"

msgid "pages.MultiLineExpressions.steps.invalid_multiline.program"
msgstr ""
"is_friend = name == \"Alice\" lub\n"
"            name == \"Bob\""

msgid "pages.MultiLineExpressions.steps.invalid_multiline.text"
msgstr ""
"Nasze linie kodu zaczynają być dość długie.\n"
"Na szczęście Python oferuje kilka sposobów na podzielenie jednego polecenia na wiele linii,\n"
"ale nie dzieje się to automatycznie. Musisz się upewnić, że Python rozumie, że właśnie to robisz.\n"
"Na przykład, ten kod jest nieprawidłową składnią i spowoduje błąd:\n"
"\n"
"__program_indented__"

msgid "pages.MultiLineExpressions.steps.valid_multiline.text"
msgstr ""
"Python próbuje zinterpretować to jako dwie oddzielne linie kodu i się gubi. Musisz mu powiedzieć, że\n"
"pierwsza linia kontynuuje się na drugiej linii.\n"
"\n"
"Jednym ze sposobów jest dodanie `\\` na końcu linii, aby 'uciec' przed podziałem linii.\n"
"\n"
"Innym sposobem jest upewnienie się, że podział linii jest zawarty w jakimś rodzaju nawiasów. Wtedy kontynuacja linii\n"
"jest domyślna, ponieważ Python będzie czekał, aż wszystkie nawiasy zostaną zamknięte zanim\n"
"uzna linię za kompletną. Jeśli już masz nawiasy, na przykład dlatego, że wywołujesz funkcję\n"
"lub tworzysz listę, możesz nie musieć nic robić! W przeciwnym wypadku możesz dodać nawiasy do dowolnego wyrażenia\n"
"aby zasugerować kontynuację linii.\n"
"\n"
"Oto kilka przykładów. Zwróć szczególną uwagę na detale.\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.MultiLineExpressions.title"
msgstr "Wieloliniowe instrukcje"
