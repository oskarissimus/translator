msgid "pages.IntroducingNestedLists.steps.double_subscripting.requirements"
msgstr ""
"Uruchom `print(strings[1][0])` lub coś podobnego używając `birdseye`, aby "
"zobaczyć jak to działa."

msgid "pages.IntroducingNestedLists.steps.double_subscripting.text"
msgstr ""
"Możesz to rozwiązać tak:\n"
"\n"
"__code0__\n"
"\n"
"Istnieje krótszy sposób. `strings[1]` to wyrażenie jak każde inne i indeksowanie jak `[0]`\n"
"może być użyte na dowolnym wyrażeniu, nie tylko na zmiennych.\n"
"Więc możesz pominąć zmienną pośrednią i zrobić to jedną linią:\n"
"\n"
"__code1__\n"
"\n"
"Przyjrzyj się dobrze tej składni. Jeśli wygląda na nową i wyszukaną, to nie jest.\n"
"To tylko zwykła składnia indeksowania, zastosowana dwa razy.\n"
"Spróbuj użyć `birdseye`, aby zobaczyć jak Python rozkłada to na mniejsze części."

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.0.text"
msgstr "To jest bardzo podobne do poprzedniego ćwiczenia."

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.1.text"
msgstr ""
"Czy pamiętasz jak uzyskać dostęp do ostatniej pozycji na liście (bez użycia "
"`len`)?"

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.2.text"
msgstr "Podobnie jak uzyskujesz dostęp do przedostatniej pozycji na liście?"

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.3.text"
msgstr "Jeśli nie pamiętasz, możesz wyszukać to w Google!"

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.4.text"
msgstr "Indeksowanie działa podobnie na listach i ciągach znaków."

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.5.text"
msgstr ""
"Czy otrzymujesz błąd `index out of range`? Czy dotyczy on ciągu czy listy? "
"Dlaczego?"

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.6.text"
msgstr "Upewnij się, że nie mylisz kolejności indeksu listy i indeksu ciągu."

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.7.text"
msgstr "Użyj `birdseye` jeśli masz problemy."

msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.text"
msgstr ""
"Używając tej składni, zmodyfikuj program tak, aby wydrukować ostatnią literę przedostatniego ciągu na liście `strings`.\n"
"Musisz użyć pojedynczego wyrażenia podobnie jak powyżej i nie wolno ci używać `len`.\n"
"Twoje rozwiązanie powinno działać dla dowolnej niepustej listy ciągów znaków.\n"
"Przy poprzednim przykładzie wejściowym powinno wydrukować `f`."

msgid "pages.IntroducingNestedLists.steps.final_text.text"
msgstr ""
"Świetnie! Teraz bardzo dobrze rozumiesz zagnieżdżone indeksowanie.\n"
"\n"
"Cały czas możemy używać wszystkich metod i funkcji list, które wcześniej poznaliśmy.\n"
"Na przykład możemy dodać nowe słowo do ostatniej podlisty `strings` używając `append`,\n"
"żeby umieścić je po `'you'`:\n"
"\n"
"__code0__\n"
"\n"
"Przecież podlista `strings[1]` to wciąż lista jak każda inna!\n"
"\n"
"Na następnej stronie dowiemy się, jak iterować po zagnieżdżonych listach."

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.0"
msgstr "hello"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.1"
msgstr "there"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.10"
msgstr "a"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.2"
msgstr "how"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.3"
msgstr "are"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.4"
msgstr "you"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.5"
msgstr "['hello', 'there']"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.6"
msgstr "['how', 'are', 'you']"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.7"
msgstr "h"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.8"
msgstr "t"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.9"
msgstr "e"

msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.program"
msgstr ""
"strings = [['hello', 'there'], ['how', 'are', 'you']]\n"
"print(strings[1][0])"

msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.text"
msgstr ""
"Dobra robota!\n"
"\n"
"Zastosowanie indeksowania dwa razy może być nawet bardziej potężne.\n"
"Możemy użyć go nie tylko na liście ciągów znaków, ale także na *liście list*.\n"
"Na przykład, co wydrukuje poniższy program?\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.0.text"
msgstr "Jak możesz uzyskać dostęp do drugiego ciągu na liście?"

msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.1.text"
msgstr "A jak uzyskujesz dostęp do konkretnego znaku w ciągu?"

msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.2.text"
msgstr "Pamiętaj, że indeksowanie list i ciągów znaków jest bardzo podobne."

msgid "pages.IntroducingNestedLists.steps.string_list_exercise.text"
msgstr ""
"Ćwiczenie: mając daną listę ciągów znaków, wydrukuj pierwszą literę drugiego ciągu na liście. Na przykład, mając:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"powinieneś wydrukować `d`."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.0.text"
msgstr "To jest bardzo podobne do poprzednich ćwiczeń."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.1.text"
msgstr "Ile razy musisz użyć indeksowania?"

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.2.text"
msgstr "Najpierw musisz uzyskać dostęp do podlisty."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.3.text"
msgstr "Potem ciągu na tej podliście."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.4.text"
msgstr "Potem litery w tym ciągu."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.5.text"
msgstr "Użyj `birdseye` jeśli masz problemy."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.text"
msgstr ""
"Jak widzisz Python pozwala nam mieć *zagnieżdżone listy*: listę, w której każdy element to inna lista (nazywamy je *podlistami*).\n"
"\n"
"Możemy używać indeksowania nawet więcej niż dwa razy.\n"
"Napisz program który bierze zagnieżdżoną listę `strings` jak powyżej,\n"
"i wydrukuje **pierwszą literę trzeciego ciągu na drugiej podliście**.\n"
"Użyj tylko pojedynczego wyrażenia, jak w poprzednim ćwiczeniu.\n"
"Dla listy podanej powyżej powinno wydrukować `y`."

msgid "pages.IntroducingNestedLists.title"
msgstr "Wprowadzenie do zagnieżdżonych list"
