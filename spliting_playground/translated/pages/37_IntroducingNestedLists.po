#
msgid ""
msgstr ""

msgid "pages.IntroducingNestedLists.steps.double_subscripting.requirements"
msgstr ""
"Run `print(strings[1][0])` or something similar using `birdseye` to see how "
"it works."

msgid "pages.IntroducingNestedLists.steps.double_subscripting.text"
msgstr ""
"You may have solved it like this:\n"
"\n"
"__code0__\n"
"\n"
"There's a shorter way. `strings[1]` is an expression like any other, and subscripting like `[0]`\n"
"can be used on any expression, not just variables.\n"
"So you can skip the intermediate variable and just do it in one line:\n"
"\n"
"__code1__\n"
"\n"
"Take a good look at this syntax. If it looks new and fancy, it's not.\n"
"It's just the usual syntax for subscripting, applied twice.\n"
"Try it in `birdseye` to see how Python breaks it down into smaller pieces."

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.0.text"
msgstr "This is very similar to the previous exercise."

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.1.text"
msgstr ""
"Do you remember how to access the last position of a list (without using "
"`len`)?"

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.2.text"
msgstr "Similarly how do you access the second-to-last position in a list?"

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.3.text"
msgstr "If you can't remember, you can Google it!"

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.4.text"
msgstr "Indexing works similarly on lists and strings."

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.5.text"
msgstr ""
"Do you get an `index out of range` error? Is it for a string, or a list? "
"Why?"

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.6.text"
msgstr ""
"Make sure you are not confusing the order of the list index and the string "
"index."

msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.7.text"
msgstr "Use `birdseye` if you're having trouble."

msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.text"
msgstr ""
"Using this syntax, modify the program to print the last letter of the second-to-last string in the list `strings`.\n"
"You must use a single expression like above, and you are not allowed to use `len`.\n"
"Your solution should work for any non-empty list of strings.\n"
"For the previous example input it should print `f`."

msgid "pages.IntroducingNestedLists.steps.final_text.text"
msgstr ""
"Excellent! You now understand nested subscripting very well.\n"
"\n"
"We can still use all the list methods and functions we learned before.\n"
"For example we can add a new word to the last sublist of `strings` with `append`,\n"
"to come after `'you'`:\n"
"\n"
"__code0__\n"
"\n"
"After all, the sublist `strings[1]` is still a list like any other!\n"
"\n"
"On the next page we will learn about looping over nested lists."

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.0"
msgstr "hello"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.1"
msgstr "there"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.10"
msgstr "a"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.2"
msgstr "how"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.3"
msgstr "are"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.4"
msgstr "you"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.5"
msgstr "['hello', 'there']"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.6"
msgstr "['how', 'are', 'you']"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.7"
msgstr "h"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.8"
msgstr "t"

msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.9"
msgstr "e"

msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.program"
msgstr ""
"strings = [['hello', 'there'], ['how', 'are', 'you']]\n"
"print(strings[1][0])"

msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.text"
msgstr ""
"Well done!\n"
"\n"
"Applying subscripting twice can be even more powerful.\n"
"We can use it on not only a list of strings, but on *a list of lists* too.\n"
"For example, what does the following program print?\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.0.text"
msgstr "How can you access the second string in the list?"

msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.1.text"
msgstr "Then how do you access a particular letter in a string?"

msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.2.text"
msgstr "Remember that the indexing of lists and strings are very similar."

msgid "pages.IntroducingNestedLists.steps.string_list_exercise.text"
msgstr ""
"Exercise: given a list of strings, print the first letter of the second string in the list. For example, given:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"you should print `d`."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.0.text"
msgstr "This is very similar to the previous exercises."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.1.text"
msgstr "How many times do you need to use subscripting?"

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.2.text"
msgstr "First you need to access a sublist."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.3.text"
msgstr "Then a string in that sublist."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.4.text"
msgstr "Then a letter in that string."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.5.text"
msgstr "Use `birdseye` if you're having trouble."

msgid "pages.IntroducingNestedLists.steps.triple_subscripting.text"
msgstr ""
"As you can see Python allows us to have *nested lists*: a list where each element is another list (we refer to them as *sublists*).\n"
"\n"
"We can use subscripting even more than twice.\n"
"Write a program that takes a nested list `strings` like above,\n"
"and prints the **first letter of the third string in the second sublist**.\n"
"Use only a single expression like in the previous exercise.\n"
"For example, for the list above, it should print `y`."

msgid "pages.IntroducingNestedLists.title"
msgstr "Introducing Nested Lists"
