#
msgid ""
msgstr ""

msgid "pages.IntroducingIfStatements.steps.introducing_booleans.text"
msgstr ""
"Now we're going to learn how to tell the computer to make decisions and only run code\n"
"under certain conditions. For this we will need a new type of value. You've seen\n"
"numbers and strings, now meet *booleans*. There are only two boolean values:\n"
"`True` and `False`. Try this program:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingIfStatements.steps.first_if_statements.text"
msgstr ""
"Booleans are meant to be used inside *if statements* (sometimes also called *conditionals*).\n"
"\n"
"Here is a simple example for you to run:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingIfStatements.steps.excited_example.text"
msgstr ""
"Note how the code inside the first `if` statement ran, but not the second.\n"
"\n"
"In general, an `if` statement looks like this:\n"
"\n"
"    if <condition>:\n"
"        <body>\n"
"\n"
"where `<condition>` is any expression which evaluates to a boolean and `<body>` is an **indented** list\n"
"of one or more statements. The structure is quite similar to a `for` loop. Note the colon (`:`) which\n"
"is essential.\n"
"\n"
"When the computer sees `if <condition>:`, it checks if `<condition>` is `True`. If it is, it runs the body.\n"
"If not, it skips it and continues to the rest of the program.\n"
"\n"
"Here's a more interesting example for you to run:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingIfStatements.steps.excited_false_example.text"
msgstr ""
"(Remember that `sentence += '!'` means `sentence = sentence + '!'`)\n"
"\n"
"Change `excited = True` to `excited = False` and run the program again to see what the difference is."

msgid "pages.IntroducingIfStatements.steps.excited_confused_exercise.text"
msgstr ""
"Time for an exercise. Modify the program above to include an extra\n"
"boolean parameter `confused`, so the program should start like this:\n"
"\n"
"__code0__\n"
"\n"
"(`sentence` can be any string and the two booleans can be either `True` or `False`)\n"
"\n"
"When `confused` is true, the printed sentence should have a question mark added to the end.\n"
"If both `confused` and `excited` are true, the sentence should end with `!?`."

msgid "pages.IntroducingIfStatements.steps.final_text.text"
msgstr ""
"Well done! This program can do 4 different things depending on how you combine `excited`\n"
"and `confused`. Try them out if you want."

msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.0.text"
msgstr ""
"You only need to add a few lines to the existing program. All the existing "
"code should be left as is."

msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.1.text"
msgstr "The code that you add should be very similar to the existing code."

msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.0"
msgstr "Hello World"

msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.1"
msgstr "Hello World!"

msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.0"
msgstr "Hello World"

msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.1"
msgstr "Hello World!"

msgid "pages.IntroducingIfStatements.title"
msgstr "Introducing If Statements"

msgid "pages.IntroducingIfStatements.steps.excited_false_example.requirements"
msgstr ""
"Run the program from the previous step, but replace `True` with `False`, so "
"`excited = False`."
