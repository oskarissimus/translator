#
msgid ""
msgstr ""

msgid "pages.IntroducingIfStatements.steps.introducing_booleans.text"
msgstr ""
"Teraz nauczymy się, jak powiedzieć komputerowi, aby podejmował decyzje i wykonywał kod\n"
"tylko pod pewnymi warunkami. Do tego będziemy potrzebować nowego rodzaju wartości. Widziałeś już\n"
"liczby i łańcuchy znaków, teraz spotkaj się z *wartościami logicznymi*. Istnieją tylko dwie wartości logiczne:\n"
"`True` i `False`. Wypróbuj ten program:\n"
"\n"
"__program_wcięty__"

msgid "pages.IntroducingIfStatements.steps.first_if_statements.text"
msgstr ""
"Wartości logiczne są przeznaczone do użycia wewnątrz *instrukcji warunkowych* (nazywanych czasami również *warunkami*).\n"
"\n"
"Oto prosty przykład, który możesz uruchomić:\n"
"\n"
"__program_wcięty__"

msgid "pages.IntroducingIfStatements.steps.excited_example.text"
msgstr ""
"Zauważ, że kod znajdujący się wewnątrz pierwszej instrukcji `if` został wykonany, ale kod drugiej nie.\n"
"\n"
"Generalnie instrukcja `if` wygląda tak:\n"
"\n"
"    if <warunek>:\n"
"        <ciało>\n"
"\n"
"gdzie `<warunek>` to dowolne wyrażenie, które daje wynik w postaci wartości logicznej, a `<ciało>` to **wcięta** lista\n"
"jednego lub więcej stwierdzeń. Struktura jest dość podobna do pętli `for`. Zwróć uwagę na dwukropek (`:`), który\n"
"jest niezbędny.\n"
"\n"
"Gdy komputer widzi `if <warunek>:`, sprawdza, czy `<warunek>` jest `True`. Jeśli tak, wykonuje ciało.\n"
"Jeśli nie, pomija je i kontynuuje resztę programu.\n"
"\n"
"Oto bardziej interesujący przykład, który możesz uruchomić:\n"
"\n"
"__program_wcięty__"

msgid "pages.IntroducingIfStatements.steps.excited_false_example.text"
msgstr ""
"(Pamiętaj, że `zdanie += '!'` oznacza `zdanie = zdanie + '!'`)\n"
"\n"
"Zmień `excited = True` na `excited = False` i uruchom program ponownie, aby zobaczyć różnicę."

msgid "pages.IntroducingIfStatements.steps.excited_confused_exercise.text"
msgstr ""
"Czas na ćwiczenie. Zmodyfikuj powyższy program, aby dodać dodatkowy\n"
"parametr logiczny `confused`, tak aby program zaczynał się tak:\n"
"\n"
"__code0__\n"
"\n"
"(`zdanie` może być dowolnym łańcuchem znaków, a dwie wartości logiczne mogą być albo `True`, albo `False`)\n"
"\n"
"Gdy `confused` jest prawdziwe (`True`), wydrukowane zdanie powinno mieć na końcu znak zapytania.\n"
"Jeśli zarówno `confused`, jak i `excited` są prawdziwe (`True`), zdanie powinno kończyć się na `!?`."

msgid "pages.IntroducingIfStatements.steps.final_text.text"
msgstr ""
"Brawo! Ten program może robić 4 różne rzeczy w zależności od tego, jak łączysz `excited`\n"
"i `confused`. Wypróbuj je, jeśli chcesz."

msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.0.text"
msgstr ""
"Do istniejącego programu trzeba tylko dodać kilka linii. Wszystkie istniejące "
"kody powinny pozostać takie, jakie są."

msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.1.text"
msgstr "Kod, który dodajesz, powinien być bardzo podobny do istniejącego kodu."

msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.0"
msgstr "Witaj Świecie"

msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.1"
msgstr "Witaj Świecie!"

msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.0"
msgstr "Witaj Świecie"

msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.1"
msgstr "Witaj Świecie!"

msgid "pages.IntroducingIfStatements.title"
msgstr "Wprowadzenie do Instrukcji Warunkowych"

msgid "pages.IntroducingIfStatements.steps.excited_false_example.requirements"
msgstr ""
"Uruchom program z poprzedniego kroku, ale zamień `True` na `False`, tak "
"żeby było `excited = False`."