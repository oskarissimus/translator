#
msgid ""
msgstr ""

msgid "pages.Types.steps.five_different_types.text"
msgstr ""
"Jak dotąd zobaczyliśmy różne rodzaje danych: ciągi znaków (strings), listy, liczby i wartości logiczne (booleans).\n"
"Nazywa się je *typami*. Każda wartość ma określony typ, który wpływa na jej zachowanie\n"
"i może być ujawniony za pomocą funkcji `type`:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.check_type_manually.text"
msgstr ""
"Python informuje najpierw, że `type('Hello World')` to `<class 'str'>`. Nie martw się teraz o `class`.\n"
"`str` to skrót od *string* (ciąg znaków).\n"
"\n"
"Następnie `True` to `bool` (skrót od *boolean* - wartość logiczna) i `[1, 2, 3]` ma typ `list` (lista).\n"
"\n"
"Zauważ, że są dwa typy numerów:\n"
"\n"
"- `int`, skrót od 'integer', jest dla liczb całkowitych, to znaczy bez ułamków czy punktów dziesiętnych.\n"
"- `float`, skrót od 'floating point number', jest dla liczb z punktem dziesiętnym i ewentualnie częścią ułamkową\n"
"\n"
"W większości przypadków nie musisz martwić się o różne typy liczbowe, ponieważ można mieszać oba przy wykonywaniu obliczeń matematycznych.\n"
"\n"
"Typy są wartościami, które mogą być wykorzystane na różne sposoby, podobnie jak inne wartości.\n"
"Na przykład, spróbuj tego w powłoce (shell):\n"
"\n"
"__program_indented__"

msgid "pages.Types.steps.different_types_look_same.text"
msgstr ""
"Wartości o różnych typach są zazwyczaj dość różne od siebie, ale mogą wyglądać tak samo, gdy są wydrukowane,\n"
"co może być mylące. Spróbuj tego:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(Możesz użyć `print(repr(123))` i `print(repr('123'))`, aby zauważyć różnicę. Co to jest `repr`? Wygoogluj to!)"

msgid "pages.Types.steps.plus_has_two_meanings.text"
msgstr ""
"Różne typy mają różne metody i obsługują różne operatory.\n"
"Ta sama metoda lub operator może również oznaczać różne rzeczy.\n"
"Na przykład zobacz, jak `+` ma różne znaczenia dla `str` i `int`:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.less_than_has_two_meanings.text"
msgstr ""
"Dla dwóch liczb całkowitych `+` działa jako dodawanie, natomiast dla dwóch ciągów znaków działa jako konkatenacja ciągów znaków.\n"
"Python automatycznie wywnioskuje znaczenie `+` z typów danych wejściowych.\n"
"Podobnie `<` działa inaczej na dwóch ciągach znaków i dwóch liczbach całkowitych:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.less_than_sorting_strings.text"
msgstr ""
"Więc `<` działa jak zwykłe 'mniej niż' między dwoma liczbami całkowitymi, ponieważ `13` jest mniejsze od `120`,\n"
"ale działa jako sortowanie słownikowe między dwoma ciągami znaków: `13` jest 'alfabetycznie' po `120`\n"
"ponieważ `3` jest po `2` w kolejności alfabetycznej.\n"
"\n"
"Zobacz jaką różnicę to robi podczas sortowania listy:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.common_type_errors.text"
msgstr ""
"Co się stanie, jeśli użyjesz operatora między `str` a `int`? Wypróbuj w powłoce:\n"
"\n"
"__program_indented__"

msgid "pages.Types.steps.fixing_type_errors_with_conversion.text"
msgstr ""
"Użycie ciągu znaków zamiast liczby całkowitej w `range` jak `range('5')`,\n"
"lub przy indeksowaniu listy jak `list['3']` także spowoduje błąd.\n"
"\n"
"Większość z tych problemów można rozwiązać poprzez konwersję ciągu znaków na liczbę całkowitą za pomocą funkcji `int`:\n"
"`int('5')` zwróci liczbę całkowitą `5`.\n"
"Podobnie, liczbę całkowitą można przekonwertować na ciąg znaków za pomocą funkcji `str`:\n"
"`str(5)` zwróci ciąg znaków `'5'`.\n"
"\n"
"Używając tej nowej wiedzy, napraw ten pokazany program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Poprawny program powinien wydrukować:\n"
"\n"
"    Starting... 1\n"
"    Starting... 2\n"
"    Starting... 3\n"
"    Go!\n"
"\n"
"Twoje rozwiązanie powinno działać dla dowolnej wartości zmiennej `number`."

msgid "pages.Types.steps.format_board_with_numbers.text"
msgstr ""
"Napisz ulepszoną wersję `format_board`, która zawiera numery rzędów i kolumn, tak jak tutaj:\n"
"\n"
"     123\n"
"    1XOX\n"
"    2 OO\n"
"    3 X\n"
"\n"
"To powinno działać dla plansz dowolnej jednocyfrowej wielkości. Oto przypadek testowy:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.final_text.text"
msgstr ""
"Wspaniale!\n"
"\n"
"Przy okazji, kiedy musisz skonkatenować ciągi znaków i liczby, pamiętaj, że możesz także\n"
"użyć f-stringów. Często wyglądają ładniej.\n"
"\n"
"Nauczyłeś się o typach w Pythonie oraz jak unikać powszechnych błędów poprzez konwersję typów.\n"
"Kontynuuj prace nad resztą projektu!"

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.0.text"
msgstr "W których miejscach ten kod jest uszkodzony?"

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.1.text"
msgstr "Są wartości, które muszą być przekonwertowane na inny typ."

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.2.text"
msgstr "Konkretnie jest `str`, które musi być przekonwertowane na `int`."

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.3.text"
msgstr "I jest `int`, które musi być przekonwertowane na `str`."

msgid "pages.Types.steps.format_board_with_numbers.hints.0.text"
msgstr ""
"Możesz zacząć od wykorzystania pomysłów z poprzedniego rozwiązania do `format_board`. Bardzo polecam użycie `join`!"

msgid "pages.Types.steps.format_board_with_numbers.hints.1.text"
msgstr "Pierwsza linia musi być potraktowana oddzielnie od reszty."

msgid "pages.Types.steps.format_board_with_numbers.hints.2.text"
msgstr "Pamiętaj, że `range` daje liczby w sposób: 0, 1, 2, ..."

msgid "pages.Types.steps.format_board_with_numbers.hints.3.text"
msgstr "Chcemy numerów na pierwszej linii takich jak: 1, 2, 3..."

msgid "pages.Types.steps.format_board_with_numbers.hints.4.text"
msgstr ""
"Każdy numer musi być przekonwertowany na ciąg znaków przed dodaniem do "
"pierwszego wiersza!"

msgid "pages.Types.steps.format_board_with_numbers.hints.5.text"
msgstr "Dla wierszy samej planszy zrób coś podobnego."

msgid "pages.Types.steps.format_board_with_numbers.hints.6.text"
msgstr ""
"Zacznij z listą składającą się tylko z pierwszej linii, którą wyżej zbudowałeś."

msgid "pages.Types.steps.format_board_with_numbers.hints.7.text"
msgstr ""
"Dodaj do listy ciąg znaków każdego wiersza, następnie połącz listę ze znakiem"
" nowej linii."

msgid "pages.Types.title"
msgstr "Typy"

msgid "pages.Types.steps.fixing_type_errors_with_conversion.disallowed.0.label"
msgstr "f-stringi"