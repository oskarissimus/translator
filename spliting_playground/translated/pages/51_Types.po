#
msgid ""
msgstr ""

msgid "pages.Types.steps.check_type_manually.text"
msgstr ""
"Python reports first that `type('Hello World')` is `<class 'str'>`. Don't worry about `class` for now.\n"
"`str` is short for *string*.\n"
"\n"
"Then `True` is a `bool` (short for *boolean*) and `[1, 2, 3]` has type `list`.\n"
"\n"
"Note that there are two types for numbers:\n"
"\n"
"- `int`, short for 'integer', is for whole numbers, meaning no fractions or decimal points.\n"
"- `float`, short for 'floating point number', is for numbers with a decimal point and maybe a fractional part\n"
"\n"
"In most cases you don't have to worry about the different types of number, as you can mix the two when doing maths.\n"
"\n"
"Types are values which can be used in various ways, just like other values.\n"
"For example, try this in the shell:\n"
"\n"
"__program_indented__"

msgid "pages.Types.steps.common_type_errors.text"
msgstr ""
"What happens if you use an operator between a `str` and an `int`? Try in the shell:\n"
"\n"
"__program_indented__"

msgid "pages.Types.steps.different_types_look_same.text"
msgstr ""
"Values with different types are usually quite different from each other, but they can look the same when printed,\n"
"which can be confusing. Try this:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(You can use `print(repr(123))` and `print(repr('123'))` to tell the difference. What's `repr`? Google it!)"

msgid "pages.Types.steps.final_text.text"
msgstr ""
"Excellent!\n"
"\n"
"By the way, when you need to concatenate strings and numbers, remember that you can also\n"
"use f-strings. They often look nicer.\n"
"\n"
"You've learned about types in Python and how to avoid common errors by converting types.\n"
"Keep going with the rest of the project!"

msgid "pages.Types.steps.five_different_types.text"
msgstr ""
"So far we've seen various kinds of data: strings, lists, numbers and booleans.\n"
"These are called *types*. Every value has a type which affects how it behaves\n"
"and can be revealed with the `type` function:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid ""
"pages.Types.steps.fixing_type_errors_with_conversion.disallowed.0.label"
msgstr "f-strings"

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.0.text"
msgstr "At what points is this code broken?"

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.1.text"
msgstr "There are values that need to be converted to a different type."

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.2.text"
msgstr "Specifically there's a `str` that needs to be converted to an `int`."

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.3.text"
msgstr "And an `int` that needs to be converted to a `str`."

msgid "pages.Types.steps.fixing_type_errors_with_conversion.text"
msgstr ""
"Using a string instead of an integer in `range` like `range('5')`,\n"
"or in list subscripting like `list['3']` will also lead to an error.\n"
"\n"
"Most of these problems can be solved by converting the string to an integer by using `int` as a function:\n"
"`int('5')` will return the integer `5`.\n"
"Similarly an integer can be converted to a string by using `str` as a function:\n"
"`str(5)` will return the string `'5'`.\n"
"\n"
"Using this new knowledge, fix this broken program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"The correct program should print:\n"
"\n"
"    Starting... 1\n"
"    Starting... 2\n"
"    Starting... 3\n"
"    Go!\n"
"\n"
"Your solution should work for any value of the variable `number`."

msgid "pages.Types.steps.format_board_with_numbers.hints.0.text"
msgstr ""
"You can start by using the ideas from your previous solution to "
"`format_board`. Using `join` is highly recommended!"

msgid "pages.Types.steps.format_board_with_numbers.hints.1.text"
msgstr "The first line has to be treated separately from the rest."

msgid "pages.Types.steps.format_board_with_numbers.hints.2.text"
msgstr "Remember that `range` yields numbers in the way: 0, 1, 2, ..."

msgid "pages.Types.steps.format_board_with_numbers.hints.3.text"
msgstr "We want numbers on the first line like this: 1, 2, 3..."

msgid "pages.Types.steps.format_board_with_numbers.hints.4.text"
msgstr ""
"Each number has to be converted to a string before being added to the first "
"row!"

msgid "pages.Types.steps.format_board_with_numbers.hints.5.text"
msgstr "For the rows of the board itself, do something similar."

msgid "pages.Types.steps.format_board_with_numbers.hints.6.text"
msgstr ""
"Start with a list consisting only of the first line that you built above."

msgid "pages.Types.steps.format_board_with_numbers.hints.7.text"
msgstr ""
"Add each row's string to the list, then join the list with a newline "
"character."

msgid "pages.Types.steps.format_board_with_numbers.text"
msgstr ""
"Write an improved version of `format_board` that has row and column numbers like this:\n"
"\n"
"     123\n"
"    1XOX\n"
"    2 OO\n"
"    3 X\n"
"\n"
"It should work for boards of any single-digit size. Here's a test case:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.less_than_has_two_meanings.text"
msgstr ""
"For two integers `+` acts as addition, whereas for two strings it acts as string concatenation.\n"
"Python automatically figures out the meaning of `+` from the types of the inputs.\n"
"Similarly `<` acts differently on two strings and two integers:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.less_than_sorting_strings.text"
msgstr ""
"So `<` acts as the usual 'less than' between two integers, because `13` is less than `120`,\n"
"but it acts as the dictionary ordering between two strings: `13` is 'alphabetically' after `120`\n"
"because `3` comes after `2`.\n"
"\n"
"See what difference this makes when sorting a list:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.plus_has_two_meanings.text"
msgstr ""
"Different types have different methods and support different operators.\n"
"The same method or operator can also mean different things.\n"
"For example, see how `+` has different meanings for `str` and `int`:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.title"
msgstr "Types"
