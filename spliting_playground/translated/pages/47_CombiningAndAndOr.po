#
msgid ""
msgstr ""

msgid "pages.CombiningAndAndOr.steps.CombiningAndOr.text"
msgstr ""
"If you use both `and` and `or` in a single expression, it's a lot like combining `*` and `+`.\n"
"The operators are evaluated in a specific order.\n"
"\n"
"For example, try the following code in the shell.\n"
"What do you expect?\n"
"\n"
"__program_indented__"

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.text"
msgstr ""
"If you read it casually from left to right, you may think that:\n"
"\n"
"__code0__\n"
"\n"
"is equivalent to\n"
"\n"
"__code1__\n"
"\n"
"but it's actually equivalent to\n"
"\n"
"__code2__\n"
"\n"
"This is because `and` has a higher priority than `or`.\n"
"This is important because the first interpretation reduces to `True and False` which is `False`, while the second\n"
"interpretation reduces to `True or False` which is `True`!\n"
"You can try both options with parentheses in the shell to confirm.\n"
"\n"
"**The lesson here is to be extra careful when combining operators.** Either add parentheses to be safe or\n"
"break up your expression into smaller parts and assign each part to a variable.\n"
"This will make your code clear, readable, and unambiguous, and will save you from painful mistakes.\n"
"\n"
"Time for an exercise. Suppose you're writing a program to play tic-tac-toe,\n"
"also known as noughts and crosses or Xs and Os. If you've never heard of tic-tac-toe, you can read the rules\n"
"and play a few games [here](https://gametable.org/games/tic-tac-toe/).\n"
"\n"
"We need to check if someone has won a game. Our function `all_equal` is already helpful for checking rows.\n"
"\n"
"Write a function to check if someone has won a game by placing 3 of the same pieces on one of the diagonal lines.\n"
"The board is given as a nested list `board` of 3 sublists, each sublist containing 3 strings, representing a row. For example:\n"
"\n"
"__code3__\n"
"\n"
"The function should return a boolean: `True` if one of the diagonals have 3 of the same pieces, `False` otherwise.\n"
"Click the Copy button to get started with the code below.\n"
"We provided some tests for you, your job is to replace the `...` with your code.\n"
"\n"
"    __copyable__\n"
"__code4__"

msgid "pages.CombiningAndAndOr.steps.final_text.text"
msgstr ""
"Well done! This was a hard one. Here are some possible solutions:\n"
"\n"
"__code0__\n"
"\n"
"or:\n"
"\n"
"__code1__"

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.0.text"
msgstr "How many diagonals are there on the board?"

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.1.text"
msgstr ""
"Which entries of the three sublists make up each diagonal? How can you "
"access these entries?"

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.2.text"
msgstr "Every list always has 3 entries, so no need for a loop."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.3.text"
msgstr ""
"There are two problems to solve here: checking for a win in a specific "
"diagonal, and combining the checks for each diagonal."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.4.text"
msgstr "One problem can be solved using `and`, the other using `or`."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.5.text"
msgstr ""
"There's a lot of similarity with the `all_equal` function. You can even call"
" that function to help! But then you have to include its definition."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.6.text"
msgstr ""
"Similar to `all_equal`, check that the 3 entries on a diagonal are equal to "
"each other, e.g. by using `and`."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.7.text"
msgstr "Check the two diagonals together, using `or`."

msgid "pages.CombiningAndAndOr.title"
msgstr "Combining `and` and `or`"
