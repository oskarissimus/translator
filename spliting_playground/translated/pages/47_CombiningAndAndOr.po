#
msgid ""
msgstr ""

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.0.text"
msgstr "Ile przekątnych jest na planszy?"

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.1.text"
msgstr ""
"Które wpisy z trzech sublist tworzą każdą przekątną? Jak możesz uzyskać "
"dostęp do tych wpisów?"

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.2.text"
msgstr "Każda lista zawsze ma 3 wpisy, więc nie ma potrzeby użycia pętli."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.3.text"
msgstr ""
"Są dwa problemy do rozwiązania tutaj: sprawdzenie wygranej na konkretnej "
"przekątnej oraz połączenie sprawdzeń dla każdej przekątnej."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.4.text"
msgstr "Jeden problem można rozwiązać używając `and`, inny używając `or`."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.5.text"
msgstr ""
"Wiele podobieństw ma funkcja `all_equal`. Możesz nawet użyć tej funkcji do "
"pomocy! Ale wtedy musisz zawrzeć jej definicję."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.6.text"
msgstr ""
"Podobnie jak `all_equal`, sprawdź, czy 3 wpisy na przekątnej są równoważne "
"sobie, np. używając `and`."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.7.text"
msgstr "Sprawdź obie przekątne razem, używając `or`."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.text"
msgstr ""
"Jeśli przeczytać to pobieżnie od lewej do prawej, możesz pomyśleć, że:\n"
"\n"
"__code0__\n"
"\n"
"jest równoważne z\n"
"\n"
"__code1__\n"
"\n"
"ale tak naprawdę równoważne jest z\n"
"\n"
"__code2__\n"
"\n"
"To dlatego, że `and` ma wyższy priorytet niż `or`.\n"
"To jest ważne, ponieważ pierwsza interpretacja redukuje się do `True and False` co jest `False`, podczas gdy druga\n"
"interpretacja redukuje się do `True or False` co jest `True`!\n"
"Możesz wypróbować obie opcje z nawiasami w konsoli, aby się przekonać.\n"
"\n"
"**Morał jest taki, aby być szczególnie ostrożnym łącząc operatory.** Albo dodaj nawiasy dla bezpieczeństwa, albo\n"
"podziel swoje wyrażenie na mniejsze części i przypisz każdą część do zmiennej.\n"
"To uczyni twój kod czytelny, zrozumiały i jednoznaczny, oraz uchroni cię przed bolesnymi błędami.\n"
"\n"
"Czas na ćwiczenie. Załóżmy, że piszesz program do gry w kółko i krzyżyk. Jeśli nigdy nie słyszałeś o kółko i krzyżyk, możesz przeczytać zasady\n"
"i zagrać kilka gier [tutaj](https://gametable.org/games/tic-tac-toe/).\n"
"\n"
"Musimy sprawdzić, czy ktoś wygrał grę. Nasza funkcja `all_equal` już w tym pomaga sprawdzając rzędy.\n"
"\n"
"Napisz funkcję do sprawdzania, czy ktoś wygrał grę poprzez umieszczenie 3 tych samych elementów na jednej z linii przekątnych.\n"
"Plansza jest podana jako zagnieżdżona lista `board` z 3 sublistami, każda sublista zawiera 3 ciągi znaków, reprezentujące rząd. Na przykład:\n"
"\n"
"__code3__\n"
"\n"
"Funkcja powinna zwrócić typ booleanowski: `True` jeśli jedna z przekątnych posiada 3 te same elementy, `False` w przeciwnym wypadku.\n"
"Kliknij przycisk Kopiuj, aby rozpocząć z poniższym kodem.\n"
"Dostarczyliśmy kilka testów dla ciebie, twoim zadaniem jest zastąpić `...` twoim kodem.\n"
"\n"
"    __copyable__\n"
"__code4__"

msgid "pages.CombiningAndAndOr.steps.CombiningAndOr.text"
msgstr ""
"Jeśli używasz operatów `and` (i) oraz `or` (lub) w jednym wyrażeniu, jest to całkiem jak łączenie `*` oraz `+`.\n"
"Operatory są wykonywane w określonej kolejności.\n"
"\n"
"Na przykład, wypróbuj poniższy kod w konsoli.\n"
"Czego się spodziewasz?\n"
"\n"
"__program_indented__"

msgid "pages.CombiningAndAndOr.steps.final_text.text"
msgstr ""
"Brawo! To było trudne. Oto kilka możliwych rozwiązań:\n"
"\n"
"__code0__\n"
"\n"
"lub:\n"
"\n"
"__code1__"

msgid "pages.CombiningAndAndOr.title"
msgstr "Łączenie `and` i `or`"
