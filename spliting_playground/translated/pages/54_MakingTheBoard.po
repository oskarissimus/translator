#
msgid ""
msgstr ""

msgid "pages.MakingTheBoard.steps.final_text.text"
msgstr ""
"Well done!\n"
"\n"
"This could be solved by moving the first loop inside the second to make a new `row` each time:\n"
"\n"
"__code0__\n"
"\n"
"Another way is to make a copy of `row` each time, e.g. keep the original code but change one line:\n"
"\n"
"__code1__\n"
"\n"
"You can also copy `row` with `row[:]` or `list(row)`. But it's important to know that\n"
"all these methods make a *shallow copy* of the list.\n"
"That means they copy the whole list at the top level, without making copies of each element.\n"
"That's fine in this case where `row` only contains strings which can't be modified\n"
"and don't need copying. But if the elements are mutable objects like lists,\n"
"as is the case with `board`, you may run into the same problem again.\n"
"Here's an example:\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"Here each element of `cube` is a separate list, a copy of `board`.\n"
"And within each of those copies, each element is also a separate list, a copy of `row`.\n"
"But the shallow copies of `board` all have the same first element as each other (the first copy of `row`),\n"
"the same second element, and so on.\n"
"Changing `make_board` won't fix anything here, the solution is to either:\n"
"\n"
"- Call `make_board` repeatedly to make a new `board` each time, or\n"
"- Use the `deepcopy` function instead of `board.copy()`.\n"
"  `deepcopy` makes copies at every level of nested objects.\n"
"\n"
"If you're still confused, don't worry.\n"
"This is just preparing you to deal with your code behaving weirdly in the future.\n"
"You're not required to understand this right now and this lesson will still be valuable.\n"
"\n"
"Either way, we're ready to make the full game. You can do it!"

msgid "pages.MakingTheBoard.steps.fix_make_board.hints.0.text"
msgstr "The existing code is almost correct."

msgid "pages.MakingTheBoard.steps.fix_make_board.hints.1.text"
msgstr "There are several ways to solve this."

msgid "pages.MakingTheBoard.steps.fix_make_board.hints.2.text"
msgstr "Some solutions involve adding something small."

msgid "pages.MakingTheBoard.steps.fix_make_board.hints.3.text"
msgstr ""
"You can also rearrange the code without adding or removing anything (except "
"spaces)."

msgid "pages.MakingTheBoard.steps.fix_make_board.hints.4.text"
msgstr "The problem is that a single list `row` is used several times."

msgid "pages.MakingTheBoard.steps.fix_make_board.hints.5.text"
msgstr ""
"So one solution is to make copies of `row` which will all be separate."

msgid "pages.MakingTheBoard.steps.fix_make_board.hints.6.text"
msgstr "Another solution is to make a new `row` from scratch each time."

msgid "pages.MakingTheBoard.steps.fix_make_board.hints.7.text"
msgstr ""
"There are a few ways to copy a list in Python with a tiny bit of code."

msgid "pages.MakingTheBoard.steps.fix_make_board.hints.8.text"
msgstr "Making a new row each time can be done by just rearranging the code."

msgid ""
"pages.MakingTheBoard.steps.fix_make_board.special_messages.not_separate.text"
msgstr "However, the sublists in the result are not all separate objects."

msgid "pages.MakingTheBoard.steps.fix_make_board.text"
msgstr ""
"Can you see what happened?\n"
"\n"
"Every row got an `'X'` in the first position!\n"
"It's as if the code actually did this:\n"
"\n"
"__code0__\n"
"\n"
"Try and figure out what's wrong by yourself.\n"
"But again, it's tricky, so don't drive yourself crazy over it.\n"
"\n"
"If you want, here's some hints:\n"
"\n"
" - Try running the code through some debuggers.\n"
" - Experiment. Make changes to the code and see what happens.\n"
" - No, the code didn't do 3 assignments like I suggested above. There was just one list assignment.\n"
" - There's no hidden loops or anything.\n"
" - How many lists does `board` contain? 3?\n"
" - The previous page has a subtle hint at what happened.\n"
" - There is a page from a previous chapter where this kind of problem is explained directly.\n"
" - Specifically [this page](#EqualsVsIs).\n"
" - Try running the code with Python Tutor.\n"
"\n"
"OK, if you're ready, here's the answer.\n"
"\n"
"The list `row` was only created once, and reused several times.\n"
"`board` contains the same list three times. Not copies, just one list in three places.\n"
"It's like it did this:\n"
"\n"
"__code1__\n"
"\n"
"Which means that this code:\n"
"\n"
"__code2__\n"
"\n"
"is equivalent to:\n"
"\n"
"__code3__\n"
"\n"
"which affects 'all the lists' in `board` because they're all just the one list `row`.\n"
"In other words, the above line is *also* equivalent to each of these two lines:\n"
"\n"
"__code4__\n"
"\n"
"because `row` is `board[0]`, `board[1]`, and `board[2]` all at once.\n"
"\n"
"Your job now is to fix `make_board` to not have this problem.\n"
"It should still return a list of length `size` where each\n"
"element is also list of length `size` where each element is the string `' '`.\n"
"The sublists should all be separate list objects, not the same\n"
"list repeated."

msgid "pages.MakingTheBoard.steps.naive_make_board.text"
msgstr ""
"So far the board has been provided for you as a nested list.\n"
"But for the full program, you need to create it yourself.\n"
"Should be easy, right? Here's some code to do that:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"It's close, but there's a subtle problem with it.\n"
"Make sure you understand the code,\n"
"and bonus points if you can spot the bug!\n"
"If not, don't feel bad or waste too much time on it."

msgid "pages.MakingTheBoard.title"
msgstr "Making the Board"
