#
msgid ""
msgstr ""

msgid "pages.DefiningFunctions.steps.define_greet.text"
msgstr ""
"You've seen how to call functions such as `print()` and `len()`. Now you're going to learn how to write your own\n"
"functions that you or other people can use. This is very important as programs get bigger and more complicated.\n"
"\n"
"Here's a simple example:\n"
"\n"
"__program_indented__\n"
"\n"
"This defines a function called `greet` which accepts one parameter. Below the definition, we call the function twice.\n"
"Run the code to see what happens."

msgid "pages.DefiningFunctions.steps.how_are_you.text"
msgstr ""
"A function definition is a compound statement. Like `if` and `for`, it has a header line followed by an indented body\n"
"which can contain one or more statements.\n"
"\n"
"Add another statement to the function so that it looks like this:\n"
"\n"
"__code0__\n"
"\n"
"Then run the program again."

msgid "pages.DefiningFunctions.steps.change_function_name.text"
msgstr ""
"Note how the output of the program changed. `How are you?` is printed twice. You can think of the whole program as being\n"
"equivalent to this:\n"
"\n"
"__code0__\n"
"\n"
"This shows one of the most useful things about functions. They let you reuse the same code multiple times without\n"
"having to repeat yourself. It's like writing a program within a program.\n"
"\n"
"The header line of a function definition always has these parts:\n"
"\n"
"1. The special keyword `def`, followed by a space.\n"
"2. The name of the function. This is like a variable name - you can choose the name you want, but there are some constraints,\n"
"e.g. it can't contain a space.\n"
"3. A pair of parentheses `(` and `)`\n"
"4. Zero or more parameter names between the parentheses, separated by commas if there's more than one. Here we have\n"
"one parameter called `name`.\n"
"5. A colon `:`\n"
"\n"
"Let's do some simple exercises. Change the name of the function from `greet` to `say_hello`.\n"
"Make sure the whole program stays working as before, but don't change anything else."

msgid "pages.DefiningFunctions.steps.change_parameter_name.text"
msgstr ""
"Good! Now do a similar exercise: change the name of the parameter from "
"`name` to `person_name`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.text"
msgstr ""
"Well done!\n"
"\n"
"Now write your own function called `print_twice` which accepts one argument `x` and prints that argument twice\n"
"on two lines.\n"
"\n"
"For example, `print_twice(\"Hello\")` should output:\n"
"\n"
"__code0__\n"
"\n"
"You can test your function by calling it after the function definition, but it's not required."

msgid "pages.DefiningFunctions.steps.print_many.text"
msgstr ""
"Functions can have many parameters. Here's an example:\n"
"\n"
"__program_indented__"

msgid "pages.DefiningFunctions.steps.swap_parameters.text"
msgstr ""
"Note the commas used to separate parameters in the function definition and arguments in the function call,\n"
"and the correspondence between the definition and the call:\n"
"\n"
"    def print_many(thing, n):\n"
"                     ^    ^\n"
"                     |    |\n"
"      print_many(\"Hello\", 3)\n"
"\n"
"So calling `print_many(\"Hello\", 3)` is like running:\n"
"\n"
"__code0__\n"
"\n"
"Now for another simple exercise. Swap around the parameters in the function definition header so that it says:\n"
"\n"
"__code1__\n"
"\n"
"If you do this and nothing else, you will get an error. Fix the rest of the program so that it behaves like before.\n"
"*Don't change the body of the function*."

msgid "pages.DefiningFunctions.steps.final_text.text"
msgstr ""
"Perfect! Now you have a solid foundation of the basics of defining "
"functions."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.0.text"
msgstr ""
"You have to change the name in the function definition header, but that's "
"not all."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.1.text"
msgstr ""
"If you just change the name in the function definition header, what happens?"

msgid "pages.DefiningFunctions.steps.change_function_name.hints.2.text"
msgstr ""
"You get an error. Look at the message. What is it telling you? Where does "
"the error come from?"

msgid "pages.DefiningFunctions.steps.change_function_name.hints.3.text"
msgstr ""
"If your function is called `say_hello`, what does `greet(\"Alice\")` mean?"

msgid "pages.DefiningFunctions.steps.change_function_name.hints.4.text"
msgstr "You need to change exactly 3 lines of the program."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.5.text"
msgstr "In each line you change, change exactly one word."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.6.text"
msgstr ""
"Don't touch the body of the function. It should still have `print(\"How are "
"you?\")`."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.7.text"
msgstr ""
"You should still call the function twice after defining it, with arguments "
"`\"Alice\"` and `\"Bob\"`."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.0.text"
msgstr ""
"You have to change the parameter name in the function definition header, but"
" that's not all."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.1.text"
msgstr ""
"If you just change the parameter name in the function definition header, "
"what happens?"

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.2.text"
msgstr ""
"You get an error. Look at the message. What is it telling you? Where does "
"the error come from?"

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.3.text"
msgstr ""
"If the parameter is called `person_name`, what does `print(f\"Hello "
"{name}!\")` mean?"

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.4.text"
msgstr "You need to change exactly 2 lines of the program."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.5.text"
msgstr "In each line you change, change exactly one word."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.6.text"
msgstr ""
"Don't touch the part after the function definition, i.e. "
"`say_hello(\"Alice\")` and `say_hello(\"Bob\")`."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.7.text"
msgstr ""
"You should still have two statements in the function body, including "
"`print(\"How are you?\")`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.0.text"
msgstr ""
"There's no clever problem solving here, this is just about following the "
"recipe for defining a function."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.1.text"
msgstr "Make sure you have all the parts of a function listed above."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.2.text"
msgstr "That includes `def`, `()`, and `:`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.3.text"
msgstr "Make sure your function is named `print_twice`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.4.text"
msgstr ""
"Make sure it accepts one parameter called `x` in between the parentheses "
"`()`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.5.text"
msgstr "Look at the other functions defined above for help."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.6.text"
msgstr "Use the parameter inside the function body."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.7.text"
msgstr "Make sure the body is indented."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.8.text"
msgstr "The body needs two statements or a very simple loop."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.9.text"
msgstr ""
"Make sure that you don't call `print_twice` inside the function body of "
"`print_twice`. Check your indentation."

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.0.text"
msgstr ""
"The only change to the function definition should be the swapping of "
"parameters as instructed, nothing else."

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.1.text"
msgstr "You need to fix the call to `print_many`."

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.2.text"
msgstr ""
"If the function is defined as `def print_many(n, thing)`, what does "
"`print_many(\"Hello\", 3)` mean?"

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.3.text"
msgstr "We still want `thing = \"Hello\"` and `n = 3`."

msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.0"
msgstr ""
"Hello Alice!\n"
"How are you?\n"
"Hello Bob!\n"
"How are you?"

msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.1"
msgstr ""
"Hello Alice!\n"
"Hello Bob!\n"
"How are you?"

msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.2"
msgstr ""
"Hello Alice!\n"
"How are you?\n"
"Hello Bob!"

msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.2"
msgstr ""
"Hello\n"
"Hello\n"
"Hello"

msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.3"
msgstr "Hello"

msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.4"
msgstr ""
"H\n"
"e\n"
"l\n"
"l\n"
"o"

msgid "pages.DefiningFunctions.title"
msgstr "Defining Functions"

msgid "pages.DefiningFunctions.steps.how_are_you.requirements"
msgstr ""
"Add `print(\"How are you?\")` after `print(f\"Hello {name}!\")` with the same indentation.\n"
"Keep the two calls to `greet` after the definition as is."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.requirements"
msgstr ""
"Write a program which defines a function called `print_twice` as described "
"above."
