#
msgid ""
msgstr ""

msgid "pages.IntroducingBirdseye.steps.birdseye_loop_example.text"
msgstr ""
"While the other tools show how code runs line by line and the values of variables, `birdseye` shows you the value of every expression in a program. This lets you see how a complex expression is broken down into smaller sub-expressions\n"
"and what the value of each one is.\n"
"\n"
"Hover your mouse over the various boxed expressions in the last line of the program.\n"
"As each box is highlighted, its value is shown at the bottom of the screen. Clicking on the box will stick it on a panel so you can see several expression values at once and move your mouse around freely.\n"
"\n"
"In this case `birdseye` shows that the expression:\n"
"\n"
"__code0__\n"
"\n"
"is broken into\n"
"\n"
"__code1__\n"
"\n"
"rather than\n"
"\n"
"__code2__\n"
"\n"
"In other words, Python follows the usual order of operations in maths, rather than just evaluating from left to right.\n"
"\n"
"Note that there are some expressions that `birdseye` doesn't put in a box. In this case `2`, `3`, `4`, `5`, and `print` are all expressions as well, but their values are obvious and boxing them would just be clutter.\n"
"\n"
"Here's a more complicated example to try out:\n"
"\n"
"    __copyable__\n"
"__code3__"

msgid "pages.IntroducingBirdseye.steps.final_text.text"
msgstr ""
"Note that:\n"
"\n"
"1. There's a pair of arrows next to the for loop. Click on them to navigate through the loop in time and see what happened in different iterations.\n"
"2. Code that doesn't run in an iteration because of the `if` is greyed out. The expressions within have no values because they weren't evaluated.\n"
"3. The values recorded for the expressions `vowels` and `consonants` depend on which box you look at. In the lines after the loop, they contain all the letters, but inside the loop they only contain some, and exactly how many depends on which iteration you're on.\n"
"4. In `vowels.append(letter)`, you see what the values of those variables were *at that moment*. That means that `letter` is about to be appended to `vowels` but this hasn't happened yet, so `vowels` doesn't contain `letter`."

msgid "pages.IntroducingBirdseye.steps.first_birdseye_example.text"
msgstr ""
"You've seen `snoop` and Python Tutor. futurecoder comes with one last tool to analyse programs as they run, called `birdseye`.\n"
"\n"
"Here's an example program to run. Copy it into the editor and click the `birdseye` button. This will open a new browser tab with the visualisation.\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.IntroducingBirdseye.title"
msgstr "Understanding Programs with `birdseye`"
