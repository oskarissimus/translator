#
msgid ""
msgstr ""

msgid "pages.UsingDictionaries.steps.dna_part1.text"
msgstr ""
"Nieźle! Ale mogłeś zauważyć, że wygląda to trochę niezgrabnie. Dlaczego musimy określać `'dog'` i `'box'` zarówno w `cart` jak i `quantities`?\n"
"Na następnej stronie przyjrzymy się, jak pętlować bezpośrednio po kluczach słownika,\n"
"żebyśmy mogli pozbyć się argumentu `cart`.\n"
"\n"
"Ale najpierw, poćwiczmy trochę więcej to, czego się nauczyliśmy.\n"
"\n"
"[Wcześniej w kursie](#IntroducingElif) przyjrzeliśmy się konwertowaniu jednej nici DNA\n"
"na nową nić z pasującymi nukleotydami.\n"
"Oto wersja tego kodu używająca funkcji. Zastępuje każdą literę w wejściowym `string`\n"
"inną.\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.UsingDictionaries.steps.dna_part2.hints.0.text"
msgstr ""
"To wciąż jest bardzo podobne do poprzednich ćwiczeń, ale z ciągami znaków "
"zamiast liczb."

msgid "pages.UsingDictionaries.steps.dna_part2.hints.1.text"
msgstr "Musisz tylko pomyśleć o kluczach i wartościach `d`."

msgid "pages.UsingDictionaries.steps.dna_part2.hints.2.text"
msgstr "Musisz uzyskać poprawne wartości, aby zbudować zwracany ciąg znaków."

msgid "pages.UsingDictionaries.steps.dna_part2.hints.3.text"
msgstr ""
"Możesz zasadniczo zastąpić cały łańcuch `if/elif` jedną linią."

msgid "pages.UsingDictionaries.steps.dna_part2.hints.4.text"
msgstr "Ta linia po prostu musi użyć `d` do uzyskania poprawnej wartości."

msgid "pages.UsingDictionaries.steps.dna_part2.hints.5.text"
msgstr "Pamiętaj, że kluczami `d` są znaki w `string`."

msgid "pages.UsingDictionaries.steps.dna_part2.text"
msgstr ""
"Teraz możemy użyć słowników, aby ten kod uczynić krótszym i bardziej ogólnym, aby mógł być używany do innych celów.\n"
"\n"
"Twoim zadaniem jest dodanie kolejnego argumentu do funkcji `substitute`: słownika `d`.\n"
"Klucze `d` reprezentują znaki\n"
"w pierwszym argumencie `string`, które powinny być zastąpione odpowiadającymi im wartościami `d`. Na przykład, `'A': 'T'`\n"
"oznacza, że `'A'` powinno być zastąpione przez `'T'`:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Ta wersja `substitute` powinna działać dla każdych argumentów, gdzie wszystkie znaki w `string` są kluczami w `d`.\n"
"Nie potrzeba więcej instrukcji `if`!"

msgid "pages.UsingDictionaries.steps.final_text.text"
msgstr ""
"Dobrze! Oto przykład, jak ta funkcja może być również używana do szyfrowania i odszyfrowywania sekretnych wiadomości:\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    def substitute(string, d):\n"
"        result = \"\"\n"
"        for letter in string:\n"
"            result += d[letter]\n"
"        return result\n"
"\n"
"    plaintext = 'helloworld'\n"
"    encrypted = 'qpeefifmez'\n"
"    letters = {'h': 'q', 'e': 'p', 'l': 'e', 'o': 'f', 'w': 'i', 'r': 'm', 'd': 'z'}\n"
"    reverse = {'q': 'h', 'p': 'e', 'e': 'l', 'f': 'o', 'i': 'w', 'm': 'r', 'z': 'd'}\n"
"    assert_equal(substitute(plaintext, letters), encrypted)\n"
"    assert_equal(substitute(encrypted, reverse), plaintext)\n"
"\n"
"Ta sama funkcja działa w obu kierunkach, wystarczy przekazać jej inne słowniki.\n"
"\n"
"Dwa słowniki są prawie takie same, po prostu zamieniamy klucz i wartość w każdej parze.\n"
"Więc żeby zaszyfrować, zastępujemy `e` przez `p`, a żeby odszyfrować, zmieniamy `p` z powrotem na `e`.\n"
"\n"
"Zauważ, że `'e'` jest zarówno kluczem jak i wartością w `letters`.\n"
"\n"
"Sprawdzanie `letters['e']` oznacza, że pytamy o `'e'` jako *klucz*, więc to daje `'p'`.\n"
"Pamiętaj, że nie możemy użyć `letters`, aby zapytać, który klucz jest skojarzony z `'e'` jako *wartość*.\n"
"Ale w tym przypadku możemy użyć innego słownika do tego: `reverse['e']` daje `'l'`,\n"
"a `letters['l']` daje znowu `'e'`.\n"
"\n"
"Wkrótce napiszesz funkcję do automatycznego tworzenia słownika jak `reverse`,\n"
"czyli `reverse = swap_keys_values(letters)`."

msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.0.text"
msgstr "Pamiętaj, że `prices` to słownik."

msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.1.text"
msgstr "Aby uzyskać wartość w słowniku, potrzebujesz klucz."

msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.2.text"
msgstr "Kluczami dla `prices` są przedmioty w `cart`."

msgid "pages.UsingDictionaries.steps.shopping_cart1.text"
msgstr ""
"Zobaczmy słowniki w prawdziwym problemie życiowym. Wyobraź sobie, że tworzysz internetowy sklep.\n"
"Ceny wszystkich swoich produktów trzymasz w słowniku:\n"
"\n"
"__code0__\n"
"\n"
"Tu widać jeden z problemów związanych z wyszukiwaniem wartości w słowniku.\n"
"Co by było `prices[100]`? `'dog'`? `'cat'`? `['dog', 'cat']`?\n"
"Ta sama wartość może się powtarzać wiele razy w słowniku.\n"
"Z drugiej strony, klucze muszą być unikalne. Wyobraź sobie, że twoje ceny zaczynają się od tego:\n"
"\n"
"__code1__\n"
"\n"
"Ile kosztuje jabłko? Wiemy, że to `prices['apple']`, ale czy to `2` czy `3`?\n"
"Jasne, że powinna być tylko jedna cena, więc nie wolno mieć zduplikowanych kluczy.\n"
"\n"
"W każdym razie to jest normalny sklep, gdzie rzeczy mają jedną cenę.\n"
"Ten normalny sklep ma normalnych klientów z normalnymi listami zakupów jak `['apple', 'box', 'cat']`.\n"
"A chociaż twoi klienci mają kalkulatory w swoich kieszeniach, to nadal oczekują, że sam dodasz wszystkie ceny\n"
"i powiesz im, ile to wszystko będzie kosztować, bo tak robią normalne sklepy.\n"
"\n"
"Więc napiszmy funkcję, która to zrobi. Uzupełnij poniższą funkcję, zwłaszcza linię `price = ...`\n"
"\n"
"    __copyable__\n"
"__code2__"

msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.0.text"
msgstr "Pamiętaj, że klucze `prices` i `quantities` są takie same."

msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.1.text"
msgstr "To jest bardzo podobne do poprzedniego ćwiczenia, po prostu trenujemy."

msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.2.text"
msgstr ""
"`price` powinno być wartością z `prices`, podobnie jak `quantity`."

msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.3.text"
msgstr "Jakiego klucza należy użyć do uzyskania każdej wartości?"

msgid "pages.UsingDictionaries.steps.shopping_cart4.text"
msgstr ""
"Perfekcyjnie! Publikujesz swoją stronę internetową i zaczynasz marzyć, jak bogatym się staniesz.\n"
"\n"
"Ale wkrótce otrzymujesz skargę od klienta, który chce kupić 5 milionów psów... i 2 skrzynki, aby je w nich umieścić.\n"
"\n"
"Twoja strona internetowa pozwala na zakup tych samych przedmiotów kilka razy, np. `total_cost(['box', 'box'], {...})` działa,\n"
"ale muszą dodawać każdy przedmiot pojedynczo, i z jakiegoś powodu ten klient nie chce kliknąć\n"
"'Dodaj do koszyka' 5 milionów razy. Ludzie są tacy leniwi!\n"
"\n"
"Oto nowy kod, który musisz naprawić:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Dodaliśmy kolejny parametr zwany `quantities` do `total_cost`.\n"
"Teraz `cart` wciąż jest listą ciągów znaków, ale nie ma żadnych duplikatów.\n"
"`quantities` jest słownikiem, gdzie klucze to przedmioty w `cart`, a odpowiadające im wartości są ilością\n"
"tego przedmiotu, który klient chce kupić."

msgid "pages.UsingDictionaries.title"
msgstr "Praktyczne wykorzystanie słowników"
