#
msgid ""
msgstr ""

msgid "pages.BasicTerminology.steps.final_text.text"
msgstr ""
"Oto słowa, które powinieneś znać:\n"
"\n"
"***Wyrażenie*** to fragment kodu, który ma wartość. Na przykład, w tej linii kodu:\n"
"\n"
"    __no_auto_translate__\n"
"    zdanie = 'Hello ' + name\n"
"\n"
"mamy trzy wyrażenia:\n"
"\n"
"1. `'Hello '`\n"
"2. `name`\n"
"3. `'Hello ' + name`\n"
"\n"
"Natomiast pełna linia `zdanie = ...` to ***instrukcja***. To polecenie, które mówi komputerowi, by wykonał akcję. Samo w sobie nie ma wartości. Oznacza to na przykład, że nie można dodawać do siebie instrukcji. Ten kod jest błędny:\n"
"\n"
"    (slowo = 'Hello') + (name = 'Bob')\n"
"\n"
"Konkretnie, instrukcja taka jak `sentence = ...` w której zmiennej przypisywana jest wartość, nazywana jest ***przypisaniem*** - wartość jest *przypisana do* zmiennej.\n"
"\n"
"Program to lista instrukcji, które są wykonane w kolejności. Pętla `for` to *złożona instrukcja*, co oznacza, że ma własną treść, zawierającą inne instrukcje. Większość instrukcji będzie również zawierać wyrażenia, i wyrażenia mogą zawierać inne, mniejsze wyrażenia, ale wyrażenia nie mogą zawierać instrukcji.\n"
"\n"
"Proces obliczania wartości wyrażenia nazywa się ***ewaluacją*** - zauważ, jak niemal zawiera słowo 'wartość'. Komputer *ewaluuje* `1 + 2`, by uzyskać wartość `3`.\n"
"\n"
"Proces wykonywania pętli nazywa się ***iteracją***. Kod taki jak `for char in 'Hello':` *iteruje przez* łańcuch `'Hello'`. Fakt, że jest to możliwe, oznacza, że łańcuchy znaków są *iterowalne*. W przeciwieństwie do tego, liczby nie są iterowalne, co dokładnie Python ci powie, jeśli spróbujesz `for char in 3:`. Każde wykonanie pętli to *jedna iteracja*, więc w tym przykładzie będzie ich 5."

msgid "pages.BasicTerminology.title"
msgstr "Podstawowa Terminologia"
