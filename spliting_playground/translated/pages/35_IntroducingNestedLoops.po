#
msgid ""
msgstr ""

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.0.text"
msgstr ""
"Pomyśl, jak zrobiłbyś to ręcznie i systematycznie, z ołówkiem i papierem."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.1.text"
msgstr ""
"Fakt, że hasło musi mieć dokładnie cztery litery, jest bardzo ważny. To "
"byłoby o wiele trudniejsze do rozwiązania, gdyby hasło mogło być dowolnej "
"długości."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.2.text"
msgstr "Ale string `litery` może mieć dowolną liczbę znaków."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.3.text"
msgstr ""
"Jeśli jest `n` różnych liter, to liczba możliwych haseł wynosi `n^4 == "
"n*n*n*n`, ponieważ dla każdej pozycji są `n` możliwe litery i są one "
"wszystkie niezależne."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.4.text"
msgstr ""
"Załóżmy znowu, że `litery = \"ABCD\"`. Wyobraź sobie, że masz wszystkie "
"możliwe trzyliterowe hasła. Teraz dla każdego z nich dodaj na końcu A, albo "
"B, albo C, albo D. W ten sposób uzyskasz wszystkie możliwe czteroliterowe "
"hasła."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.5.text"
msgstr ""
"Pamiętaj, że pętla for może zawierać dowolną instrukcję, w tym inną pętlę "
"for."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.6.text"
msgstr "Dotyczy to wszystkich pętli for."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.7.text"
msgstr "Jedna pętla for wewnątrz innej pętli for to już nie wystarczy."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.8.text"
msgstr "Musisz iść głębiej."

msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.text"
msgstr ""
"Na następne ćwiczenie musisz złamać hasło. Wiesz, że ma ono dokładnie cztery litery i tylko kilka liter jest możliwych, które sobie zanotowałeś:\n"
"\n"
"__code0__\n"
"\n"
"Musisz wydrukować wszystkie możliwe hasła:\n"
"\n"
"    AAAA\n"
"    AAAB\n"
"    AAAC\n"
"    AAAD\n"
"    AABA\n"
"    AABB\n"
"    ...pomijając kilka...\n"
"    DDDA\n"
"    DDDB\n"
"    DDDC\n"
"    DDDD"

msgid "pages.IntroducingNestedLoops.steps.final_text.text"
msgstr ""
"Znakomicie! Rozwiązanie wygląda tak:\n"
"\n"
"__code0__"

msgid "pages.IntroducingNestedLoops.steps.first_nested_loop.text"
msgstr ""
"Widziałeś, że wcięcie ciała instrukcji `if` lub pętli może zawierać dowolny rodzaj instrukcji, w tym więcej instrukcji `if` i pętli. W szczególności pętla może zawierać inną pętlę. Oto przykład:\n"
"\n"
"__program_indented__\n"
"\n"
"To nazywa się *zagnieżdżoną pętlą*. Nic w tym naprawdę nowego, warto to jednak dobrze zrozumieć, ponieważ może być bardzo przydatne do pisania interesujących programów."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.0.text"
msgstr "Będziesz potrzebował pętli for wewnątrz pętli for, jak wcześniej."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.1.text"
msgstr "Tym razem coś takiego jak `for player1 in players:` nie wystarczy."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.2.text"
msgstr "Twój program musi używać *pozycji* graczy na liście."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.3.text"
msgstr ""
"Oznacza to, że musisz wykonywać pętlę po pozycjach i użyć indeksowania "
"(subskrypcji) aby uzyskać dostęp do wpisów na liście."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.4.text"
msgstr "Aby wykonywać pętlę po pozycjach, użyj `range`..."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.5.text"
msgstr "...i `len`."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.6.text"
msgstr "Spójrz na oczekiwane wyjście: "

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text"
msgstr ""
"Wow, jesteś też artystą!\n"
"\n"
"Jeśli chcesz, możesz przejść teraz do [następnej strony](#IntroducingBirdseye). Albo możesz podjąć dodatkowe wyzwanie!\n"
"\n"
"Tak jak w poprzednim ćwiczeniu, organizujesz turniej gry. Masz listę nazwisk graczy:\n"
"\n"
"__code0__\n"
"\n"
"Tym razem każda para graczy powinna pojawić się tylko raz. Konkretnie, wydrukuj tylko te pary, które są w\n"
"takiej samej kolejności od lewej do prawej, jak są w `gracze`, zaczynając od par zawierających osobę najbardziej po lewej\n"
"w `gracze` i przechodząc na prawo. Na przykład, dla powyższego, twój program powinien wydrukować\n"
"\n"
"    Karol kontra Alicja\n"
"    Karol kontra Daniel\n"
"    Karol kontra Bob\n"
"    Alicja kontra Daniel\n"
"    Alicja kontra Bob\n"
"    Daniel kontra Bob"

msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.0.text"
msgstr ""
"Pomyśl, jak zrobiłbyś to ręcznie i systematycznie, z ołówkiem i papierem."

msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.1.text"
msgstr "Musisz użyć pętli for wewnątrz pętli for."

msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.2.text"
msgstr ""
"Potrzebujesz instrukcji if, aby sprawdzić, że dwóch graczy to nie ta sama "
"osoba."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text"
msgstr ""
"Świetnie!\n"
"\n"
"Następne ćwiczenie: organizujesz turniej gry, takiej jak szachy czy tenis. Masz listę nazwisk graczy:\n"
"\n"
"__code0__\n"
"\n"
"Każdy gracz zagra z każdym innym graczem dwa razy: raz, kiedy uzyska przewagę (np. przez pierwszy ruch lub serwis) i raz bez tej przewagi. Wydrukuj wszystkie kombinacje meczów tak, jak to:\n"
"\n"
"    Alicja kontra Bob\n"
"    Alicja kontra Karol\n"
"    Bob kontra Alicja\n"
"    Bob kontra Karol\n"
"    Karol kontra Alicja\n"
"    Karol kontra Bob\n"
"\n"
"Zauważ, że w liście są zarówno \"Alicja kontra Bob\" jak i \"Bob kontra Alicja\", ale nie ma \"Alicja kontra Alicja\" - nie chcemy, aby ktoś grał sam ze sobą."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.0.text"
msgstr "Musisz użyć pętli for wewnątrz pętli for."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.1.text"
msgstr "Potrzebne są liczby od 1 do 12."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.2.text"
msgstr "Kiedykolwiek potrzebujesz sekwencji kolejnych liczb, użyj `range`."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.3.text"
msgstr "Chcesz coś w rodzaju `for x in range(n):`."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.4.text"
msgstr ""
"To rozpocznie się od `x = 0`, ale jest na to prosty sposób, aby to naprawić."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.5.text"
msgstr "Możesz po prostu dodać 1 do `x`."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.6.text"
msgstr "Użyj `*`, aby pomnożyć liczby."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.7.text"
msgstr "Użyj f-string z kilkoma zmiennymi."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.8.text"
msgstr ""
"Pamiętaj o wydrukowaniu linii z odpowiednią liczbą kresek po każdej sekcji."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.9.text"
msgstr ""
"Upewnij się, że każda linia znajduje się we właściwej pętli i ma odpowiednią"
" ilość wcięć."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.text"
msgstr ""
"Upewnij się, że w pełni rozumiesz, co się dzieje. `print(letter)` i `print('---')` są wykonywane każde po 3 razy, ponieważ ich wcięcie umieszcza je w *zewnętrznej pętli*. `print(f'{letter} {number}')` jest wywoływane 3 × 4 = 12 razy, ponieważ znajduje się w *wewnętrznej pętli* `for number in range(4):`, która ma 4 iteracje, ale sama znajduje się w zewnętrznej pętli, więc działa 3 razy.\n"
"\n"
"Zastosujmy to w praktyce! Załóżmy, że jesteś nauczycielem i musisz wydrukować wszystkie tabliczki mnożenia od 1 do 12 dla swoich uczniów. Nie chcesz ich pisać ręcznie, ale możesz napisać program, który to zrobi za ciebie! Wyjście programu powinno wyglądać tak, łącznie z liniami kresek:\n"
"\n"
"    1 × 1 = 1\n"
"    1 × 2 = 2\n"
"    1 × 3 = 3\n"
"    1 × 4 = 4\n"
"    1 × 5 = 5\n"
"    1 × 6 = 6\n"
"    1 × 7 = 7\n"
"    1 × 8 = 8\n"
"    1 × 9 = 9\n"
"    1 × 10 = 10\n"
"    1 × 11 = 11\n"
"    1 × 12 = 12\n"
"    ---\n"
"    2 × 1 = 2\n"
"    2 × 2 = 4\n"
"    2 × 3 = 6\n"
"    2 × 4 = 8\n"
"    2 × 5 = 10\n"
"    2 × 6 = 12\n"
"    2 × 7 = 14\n"
"    2 × 8 = 16\n"
"    2 × 9 = 18\n"
"    2 × 10 = 20\n"
"    2 × 11 = 22\n"
"    2 × 12 = 24\n"
"    ---\n"
"    3 × 1 = 3\n"
"    3 × 2 = 6\n"
"    3 × 3 = 9\n"
"    (...rozumiesz już ideę...)\n"
"    11 × 10 = 110\n"
"    11 × 11 = 121\n"
"    11 × 12 = 132\n"
"    ---\n"
"    12 × 1 = 12\n"
"    12 × 2 = 24\n"
"    12 × 3 = 36\n"
"    12 × 4 = 48\n"
"    12 × 5 = 60\n"
"    12 × 6 = 72\n"
"    12 × 7 = 84\n"
"    12 × 8 = 96\n"
"    12 × 9 = 108\n"
"    12 × 10 = 120\n"
"    12 × 11 = 132\n"
"    12 × 12 = 144\n"
"    ---"

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.0.text"
msgstr "Jak opisałbyś instrukcje wpisywania tego trójkąta ręcznie?"

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.1.text"
msgstr ""
"Wydrukuj linię z `size` plusów, potem `size - 1` plusów itd. aż do 1 plusa. "
"Na przykład wydrukuj 5 `+`, potem 4 `+`, potem 3, 2 i 1."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.2.text"
msgstr "Podziel to na podproblemy."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.3.text"
msgstr ""
"Jak wydrukować jedną linię `+` o podanej długości i jak przejść przez "
"wszystkie długości?"

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.4.text"
msgstr ""
"Budowanie linii znaków powinno być bardzo znajome z poprzednich ćwiczeń, "
"jedyna różnica polega na tym, że musisz zrobić to o określonej długości "
"zamiast takiej samej długości co inny string."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.5.text"
msgstr ""
"Łatwym sposobem na zrobienie czegoś `n` razy jest pętla po `range(n)`."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.6.text"
msgstr "Musisz użyć pętli for wewnątrz pętli for."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.7.text"
msgstr ""
"Potrzebujesz liczb, które maleją, takich jak 5, 4, 3, 2, 1. Istnieje sposób "
"na zrobienie tego z `range`, i łatwo można to znaleźć w internecie, ale to "
"też łatwo zrobić za pomocą zwykłego zakresu i prostej matematyki, aby "
"przekształcić liczby rosnące w liczby malejące."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.8.text"
msgstr "Jaki wzór przekształca 0 w 5, 1 w 4, 2 w 3 itp.?"

msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.text"
msgstr ""
"Wow, teraz jesteś właściwie hakerem!\n"
"\n"
"Jeszcze jedno ćwiczenie. Mając daną wielkość:\n"
"\n"
"__code0__\n"
"\n"
"Wydrukuj 'do góry nogami' trójkąt zrobiony ze znaku plus `+`, którego boki są tak długie, jak podana wielkość, np:\n"
"\n"
"    +++++\n"
"    ++++\n"
"    +++\n"
"    ++\n"
"    +"
