#
msgid ""
msgstr ""

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.0.text"
msgstr ""
"Think about how you would do this manually and systematically, with a pencil"
" and paper."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.1.text"
msgstr ""
"The fact that the password must be four letters long is very important. This"
" would be a lot harder to solve if the password could be any given length."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.2.text"
msgstr "But the string `letters` might have any number of characters."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.3.text"
msgstr ""
"If there are `n` different letters, then the number of possible passwords is"
" `n^4 == n*n*n*n` because there are `n` possible letters for each position "
"and they're all independent."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.4.text"
msgstr ""
"Suppose again that `letters = \"ABCD\"`. Imagine you have all possible "
"three-letter passwords. Now for each one, add an A at the end, or add a B, "
"or a C, or a D. That's how you would get all possible four-letter passwords."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.5.text"
msgstr ""
"Remember, a for loop can contain any statement, including another for loop."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.6.text"
msgstr "That applies to all for loops."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.7.text"
msgstr "One for loop inside another for loop is no longer enough."

msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.8.text"
msgstr "You have to go deeper."

msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.text"
msgstr ""
"For your next exercise, you need to crack a password. You know that it's exactly four letters long and that only a few letters are possible, which you've written down:\n"
"\n"
"__code0__\n"
"\n"
"You need to print out all possible passwords:\n"
"\n"
"    AAAA\n"
"    AAAB\n"
"    AAAC\n"
"    AAAD\n"
"    AABA\n"
"    AABB\n"
"    ...skipping a few...\n"
"    DDDA\n"
"    DDDB\n"
"    DDDC\n"
"    DDDD"

msgid "pages.IntroducingNestedLoops.steps.final_text.text"
msgstr ""
"Excellent! The solution goes like this:\n"
"\n"
"__code0__"

msgid "pages.IntroducingNestedLoops.steps.first_nested_loop.text"
msgstr ""
"You've seen that the indented body of an `if` or a loop can contain any kind of statement, including more `if` statements and loops. In particular a loop can contain another loop. Here's an example:\n"
"\n"
"__program_indented__\n"
"\n"
"This is called a *nested loop*. Nothing about it is really new, it's just worth understanding properly because it can be very useful for writing interesting programs."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.0.text"
msgstr "You'll need a for loop inside a for loop like before."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.1.text"
msgstr "This time something like `for player1 in players:` won't be enough."

msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.10.text"
msgstr "You need to use a comparison operator."

msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.11.text"
msgstr ""
"Once you figure out the relation, you can express it with an `if` statement."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.2.text"
msgstr "Your program needs to use the *positions* of the players in the list."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.3.text"
msgstr ""
"That means you need to loop over the positions and use indexing "
"(subscripting) to access the list entries."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.4.text"
msgstr "To loop over the positions, use `range`..."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.5.text"
msgstr "...and `len`."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.6.text"
msgstr ""
"Look at the desired output: `Charlie vs Alice`: `Charlie` comes before "
"`Alice` in the `players` list."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.7.text"
msgstr ""
"We don't want to print `Alice vs Charlie` because `Alice` comes AFTER "
"`Charlie` in `players`."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.8.text"
msgstr ""
"The only pairs we want to print are those where the left player comes before"
" the right player in the list."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.9.text"
msgstr ""
"How can we express this relation in terms of the list indices of the two "
"for-loops?"

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text"
msgstr ""
"Wow, you're an artist too!\n"
"\n"
"If you'd like, you can just continue to the [next page](#IntroducingBirdseye) now. Or you can do a bonus challenge!\n"
"\n"
"Like the earlier exercise, you're organising a tournament for a game. You have a list of player names:\n"
"\n"
"__code0__\n"
"\n"
"This time, each pair of players should only appear once. Specifically, print only those pairs that are in\n"
"the same left-to-right order as they are in `players`, starting with pairs containing the leftmost person\n"
"in `players` and moving right. For example, for the above, your program should print\n"
"\n"
"    Charlie vs Alice\n"
"    Charlie vs Dylan\n"
"    Charlie vs Bob\n"
"    Alice vs Dylan\n"
"    Alice vs Bob\n"
"    Dylan vs Bob"

msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.0.text"
msgstr ""
"Think about how you would do this manually and systematically, with a pencil"
" and paper."

msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.1.text"
msgstr "You need to use a for loop inside a for loop."

msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.2.text"
msgstr ""
"You need an `if` statement to check that the two players aren't the same "
"person."

msgid "pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text"
msgstr ""
"Perfect!\n"
"\n"
"Next exercise: you're organising a tournament for a game, such as chess or tennis. You have a list of player names:\n"
"\n"
"__code0__\n"
"\n"
"Every player is going to play against every other player twice: once where they get the advantage (e.g. by moving or serving first) and once not. Print out all the match combinations like this:\n"
"\n"
"    Alice vs Bob\n"
"    Alice vs Charlie\n"
"    Bob vs Alice\n"
"    Bob vs Charlie\n"
"    Charlie vs Alice\n"
"    Charlie vs Bob\n"
"\n"
"Note that \"Alice vs Bob\" and \"Bob vs Alice\" are both in the list, but there's no \"Alice vs Alice\" - we don't want anyone playing with themselves."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.0.text"
msgstr "You need to use a for loop inside a for loop."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.1.text"
msgstr "You need the numbers from 1 to 12."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.2.text"
msgstr "Whenever you need a sequence of consecutive numbers, use `range`."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.3.text"
msgstr "You want something like `for x in range(n):`."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.4.text"
msgstr ""
"This will start with `x = 0`, but there's an easy workaround for that."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.5.text"
msgstr "You can just add 1 to `x`."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.6.text"
msgstr "Use `*` to multiply numbers."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.7.text"
msgstr "Use an f-string with several variables."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.8.text"
msgstr ""
"Remember to print a line with the correct number of dashes after each "
"section."

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.9.text"
msgstr ""
"Make sure each line is in the correct loop and has the right amount of "
"indentation."

msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.added_str_and_int.text"
msgstr "You can't add together strings and numbers. Use an f-string."

msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.adding_one_in_wrong_loop.text"
msgstr ""
"You added 1 to your outer loop variable at the wrong place!\n"
"Where should you do that instead to fix it?"

msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.too_long.text"
msgstr ""
"Your solution is too long. You only need a few lines of code for this problem.\n"
"Use a nested loop so that you don't need to repeat yourself.\n"
"The computer will do the repetition for you!"

msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.used_times_instead_of_x.text"
msgstr ""
"That's almost correct! Make sure to display the right character `x` in your table.\n"
"For example, your solution should display `3 x 4 = 12` and not `3 * 4 = 12`."

msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.special_messages.multiply_with_x.text"
msgstr "To multiply numbers, use `*`"

msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.text"
msgstr ""
"Make sure you fully grasp what's going on. `print(letter)` and `print('---')` each run 3 times, because their indentation puts them in the *outer loop*. `print(f'{letter} {number}')` is called 3 Ã— 4 = 12 times, because it's in the *inner loop* `for number in range(4):` which has 4 iterations but is itself in the outer loop so it runs 3 times.\n"
"\n"
"Let's put this to use! Suppose you're a teacher and you need to print out all the multiplication tables from 1 to 12 for your students. You don't want to write them manually, but you can write a program to do it for you! Your program output should look like this including the lines of dashes:\n"
"\n"
"    1 x 1 = 1\n"
"    1 x 2 = 2\n"
"    1 x 3 = 3\n"
"    1 x 4 = 4\n"
"    1 x 5 = 5\n"
"    1 x 6 = 6\n"
"    1 x 7 = 7\n"
"    1 x 8 = 8\n"
"    1 x 9 = 9\n"
"    1 x 10 = 10\n"
"    1 x 11 = 11\n"
"    1 x 12 = 12\n"
"    ---\n"
"    2 x 1 = 2\n"
"    2 x 2 = 4\n"
"    2 x 3 = 6\n"
"    2 x 4 = 8\n"
"    2 x 5 = 10\n"
"    2 x 6 = 12\n"
"    2 x 7 = 14\n"
"    2 x 8 = 16\n"
"    2 x 9 = 18\n"
"    2 x 10 = 20\n"
"    2 x 11 = 22\n"
"    2 x 12 = 24\n"
"    ---\n"
"    3 x 1 = 3\n"
"    3 x 2 = 6\n"
"    3 x 3 = 9\n"
"    (you get the idea...)\n"
"    11 x 10 = 110\n"
"    11 x 11 = 121\n"
"    11 x 12 = 132\n"
"    ---\n"
"    12 x 1 = 12\n"
"    12 x 2 = 24\n"
"    12 x 3 = 36\n"
"    12 x 4 = 48\n"
"    12 x 5 = 60\n"
"    12 x 6 = 72\n"
"    12 x 7 = 84\n"
"    12 x 8 = 96\n"
"    12 x 9 = 108\n"
"    12 x 10 = 120\n"
"    12 x 11 = 132\n"
"    12 x 12 = 144\n"
"    ---"

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.0.text"
msgstr ""
"How would you describe instructions to type in this triangle manually?"

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.1.text"
msgstr ""
"Print a line of `size` plus signs, then `size - 1` plus signs, etc. down to "
"1 plus sign. For example print 5 `+`s, then 4 `+`s, then 3, 2, and 1."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.2.text"
msgstr "Break this down into subproblems."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.3.text"
msgstr ""
"How do you print one line of `+`s of a given length, and how do you go "
"through all the lengths?"

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.4.text"
msgstr ""
"Building up a line of characters should be very familiar from previous "
"exercises, the only difference is that you have to make it a given length "
"instead of just the same length as another string."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.5.text"
msgstr "An easy way to do something `n` times is to loop over `range(n)`."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.6.text"
msgstr "You need to use a for loop inside a for loop."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.7.text"
msgstr ""
"You need numbers that count down, like 5, 4, 3, 2, 1. There is a way to do "
"this with `range`, and you can easily look it up, but it's also easy to use "
"a normal range and do some very simple maths to convert numbers counting up "
"into numbers counting down."

msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.8.text"
msgstr "What formula converts 0 into 5, 1 into 4, 2 into 3, etc?"

msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.text"
msgstr ""
"Wow, you're basically a hacker now!\n"
"\n"
"One more exercise. Given a size:\n"
"\n"
"__code0__\n"
"\n"
"Print out an 'upside down' triangle made of the plus sign `+` whose sides are as long as the given size, e.g:\n"
"\n"
"    +++++\n"
"    ++++\n"
"    +++\n"
"    ++\n"
"    +"

msgid "pages.IntroducingNestedLoops.title"
msgstr "Introducing Nested Loops"
