#
msgid ""
msgstr ""

msgid "pages.GettingElementsAtPosition.steps.final_text.text"
msgstr ""
"Jeśli nadal nie czujesz się komfortowo z funkcją `range` i/lub `len`, poćwicz i eksperymentuj z nimi przez chwilę.\n"
"Oto kilka prostych ćwiczeń, które możesz spróbować wykonać samodzielnie, jeśli chcesz.\n"
"\n"
"- Wypisz liczby od `1` do `100` włącznie.\n"
"- Wypisz swoje imię 100 razy.\n"
"- Wypisz każde słowo z listy `words` oprócz ostatniego.\n"
"- Wypisz każde słowo z `words` w odwrotnej kolejności, czyli wypisz ostatnie słowo, potem przedostatnie słowo itp.\n"
"- Powróć do bonusowego problemu na końcu strony [Wprowadzenie do List](#IntroducingLists),\n"
"niezależnie od tego, czy go rozwiązałeś. Jest teraz znacznie łatwiejsze z `range` i `len`!\n"
"\n"
"Gdy będziesz gotowy, kontynuuj na następną stronę, gdzie czeka na ciebie coś trochę bardziej wymagającego."

msgid "pages.GettingElementsAtPosition.steps.index_error.program"
msgstr "words[4]"

msgid "pages.GettingElementsAtPosition.steps.index_error.requirements"
msgstr "Uruchom coś takiego jak `words[3]`, ale zastąp `3` większą liczbą."

msgid "pages.GettingElementsAtPosition.steps.index_error.text"
msgstr ""
"Ogólnie rzecz biorąc, możesz pobrać element na miejscu `i` używając `words[i]`. Operacja ta nazywa się *indeksowanie*, a miejsce to *indeks*.\n"
"\n"
"Prawdopodobnie zauważyłeś, że pierwszy indeks to 0, a nie 1. W programowaniu liczenie zaczyna się od 0. To wydaje się dziwne, ale tak właśnie działa większość języków programowania i ogólnie uznaje się to za lepsze.\n"
"\n"
"To również oznacza, że ostatni indeks w tej liście 4 elementów to 3. Co się stanie, jeśli spróbujesz uzyskać indeks większy niż ten?"

msgid "pages.GettingElementsAtPosition.steps.indices_out_of_bounds.text"
msgstr "Teraz spróbuj `__program__` w konsoli."

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.0"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.2"
msgstr ""
"0\n"
"This\n"
"1\n"
"is\n"
"2\n"
"a\n"
"3\n"
"list"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.3"
msgstr ""
"This\n"
"0\n"
"is\n"
"1\n"
"a\n"
"2\n"
"list\n"
"3"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.4"
msgstr ""
"0\n"
"1\n"
"2\n"
"3\n"
"This\n"
"is\n"
"a\n"
"list"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.5"
msgstr ""
"This\n"
"is\n"
"a\n"
"list\n"
"0\n"
"1\n"
"2\n"
"3"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = [0, 1, 2, 3]\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.text"
msgstr ""
"I oto jest. `words[4]` oraz reszta nie istnieje, więc próba ich uzyskania skończy się błędem.\n"
"Ten pierwszy program jest trochę powtarzalny. Ulepszmy go za pomocą listy i pętli!\n"
"\n"
"__program_indented__"

msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"\n"
"print(words[0])\n"
"print(words[1])\n"
"print(words[2])\n"
"print(words[3])"

msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.text"
msgstr ""
"Pętla jest świetna, ale często chcesz po prostu pobrać pojedynczy element z listy na znanym miejscu.\n"
"Oto jak:\n"
"\n"
"__program_indented__"

msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.0.text"
msgstr "Pamiętaj, że wcześniej użyliśmy `range(4)`."

msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.1.text"
msgstr ""
"Tym razem powinno to działać dla dowolnej listy. Co jeśli lista ma 5 "
"elementów albo 10?"

msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.2.text"
msgstr "Połącz dwie funkcje, których się nauczyłeś!"

msgid "pages.GettingElementsAtPosition.steps.print_indices_and_words.text"
msgstr ""
"Zatem ogólnie rzecz biorąc, prawidłowe indeksy to:\n"
"\n"
"__code0__\n"
"\n"
"Teraz możemy naprawić program z wcześniej tak, aby działał z dowolną listą. Uzupełnij `...`:\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"    for index in ...:\n"
"        print(index)\n"
"        print(words[index])\n"
"\n"
"Dla podanej wartości przykładowej 'words' powinno to wydrukować:\n"
"\n"
"    0\n"
"    This\n"
"    1\n"
"    is\n"
"    2\n"
"    a\n"
"    3\n"
"    list"

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.0.text"
msgstr ""
"Aby uzyskać dostęp do ostatniego elementu listy, potrzebujesz indeksu "
"ostatniej pozycji."

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.1.text"
msgstr ""
"Jeśli lista ma 2 elementy, pierwszy element znajduje się na indeksie 0, więc"
" ostatni element jest na indeksie 1."

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.2.text"
msgstr ""
"Podobnie, gdyby lista miała 3 elementy, ostatni element byłby na indeksie 2."

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.3.text"
msgstr "Czy widzisz wzór pomiędzy tymi numerami? Jak możesz to wyrazić?"

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.4.text"
msgstr ""
"Czy potrafisz wymyślić ogólne rozwiązanie, które działa na każdym rozmiarze?"

msgid "pages.GettingElementsAtPosition.steps.print_last_element.text"
msgstr ""
"Ćwiczenie: dla dowolnej niepustej listy `words`, wydrukuj ostatni element. Na przykład, jeśli\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"twój program powinien wydrukować `list`."

msgid ""
"pages.GettingElementsAtPosition.steps.printing_the_range.output_prediction_choices.4"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

msgid "pages.GettingElementsAtPosition.steps.printing_the_range.text"
msgstr ""
"Jak widzisz, wynik jest taki sam. Spróbuj tego:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid ""
"pages.GettingElementsAtPosition.steps.range_almost_the_same_as_list.text"
msgstr ""
"`range(4)` to to samo, co `[0, 1, 2, 3]` ... prawie. Spróbuj `__program__` w"
" konsoli."

msgid "pages.GettingElementsAtPosition.steps.range_len.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = range(4)\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

msgid "pages.GettingElementsAtPosition.steps.range_len.requirements"
msgstr ""
"Uruchom ten sam program z poprzedniego kroku, ale zamień drugą linię "
"`indices = [0, 1, 2, 3]` na `indices = range(4)`."

msgid "pages.GettingElementsAtPosition.steps.range_len.text"
msgstr ""
"To już jest lepsze, ale wypisywanie `[0, 1, 2, ...]` to nie jest najlepsze rozwiązanie, szczególnie, gdy lista jest długa.\n"
"Istnieje przydatna funkcja `range`, która zrobi to za ciebie. Zamień `[0, 1, 2, 3]` na `range(4)`,\n"
"czyli `indices = range(4)`."

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.0"
msgstr "range(4)"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.1"
msgstr "range(0, 4)"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.2"
msgstr "list(range(4))"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.3"
msgstr "list(range(0, 4))"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.4"
msgstr "range(0, 1, 2, 3)"

msgid "pages.GettingElementsAtPosition.steps.range_versus_list.text"
msgstr ""
"To jest prawdopodobnie trochę zaskakujące. Jeśli jesteś ciekawy, `0` reprezentuje początek zakresu.\n"
"`0` to domyślny początek, więc `range(4)` jest równy `range(0, 4)`.\n"
"`4` to koniec zakresu, ale koniec jest zawsze wykluczony, więc ostatnia wartość to `3`.\n"
"Jeśli teraz jesteś zdezorientowany, nie martw się o to.\n"
"\n"
"Istnieje dobry powód, dla którego `range(4)` nie jest właściwie listą - sprawia, że programy działają szybciej i są bardziej wydajne.\n"
"W tej chwili nie warto tego bardziej wyjaśniać.\n"
"\n"
"Ale łatwo możesz to przekonwertować na listę: spróbuj `__program__` w konsoli."

msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"print(len(words))"

msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.text"
msgstr ""
"To tylko demonstracja, żebyś mógł zobaczyć zakres w bardziej znajomej formie.\n"
"Nigdy właściwie nie powinieneś tego robić.\n"
"\n"
"Jeśli czujesz się przytłoczony, nie martw się! Wszystko, co musisz wiedzieć, to że `range(n)`\n"
"jest bardzo podobne do listy:\n"
"\n"
"__code0__\n"
"\n"
"Tak przy okazji, możesz uzyskać liczbę elementów listy (często nazywaną *długością*) używając funkcji `len`.\n"
"Spróbuj to, uruchamiając ten kod:\n"
"\n"
"    __copyable__\n"
"__code1__"

msgid "pages.GettingElementsAtPosition.title"
msgstr "Pobieranie elementów z pozycji, `range()`, i `len()`"
