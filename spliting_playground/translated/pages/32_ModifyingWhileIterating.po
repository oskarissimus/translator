#
msgid ""
msgstr ""

msgid "pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor.text"
msgstr ""
"Rozważ ten program. Przeszukuje on listę numerów i usuwa te mniejsze niż 10. Przynajmniej próbuje to zrobić.\n"
"Uruchom go z Python Tutor.\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(pamiętaj, że `numbers.pop(i)` usuwa element z `numbers` o indeksie `i`)"

msgid "pages.ModifyingWhileIterating.steps.remove_instead_of_pop.text"
msgstr ""
"W trakcie działania programu widać, że pomija on bez nawet patrzenia na 7 lub 3 i nie usuwa ich. Na końcu kończy się niepowodzeniem, kiedy próbuje uzyskać dostęp do indeksu, który jest za wysoki. Czy rozumiesz, dlaczego się tak dzieje?\n"
"\n"
"Zmienna indeksowa `i` przechodzi przez typowe wartości 0, 1, 2, ... jak powinna, ale w miarę zmiany listy te pozycje już nie są tymi, których chcemy. Na przykład w pierwszej iteracji `i` jest 0 i `number` to 10, który zostaje usunięty. Przesuwa to pozostałe numery o jedną pozycję w lewo, więc teraz 7 jest na pozycji 0. Ale w następnej iteracji `i` jest 1, a `numbers[i]` to 8. 7 został pominięty.\n"
"\n"
"Moglibyśmy spróbować napisać program używając `remove` zamiast `pop`, aby nie korzystać z indeksów. Nawet wygląda to ładniej w ten sposób.\n"
"\n"
"__program_indented__"

msgid "pages.ModifyingWhileIterating.steps.make_copy.text"
msgstr ""
"Ale okazuje się, że robi to niemal to samo - nie kończy się błędem, ale nadal nie usuwa 7 ani 3.\n"
"Dzieje się tak z tego samego powodu - iteracja przez listę wciąż odbywa się pod spodem przez indeksy.\n"
"\n"
"Morale z tego jest takie, aby ***nigdy nie modyfikować czegoś, podczas iteracji nad tym***. Trzymaj mutację i pętle oddzielnie.\n"
"\n"
"Dobra wiadomość jest taka, że istnieje wiele sposobów na rozwiązanie tego. Możesz zamiast tego po prostu iterować przez kopię, jak tutaj:\n"
"\n"
"__code0__"

msgid "pages.ModifyingWhileIterating.steps.make_copy2.text"
msgstr ""
"Teraz lista, która jest modyfikowana i lista, która jest iterowana, to oddzielne obiekty, nawet jeśli zaczynają z równą zawartością.\n"
"\n"
"Podobnie, możesz iterować przez oryginał i modyfikować kopię:\n"
"\n"
"__program_indented__"

msgid "pages.ModifyingWhileIterating.steps.make_new_list.text"
msgstr ""
"Albo możesz zbudować nową listę od zera. W tym przypadku już zrobiliśmy coś podobnego w ćwiczeniu:\n"
"\n"
"__program_indented__"

msgid "pages.ModifyingWhileIterating.steps.final_text.text"
msgstr ""
"Żeby powtórzyć, ***nigdy nie modyfikuj czegoś podczas iteracji nad tym***. Twoje opcje to:\n"
"\n"
"- Modyfikuj kopię\n"
"- Iteruj przez kopię\n"
"- Nie modyfikuj niczego, zamiast tego stwórz nową wersję."

msgid "pages.ModifyingWhileIterating.title"
msgstr "Modyfikowanie podczas Iteracji"

msgid "pages.ModifyingWhileIterating.steps.make_copy.requirements"
msgstr ""
"Uruchom ten sam program co wyżej, ale zmień drugą linię:\n"
"\n"
"__code0__\n"
"\n"
"na:\n"
"\n"
"__code1__\n"
"\n"
"czyli dodaj `.copy()` po `numbers`, ale przed `:`."