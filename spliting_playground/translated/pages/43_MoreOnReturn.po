#
msgid ""
msgstr ""

msgid "pages.MoreOnReturn.steps.break_vs_return.requirements"
msgstr ""
"Run the same code as in the previous step, but replace the whole last line "
"of the function (`return letter`) with just `break`."

msgid "pages.MoreOnReturn.steps.break_vs_return.text"
msgstr ""
"As before, `return` ***stops the whole function***, including all loops.\n"
"\n"
"Previously we showed [how to stop a loop with `break`](#UsingBreak).\n"
"Change `return letter` to `break` and see what the difference is."

msgid "pages.MoreOnReturn.steps.cannot_return_multiple_values.text"
msgstr ""
"Once a `return` statement is executed, the function will stop, and the rest of the code is ignored.\n"
"This means that any code immediately after a `return` in the same block is *unreachable*:\n"
"`return 2` can *never* be reached no matter how many times we run this function!\n"
"\n"
"***One, and only one `return` can be executed per function call, then execution stops.***\n"
"\n"
"Multiple `return` statements can still be useful when used properly, e.g. in an `if-else` block:\n"
"\n"
"__code0__\n"
"\n"
"A common mistake is to misunderstand what `return` does in `for` loops. Try the following:\n"
"\n"
"    __copyable__\n"
"__code1__"

msgid "pages.MoreOnReturn.steps.double_return_in_one_function.text"
msgstr ""
"Sometimes `return` can be a source of confusion and mistakes for new learners.\n"
"Let's learn more about how it works.\n"
"\n"
"Run this code:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.MoreOnReturn.steps.final_text.text"
msgstr ""
"Unlike `return`, `break` only stops the innermost loop in which it is used, in this case `for number in range(3):`.\n"
"Here's exactly what happens:\n"
"\n"
"- For `letter = b`, the line `print(f\"{letter} {number}\")` is executed only for `number = 0`,\n"
"- then the inner loop is stopped by `break`, but\n"
"- the outer loop continues its execution, moving on to the next letter `c`\n"
"- which is executed in full since it does not trigger the `break` statement."

msgid "pages.MoreOnReturn.steps.return_ends_whole_function.text"
msgstr ""
"At first it may look intuitive to `return` one value for each iteration in a `for` loop.\n"
"But it doesn't work like that!\n"
"If you inspect the code with `snoop` or Python tutor you can see that the function returns 2 in the first\n"
"loop iteration and then ends immediately.\n"
"\n"
"Even when there's only one `return` statement, it will get executed only once and return one value.\n"
"If you want to return several values, return a list:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"What happens if there are nested loops? Try the following function:\n"
"\n"
"    __copyable__\n"
"__code1__"

msgid "pages.MoreOnReturn.title"
msgstr "`return` ends the function call"
