msgid "pages.MoreOnReturn.steps.break_vs_return.requirements"
msgstr ""
"Uruchom ten sam kod co w poprzednim kroku, ale zastąp całą ostatnią linię "
"funkcji (`return letter`) tylko instrukcją `break`."

msgid "pages.MoreOnReturn.steps.break_vs_return.text"
msgstr ""
"Jak już wcześniej, `return` ***zatrzymuje całą funkcję***, łącznie z wszelkimi pętlami.\n"
"\n"
"Wcześniej pokazywaliśmy [jak zatrzymać pętlę za pomocą `break`](#UsingBreak).\n"
"Zmien `return letter` na `break` i zobacz jaka jest różnica."

msgid "pages.MoreOnReturn.steps.cannot_return_multiple_values.text"
msgstr ""
"Po wykonaniu instrukcji `return`, funkcja zostaje zakończona, a dalsza część kodu jest ignorowana.\n"
"Oznacza to, że jakikolwiek kod bezpośrednio po `return` w tym samym bloku jest *nieosiągalny*:\n"
"`return 2` nigdy nie może zostać osiągnięty, bez względu na to, ile razy uruchomimy tę funkcję!\n"
"\n"
"***Tylko jeden `return` może być wykonany na wywołanie funkcji, a następnie wykonywanie zostaje zatrzymane.***\n"
"\n"
"Wielokrotne instrukcje `return` mogą być jednak użyteczne, jeśli są stosowane we właściwy sposób, np. w bloku `if-else`:\n"
"\n"
"__code0__\n"
"\n"
"Typowym błędem jest niezrozumienie działania `return` w pętlach `for`. Wypróbuj następujący kod:\n"
"\n"
"    __copyable__\n"
"__code1__"

msgid "pages.MoreOnReturn.steps.double_return_in_one_function.text"
msgstr ""
"Czasami słowo kluczowe `return` może być źródłem zamieszania i błędów wśród początkujących.\n"
"Nauczmy się więcej na ten temat.\n"
"\n"
"Uruchom ten kod:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.MoreOnReturn.steps.final_text.text"
msgstr ""
"W przeciwieństwie do `return`, `break` zatrzymuje tylko najbardziej wewnętrzną pętlę, w której jest użyty, w tym przypadku `for number in range(3):`.\n"
"Oto, co dokładnie się dzieje:\n"
"\n"
"- Dla `letter = b`, linia `print(f\"{letter} {number}\")` jest wykonana tylko dla `number = 0`,\n"
"- następnie wewnętrzna pętla jest zatrzymywana przez `break`, ale\n"
"- zewnętrzna pętla kontynuuje swoje wykonanie, przechodząc do następnej litery `c`\n"
"- która jest wykonywana w pełni, ponieważ nie powoduje aktywacji instrukcji `break`."

msgid "pages.MoreOnReturn.steps.return_ends_whole_function.text"
msgstr ""
"Na pierwszy rzut oka może się wydawać intuicyjne, by `return` zwracał jedną wartość dla każdej iteracji w pętli `for`.\n"
"Ale to nie działa w ten sposób!\n"
"Jeśli przeanalizujesz kod za pomocą `snoop` lub Python tutor, zobaczysz, że funkcja zwraca 2 w pierwszej\n"
"iteracji pętli, a następnie kończy się natychmiast.\n"
"\n"
"Nawet gdy jest tylko jedna instrukcja `return`, zostanie ona wykonana tylko raz i zwróci jedną wartość.\n"
"Jeśli chcesz zwrócić kilka wartości, zwróć listę:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Co się stanie, jeśli są zagnieżdżone pętle? Wypróbuj następującą funkcję:\n"
"\n"
"    __copyable__\n"
"__code1__"

msgid "pages.MoreOnReturn.title"
msgstr "`return` kończy wywołanie funkcji"
