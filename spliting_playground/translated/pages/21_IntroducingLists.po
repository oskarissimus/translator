#
msgid ""
msgstr ""

msgid "pages.IntroducingLists.steps.can_contain_anything.text"
msgstr ""
"A list is a *sequence* (an ordered collection/container) of any number of values.\n"
"The values are often referred to as *elements*.\n"
"They can be anything: numbers, strings, booleans, even lists! They can also be a mixture of types.\n"
"\n"
"To create a list directly, like above:\n"
"\n"
"1. Write some square brackets: `[]`\n"
"2. If you don't want an empty list, write some expressions inside to be the elements.\n"
"3. Put commas (`,`) between elements to separate them.\n"
"\n"
"Here's another example of making a list:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingLists.steps.final_text.text"
msgstr ""
"Congratulations! That was very tricky! One solution looks like this:\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"    separator = ' - '\n"
"    total = ''\n"
"    not_first = False\n"
"\n"
"    for word in words:\n"
"        if not_first:\n"
"            total += separator\n"
"        total += word\n"
"        not_first = True\n"
"\n"
"    print(total)"

msgid "pages.IntroducingLists.steps.first_list.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"\n"
"for word in words:\n"
"    print(word)"

msgid "pages.IntroducingLists.steps.first_list.text"
msgstr ""
"It's time to learn about a powerful new type of value called *lists*. Here's an example:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingLists.steps.numbers_sum.text"
msgstr ""
"As you saw above, lists are *iterable*, meaning you can iterate over them with a `for loop`.\n"
"Here's a program that adds up all the numbers in a list:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingLists.steps.strings_sum.hints.0.text"
msgstr ""
"This is very similar to the exercises you've done building up strings "
"character by character."

msgid "pages.IntroducingLists.steps.strings_sum.hints.1.text"
msgstr "The solution is very similar to the program that adds numbers."

msgid "pages.IntroducingLists.steps.strings_sum.hints.2.text"
msgstr ""
"In fact, what happens if you try running that program with a list of "
"strings?"

msgid "pages.IntroducingLists.steps.strings_sum.hints.3.text"
msgstr ""
"The problem is that 0. You can't add 0 to a string because numbers and "
"strings are incompatible."

msgid "pages.IntroducingLists.steps.strings_sum.hints.4.text"
msgstr "Is there a similar concept among strings to 0? A blank initial value?"

msgid "pages.IntroducingLists.steps.strings_sum.text"
msgstr ""
"Now modify the program so that it can add up a list of strings instead of numbers.\n"
"For example, given:\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"it should print:\n"
"\n"
"    __no_auto_translate__\n"
"    Thisisalist"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.0.text"
msgstr ""
"This is similar to the previous exercise. You can start with your solution "
"from that."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.1.text"
msgstr ""
"This exercise doesn't require anything fancy and the final solution can be "
"quite simple. But it's tricky to get it right and you need to think about "
"the approach carefully."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.10.text"
msgstr ""
"You *can* write a program that checks if you're in the *first* iteration of "
"a loop."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.11.text"
msgstr ""
"Just make a boolean variable to keep track of this. No need for any "
"comparison operators or numbers."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.12.text"
msgstr ""
"We looked at programs that did something like this "
"[here](#UnderstandingProgramsWithSnoop)."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.13.text"
msgstr ""
"So if you only skip adding the separator in the first iteration, you will "
"have `n - 1` separators. Now you just need to think carefully about how to "
"make sure the separators are in the right place."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.14.text"
msgstr ""
"Forgetting the loop for a moment, you need to add the following to the "
"string in this order: the first word, the separator, the second word, the "
"separator, the third word, etc."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.15.text"
msgstr ""
"That means that in the first iteration, you just add the first word. In the "
"second iteration, you add the separator, then the second word. In the third "
"iteration, you add the separator, then the third word. And so on."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.16.text"
msgstr "So inside your loop, add the separator first, add the word after."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.17.text"
msgstr ""
"Skip adding the separator in the first iteration by checking a boolean "
"variable."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.18.text"
msgstr ""
"Create the boolean variable before the loop, then change it inside the loop."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.19.text"
msgstr ""
"Only change it in the loop after checking it, or you won't be able to skip "
"the first iteration."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.2.text"
msgstr ""
"In each iteration, in addition to a word in the list, you also have to add "
"the separator."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.3.text"
msgstr ""
"But you don't want to add the separator after adding the last word in the "
"list."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.4.text"
msgstr ""
"Unfortunately there is no \"subtraction\" with strings; you can't add the "
"last separator then remove it."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.5.text"
msgstr ""
"Let's back up. The final result should contain each word, and `n - 1` "
"separators, where `n` is the number of words."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.6.text"
msgstr "So you want to add a separator in every iteration except one."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.7.text"
msgstr ""
"You can skip adding the separator in one particular iteration using an `if` "
"statement."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.8.text"
msgstr ""
"Later on you will learn a way to iterate over a list and check if you're in "
"the last iteration, but right now you have no way of doing that."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.9.text"
msgstr "However, the iteration you skip doesn't have to be the last one!"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.text"
msgstr ""
"Excellent!\n"
"\n"
"If you'd like, you can just continue to the [next page](#BuildingNewLists) now.\n"
"\n"
"For an optional bonus challenge: extend the program to insert a separator string *between* each word.\n"
"For example, given\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"    separator = ' - '\n"
"\n"
"it would output:\n"
"\n"
"    __no_auto_translate__\n"
"    This - is - a - list"

msgid "pages.IntroducingLists.title"
msgstr "Introducing Lists"
