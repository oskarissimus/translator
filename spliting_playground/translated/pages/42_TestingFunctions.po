#
msgid ""
msgstr ""

msgid "pages.TestingFunctions.steps.introducing_assert_equal.text"
msgstr ""
"An important part of writing programs is testing that they work correctly. You can do this manually, e.g. by checking that\n"
"`print(double(5))` prints `10`, but this kind of thing can get tedious quickly.\n"
"It's helpful to actually write programs that test your programs. This is called *automated testing*,\n"
"and the programs are called *tests*.\n"
"\n"
"Here's a simple function `assert_equal` to help us write tests:\n"
"\n"
"__code0__\n"
"\n"
"\n"
"(What's that function `repr`? Try `print(f\"{'abc'} {repr('abc')}\")` to see one difference, but don't worry about it too much.)\n"
"\n"
"This isn't a standard part of python (although similar functions are), but we've added it to your coding environment\n"
"so you can always use it. Here's an example of using it for you to try out:\n"
"\n"
"__program_indented__"

msgid "pages.TestingFunctions.steps.make_tests_fail.text"
msgstr ""
"The OKs tell us that the tests passed. Our `double` function seems to be working correctly. Change it to return\n"
"`x * 3` instead and see what happens."

msgid "pages.TestingFunctions.steps.complete_quadruple_tests.text"
msgstr ""
"Excellent! Our tests failed! Of course that's not usually a good thing, but it tells us that the tests are\n"
"doing their job. They will make sure that our implementation of `double` is correct.\n"
"\n"
"Let's practice this new concept. Below is the function `quadruple` from before with some incomplete tests.\n"
"Fix the program by adding the missing arguments to `assert_equal`.\n"
"\n"
"__code0__"

msgid "pages.TestingFunctions.steps.surround_exercise.text"
msgstr ""
"Another useful thing about the tests is that anyone can read them and see clear, unambiguous examples\n"
"of what the function does. This is helpful when a function is complicated and difficult to describe in English.\n"
"\n"
"For example, here are some tests:\n"
"\n"
"__code0__\n"
"\n"
"I don't need to explain what `surround` does, you can see for yourself.\n"
"\n"
"Write a function `surround` that passes these tests and starts like this:\n"
"\n"
"__code1__"

msgid "pages.TestingFunctions.steps.alert_exercise.text"
msgstr ""
"Perfect! Now write a function `alert` that passes these tests:\n"
"\n"
"__code0__\n"
"\n"
"The body of `alert` is not allowed to contain `+`. Use `surround` instead. Your function should start like this:\n"
"\n"
"__code1__"

msgid "pages.TestingFunctions.steps.final_text.text"
msgstr "Great work! These tools will be very helpful in coming chapters."

msgid "pages.TestingFunctions.steps.surround_exercise.hints.0.text"
msgstr "The argument `sides` should be added before and after `string`."

msgid "pages.TestingFunctions.steps.surround_exercise.hints.1.text"
msgstr "Use string concatenation to do this."

msgid "pages.TestingFunctions.steps.surround_exercise.hints.2.text"
msgstr "Make sure the body is indented."

msgid "pages.TestingFunctions.steps.surround_exercise.hints.3.text"
msgstr "Make sure you `return` something at the end."

msgid "pages.TestingFunctions.steps.surround_exercise.hints.4.text"
msgstr ""
"Make sure that you don't call `surround` inside the function body of "
"`surround`. Check your indentation."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.0.text"
msgstr ""
"`string` should be surrounded by one space and `level` exclamation marks "
"(`!`) on each side."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.1.text"
msgstr ""
"Include the definition of `surround` from before in your program and call it"
" in `alert`."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.2.text"
msgstr "Use `surround` for the spaces."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.3.text"
msgstr "Use `surround` for the exclamation marks."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.4.text"
msgstr ""
"You're not allowed to combine several exclamation marks into one string, so "
"call `surround` several times."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.5.text"
msgstr "That is, call `surround` once for each pair of exclamation marks."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.6.text"
msgstr "So call `surround(..., '!')` several times."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.7.text"
msgstr "Use a loop to call it several times."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.8.text"
msgstr "Use `range(n)` to make your loop have `n` iterations."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.9.text"
msgstr "Make sure you use the return value from `surround`."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.10.text"
msgstr ""
"Think of how you would build up strings with `+=`. Repeatedly update the "
"same variable, building up your result."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.11.text"
msgstr "That is, write `something = surround(something, '!')` in your loop."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.12.text"
msgstr "Make sure you `return` something at the end of `alert`."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.13.text"
msgstr ""
"Make sure you don't `return` inside the loop, but after it. Check your "
"indentation."

msgid "pages.TestingFunctions.steps.alert_exercise.hints.14.text"
msgstr ""
"Make sure that you don't call `alert` inside the function body of `alert`. "
"Check your indentation."

msgid ""
"pages.TestingFunctions.steps.alert_exercise.messages.catch_return_inside_loop.text"
msgstr ""
"In the `alert` function, you placed your `return` statement at the wrong place!\n"
"Pay attention to your indentations in `alert`. You might be ending a loop too early with `return`."

msgid "pages.TestingFunctions.steps.alert_exercise.messages.used_format.text"
msgstr ""
"You cannot use string concatenation/formatting/interpolation/multiplication or f-strings in `alert`.\n"
"You must call `surround` to solve the problem."

msgid "pages.TestingFunctions.title"
msgstr "Testing Functions"

msgid "pages.TestingFunctions.steps.complete_quadruple_tests.requirements"
msgstr ""
"Type in the program above.\n"
"Then change the last two lines by adding one argument to each `assert_equal` call to make the tests pass.\n"
"Don't touch the function definitions."

msgid "pages.TestingFunctions.steps.make_tests_fail.requirements"
msgstr ""
"Run the program from the previous step, but replace `x * 2` with `x * 3`. "
"Keep the rest the same."
