#
msgid ""
msgstr ""

msgid "pages.IntroducingElif.steps.dna_example.text"
msgstr ""
"Quick biology lesson! Most of the cells in your body contain your full genetic code in DNA.\n"
"This consists of strands of molecular units called nucleobases which come in four varieties:\n"
"Adenine, Cytosine, Guanine, and Thymine, or ACGT for short.\n"
"So part of a single strand might be something like:\n"
"\n"
"    AGTAGCGTCCTTAGTTACAGGATGGCTTAT...\n"
"\n"
"This will be paired with another strand where A is replaced by T and vice versa,\n"
"and C is replaced by G and vice versa, e.g:\n"
"\n"
"    TCATCGCAGGAATCAATGTCCTACCGAATA...\n"
"\n"
"The two strands are 'zipped' together into the famous double helix structure,\n"
"joined by the matching A-T and C-G pairs. These pairings are essential in copying DNA when\n"
"cells divide and reproduce. The double helix is unzipped and the code is transcribed\n"
"into its opposite version to make the copy.\n"
"\n"
"We're going to repeat that process. Let's try the same kind of program we just wrote:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.IntroducingElif.steps.dna_example_with_elif.requirements"
msgstr ""
"Copy the program from the first step on this page, but replace the 4 `if` blocks there with the\n"
"combination of `if` and `elif` blocks here. In other words, replace each of the last three `if`s with\n"
"`elif`, but leave the first `if` alone."

msgid "pages.IntroducingElif.steps.dna_example_with_elif.text"
msgstr ""
"Brilliant! You have mimicked what your own cells are constantly doing.\n"
"\n"
"An `if` inside an `else` can be replaced by a single keyword `elif`. For example,\n"
"the previous code can be changed to this:\n"
"\n"
"__code0__"

msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.0.text"
msgstr ""
"Change:\n"
"\n"
"__code0__\n"
"\n"
"to look like the revised snippet. It's just a small change, do it without copy-pasting."

msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.1.text"
msgstr "Now make the same kind of change to the code swapping G and C."

msgid "pages.IntroducingElif.steps.dna_example_with_else.text"
msgstr ""
"Oh dear, that doesn't quite work. `T` is changed to `A` but `A` isn't changed to anything.\n"
"Can you see why?\n"
"\n"
"When `char == 'A'`, then the body `char = 'T'` does indeed run. But that means that the following\n"
"condition `char == 'T'` also passes and so `char = 'A'` and we're back where we started.\n"
"We need to only change `char` from `T` to `A` if `char` wasn't already `A` to begin with,\n"
"meaning `char == 'A'` was `False`. We can do that with an `else`, like so:\n"
"\n"
"__code0__\n"
"\n"
"Now fix the program to replace all characters correctly."

msgid "pages.IntroducingElif.steps.final_text.text"
msgstr ""
"It's common to have a chain of `elif` clauses when you want exactly one of many\n"
"bodies to run, like in this case. In general, code like this:\n"
"\n"
"__code0__\n"
"\n"
"can be rewritten as:\n"
"\n"
"__code1__\n"
"\n"
"which is both shorter and saves you from unpleasant nested indentation.\n"
"The difference is only cosmetic: once the computer runs this code, it can't\n"
"tell the difference between the two versions.\n"
"\n"
"Note that `elif`(s) can optionally be followed by one final `else`. We didn't include one\n"
"in our DNA example, but we could add one to alert us to any unexpected characters\n"
"in the input, or change `elif char == 'C':` to `else:` if we were confident\n"
"about the input being valid."

msgid "pages.IntroducingElif.title"
msgstr "Introducing `elif`"
