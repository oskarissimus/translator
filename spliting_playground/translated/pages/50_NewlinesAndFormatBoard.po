#
msgid ""
msgstr ""

msgid ""
"pages.NewlinesAndFormatBoard.steps.discovering_newline.special_messages.bad_string.text"
msgstr ""
"Oops, `string` doesn't have the right value. Run the program from the "
"previous step again."

msgid "pages.NewlinesAndFormatBoard.steps.discovering_newline.text"
msgstr ""
"Hooray! A *triple quoted string* is allowed to span many lines and they will be shown in the output.\n"
"\n"
"Like single and double quotes, triple quotes are just another kind of notation, not a new kind of string.\n"
"`\"\"\"abc\"\"\"` is the same thing as `\"abc\"`.\n"
"\n"
"However `string` does contain something new. Run `__program__` in the shell to see."

msgid "pages.NewlinesAndFormatBoard.steps.final_text.text"
msgstr ""
"Great work! That was quite challenging.\n"
"\n"
"Now you have mastered how to build up a string of multiple lines of text, and solved the problem of displaying the board to the players.\n"
"\n"
"Next you will learn more about types in Python and how to convert them, and how to get input from the players.\n"
"You are already about halfway done with the project. Keep going!"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.0.text"
msgstr ""
"There are two types of lines to be displayed: one type has the pieces joined"
" by `|`s in between them, the other type has `-`s joined by `+`s in between "
"them."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.1.text"
msgstr ""
"Both of these types of lines can be built up by using `join` appropriately."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.10.text"
msgstr "Then apply `join` to that list, with the `+-` line as separator."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.11.text"
msgstr ""
"To add the newlines to the `+-` line correctly, take a look at the test case"
" we provided."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.2.text"
msgstr ""
"For example, how can you convert a row `['X', 'O', 'X']` into `'X|O|X'` "
"using `join`?"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.3.text"
msgstr ""
"Similarly, how can you obtain `'-+-+-'` using `join`? To what list should "
"you apply `join`?"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.4.text"
msgstr ""
"Once you figured out how to build up both types of lines, how can you "
"combine them to obtain the final result?"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.5.text"
msgstr "Notice that the lines with the `+-`  signs are always the same."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.6.text"
msgstr ""
"And there is one line with `+-` separating every consecutive pair of lines "
"with pieces."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.7.text"
msgstr "You can use `join` on the lines themselves!"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.8.text"
msgstr ""
"The lines with the pieces can be joined together with the `+-` line in "
"between them (with newlines added in appropriate places)."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.9.text"
msgstr ""
"To do that, first you need to keep the lines with the pieces stored in a "
"list as you are building them."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text"
msgstr ""
"Excellent! A typical solution looks like:\n"
"\n"
"__code0__\n"
"\n"
"If you looked up how `join` works and used it in your solution, that's great!\n"
"You might have solved it with something like this:\n"
"\n"
"__code1__\n"
"\n"
"If you'd like, you can just continue to the [next page](#Types) now. Or you can do a bonus challenge!\n"
"\n"
"Write an improved version of `format_board` that displays row and column separators. For example, if\n"
"\n"
"__code2__\n"
"\n"
"then `print(format_board(board))` should print\n"
"\n"
"    X|O|X\n"
"    -+-+-\n"
"     |O|O\n"
"    -+-+-\n"
"     |X|\n"
"\n"
"Once again it should work for a square `board` of *any size*.\n"
"\n"
"You are strongly encouraged to use `join` on this exercise. We provide one test as before, you can write additional tests:\n"
"\n"
"    __copyable__\n"
"__code3__"

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.0.text"
msgstr ""
"Look carefully at the test case we provided. It shows you all you need!"

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.1.text"
msgstr ""
"You need to build up a string for the whole board. Start with an empty "
"string."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.2.text"
msgstr "For each row, add the characters from that row to the string."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.3.text"
msgstr "You'll need a nested loop."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.4.text"
msgstr ""
"When you reach the end of a row, you need to add a newline before the next "
"row."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.5.text"
msgstr ""
"`'\\n'` is just like any other character! You can add it as usual with `+`."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.6.text"
msgstr "Notice that the end of the last row is different than the others."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.7.text"
msgstr ""
"Before you add a newline, you'll need to check if it's the last row or not."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.8.text"
msgstr "Your outer loop should loop over the length of the board."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.9.text"
msgstr "Then check if you are at the last index or not."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.text"
msgstr ""
"Now use the newline character to write the function `format_board` (your solution should work for a square `board` of any size):\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.NewlinesAndFormatBoard.steps.introducing_newline.text"
msgstr ""
"There's the secret!\n"
"\n"
"`\\n` represents a ***newline*** character. This is just another character, like a letter or a space (`' '`).\n"
"It's the character between two separate lines that you type in by pressing Enter on your keyboard.\n"
"\n"
"Again, `\\n` *represents* the newline character within a Python string literal.\n"
"The string doesn't actually contain `\\` and `n`, it just contains one character. Check this in the shell:\n"
"\n"
"__code0__"

msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.program"
msgstr ""
"assert_equal(\n"
"    format_board([\n"
"        ['X', 'O', 'X'],\n"
"        [' ', 'O', 'O'],\n"
"        [' ', 'X', ' ']\n"
"    ]),\n"
"    \"XOX\n"
"      OO\n"
"      X \"\n"
")"

msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text"
msgstr ""
"This is a good start but ideally we'd like a function which *returns* a string rather than printing it.\n"
"This way other code can make easy use of the string in different ways. We might want to manipulate the string\n"
"(e.g. draw a box around it or extract only the first few lines), we might want to send it somewhere other than the screen\n"
"(e.g. a file) and in this particular case we want to be able to test it with `assert_equal`. This doesn't work:\n"
"\n"
"__code0__\n"
"\n"
"because `print_board` doesn't use `return` so it just returns `None` by default.\n"
"So instead we want code like this:\n"
"\n"
"__code1__\n"
"\n"
"Then `print(format_board(board))` should print something like what we saw at the beginning.\n"
"But how do we return a string with multiple lines? And how do we test it? We'd like to do something like this:\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"See for yourself how this doesn't work."

msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.program"
msgstr ""
"string = \"\"\"First line\n"
"Second line\"\"\"\n"
"print(string)"

msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.text"
msgstr ""
"Normally a string literal has to be on one line, so this is invalid:\n"
"\n"
"    string = \"First line\n"
"    Second line\"\n"
"    print(string)\n"
"\n"
"But Python provides a way! The solution is to use *triple quotes*, i.e. three quote characters in a row\n"
"(either `'''` or `\"\"\"`) around the contents of the string. Run the following:\n"
"\n"
"__program_indented__"

msgid "pages.NewlinesAndFormatBoard.steps.one_way_to_print_board.text"
msgstr ""
"Next we want to tackle the problem of displaying the tic-tac-toe board. Here's one way to do this:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(What's `\"\".join`? Google it!)"

msgid "pages.NewlinesAndFormatBoard.title"
msgstr "The newline character, `format_board`"
