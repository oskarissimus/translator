msgid ""
"pages.NewlinesAndFormatBoard.steps.discovering_newline.special_messages.bad_string.text"
msgstr ""
"Ups, łańcuch `string` nie ma właściwej wartości. Uruchom ponownie program z "
"poprzedniego kroku."

msgid "pages.NewlinesAndFormatBoard.steps.discovering_newline.text"
msgstr ""
"Huraa! *Potrójny cytowany łańcuch* może się rozciągać przez wiele linii i one będą pokazane w wyjściu.\n"
"\n"
"Podobnie jak pojedyncze i podwójne cudzysłowy, potrójne cudzysłowy to po prostu inny rodzaj notacji, nie nowy rodzaj łańcucha.\n"
"`\"\"\"abc\"\"\"` to to samo co `\"abc\"`.\n"
"\n"
"Jednakże łańcuch `string` zawiera coś nowego. Uruchom `__program__` w konsoli, aby zobaczyć."

msgid "pages.NewlinesAndFormatBoard.steps.final_text.text"
msgstr ""
"Świetna robota! To było całkiem trudne.\n"
"\n"
"Teraz opanowałeś budowanie łańcucha znaków z wieloma liniami tekstu i rozwiązałeś problem wyświetlania planszy graczom.\n"
"\n"
"Następnie dowiesz się więcej o typach w Pythonie i jak je konwertować, oraz jak uzyskać dane wejściowe od graczy.\n"
"Jesteś już w połowie drogi do zakończenia projektu. Kontynuuj!"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.0.text"
msgstr ""
"Są dwa typy linii do wyświetlenia: jeden typ łączy elementy symbolem `|` "
"pomiędzy nimi, drugi typ łączy symbole `-` z `+` pomiędzy nimi."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.1.text"
msgstr "Oba te typy linii można zbudować używając odpowiednio `join`."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.10.text"
msgstr ""
"Następnie zastosuj `join` do tej listy, używając linii `+-` jako separatora."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.11.text"
msgstr ""
"Aby poprawnie dodać znaki nowej linii do linii `+-`, spojrzyj na przypadek "
"testowy, który dostarczyliśmy."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.2.text"
msgstr ""
"Na przykład, jak możesz przekształcić rząd `['X', 'O', 'X']` w `'X|O|X'` "
"używając `join`?"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.3.text"
msgstr ""
"Podobnie, jak możesz uzyskać `'-+-+-'` używając `join`? Do jakiej listy "
"powinieneś zastosować `join`?"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.4.text"
msgstr ""
"Gdy już zrozumiesz, jak zbudować oba typy linii, jak możesz je połączyć, aby"
" uzyskać ostateczny wynik?"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.5.text"
msgstr "Zauważ, że linie z `+-` zawsze są takie same."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.6.text"
msgstr ""
"I jest jedna linia z `+-` rozdzielająca każdą parę kolejnych linii z "
"elementami."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.7.text"
msgstr "Możesz użyć `join` na samych liniach!"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.8.text"
msgstr ""
"Linie z elementami można połączyć razem z linią `+-` pomiędzy nimi (dodając "
"nowe linie w odpowiednich miejscach)."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.9.text"
msgstr ""
"Żeby zrobić to, musisz najpierw przechowywać linie z elementami w liście "
"podczas ich budowania."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text"
msgstr ""
"Świetnie! Typowe rozwiązanie wygląda tak:\n"
"\n"
"__code0__\n"
"\n"
"Jeśli wyszukałeś, jak działa `join` i użyłeś go w swoim rozwiązaniu, to świetnie!\n"
"Możesz to rozwiązać w sposób podobny do tego:\n"
"\n"
"__code1__\n"
"\n"
"Jeśli chcesz, możesz teraz przejść do [następnej strony](#Types). Albo możesz podjąć dodatkowe wyzwanie!\n"
"\n"
"Napisz ulepszoną wersję `format_board`, która pokaże separatory rzędów i kolumn. Na przykład, jeśli\n"
"\n"
"__code2__\n"
"\n"
"wtedy `print(format_board(board))` powinno wydrukować\n"
"\n"
"    X|O|X\n"
"    -+-+-\n"
"     |O|O\n"
"    -+-+-\n"
"     |X|\n"
"\n"
"Raz jeszcze powinno to działać dla kwadratowej `board` *dowolnego rozmiaru*.\n"
"\n"
"Zachęcamy do użycia `join` w tym ćwiczeniu. Podajemy jeden test jak poprzednio, możesz napisać dodatkowe testy:\n"
"\n"
"    __copyable__\n"
"__code3__"

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.0.text"
msgstr ""
"Dokładnie przyjrzyj się dostarczonemu przez nas przypadkowi testowemu. "
"Pokazuje on wszystko, co potrzebujesz!"

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.1.text"
msgstr ""
"Musisz zbudować łańcuch dla całej planszy. Zacznij od pustego łańcucha."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.2.text"
msgstr "Dla każdego rzędu dodaj znaki z tego rzędu do łańcucha."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.3.text"
msgstr "Będziesz potrzebował pętli zagnieżdżonej."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.4.text"
msgstr ""
"Gdy dotrzesz do końca rzędu, musisz dodać znak nowej linii przed następnym "
"rzędem."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.5.text"
msgstr ""
"`'\\n'` jest tak jak inne znaki! Możesz dodać go jak zwykle przy użyciu `+`."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.6.text"
msgstr "Zauważ, że koniec ostatniego rzędu jest inny niż pozostałych."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.7.text"
msgstr ""
"Zanim dodasz nową linię, będziesz musiał sprawdzić, czy to ostatni rząd, czy"
" nie."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.8.text"
msgstr "Twoja zewnętrzna pętla powinna przejść przez długość planszy."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.9.text"
msgstr "Następnie sprawdź, czy jesteś na ostatniej pozycji, czy nie."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.text"
msgstr ""
"Teraz użyj znaku nowej linii, aby napisać funkcję `format_board` (twoje rozwiązanie powinno działać dla kwadratowej `board` dowolnego rozmiaru):\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.NewlinesAndFormatBoard.steps.introducing_newline.text"
msgstr ""
"Oto sekret!\n"
"\n"
"`\\n` reprezentuje znak ***nowej linii***. To jest po prostu inny znak, tak jak litera czy spacja (`' '`).\n"
"To jest znak między dwoma oddzielnymi liniami, które wpisujesz naciskając Enter na klawiaturze.\n"
"\n"
"Znowu, `\\n` *reprezentuje* znak nowej linii wewnątrz literału łańcucha Pythona.\n"
"Łańcuch rzeczywiście nie zawiera `\\` i `n`, zawiera tylko jeden znak. Sprawdź to w konsoli:\n"
"\n"
"__code0__"

msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.program"
msgstr ""
"assert_equal(\n"
"    format_board([\n"
"        ['X', 'O', 'X'],\n"
"        [' ', 'O', 'O'],\n"
"        [' ', 'X', ' ']\n"
"    ]),\n"
"    \"XOX\n"
"      OO\n"
"      X \"\n"
")"

msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text"
msgstr ""
"To dobry początek, ale idealnie chcielibyśmy funkcję, która *zwraca* łańcuch znaków zamiast go wyświetlać.\n"
"W ten sposób inny kod może w łatwy sposób wykorzystać ten łańcuch w różnych sposobach. Możemy chcieć manipulować łańcuchem\n"
"(np. rysować dookoła niego ramkę lub wyodrębnić tylko pierwsze kilka linii), możemy chcieć wysłać go gdzieś innego niż na ekran\n"
"(np. do pliku) i w tym konkretnym przypadku chcemy móc go przetestować przy użyciu `assert_equal`. To nie działa:\n"
"\n"
"__code0__\n"
"\n"
"ponieważ `print_board` nie używa `return`, więc domyślnie zwraca `None`.\n"
"Zamiast tego chcemy kodu w stylu:\n"
"\n"
"__code1__\n"
"\n"
"Wtedy `print(format_board(board))` powinno wydrukować coś podobnego do tego, co widzieliśmy na początku.\n"
"Ale jak zwracamy łańcuch ze znakami nowych linii? I jak go przetestować? Chcielibyśmy zrobić coś takiego:\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"Zobacz sam, jak to nie działa."

msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.program"
msgstr ""
"string = \"\"\"First line\n"
"Second line\"\"\"\n"
"print(string)"

msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.text"
msgstr ""
"Zazwyczaj literał łańcucha musi być w jednej linii, więc to jest nieprawidłowe:\n"
"\n"
"    string = \"First line\n"
"    Second line\"\n"
"    print(string)\n"
"\n"
"Ale Python dostarcza rozwiązania! Rozwiązaniem jest użycie *potrójnych cudzysłowów*, czyli trzech znaków cudzysłowia z rzędu\n"
"(albo `'''` albo `\"\"\"`) do otoczenia zawartości łańcucha. Uruchom następujący program:\n"
"\n"
"__program_indented__"

msgid "pages.NewlinesAndFormatBoard.steps.one_way_to_print_board.text"
msgstr ""
"Następnie chcemy rozwiązać problem wyświetlania planszy do gry w kółko i krzyżyk. Oto jeden ze sposobów na to:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(Co to jest `\"\".join`? Wyszukaj w Google!)"

msgid "pages.NewlinesAndFormatBoard.title"
msgstr "Znak nowej linii, `format_board`"
