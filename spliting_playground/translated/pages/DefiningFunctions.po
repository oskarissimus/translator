#
msgid ""
msgstr ""

msgid "pages.DefiningFunctions.steps.change_function_name.hints.0.text"
msgstr ""
"Musisz zmienić nazwę w nagłówku definicji funkcji, ale to nie wszystko."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.1.text"
msgstr ""
"Jeśli zmienisz tylko nazwę w nagłówku definicji funkcji, co się stanie?"

msgid "pages.DefiningFunctions.steps.change_function_name.hints.2.text"
msgstr "Otrzymasz błąd. Spójrz na komunikat. Co Ci mówi? Skąd pochodzi błąd?"

msgid "pages.DefiningFunctions.steps.change_function_name.hints.3.text"
msgstr ""
"Jeśli twoja funkcja nazywa się `say_hello`, co oznacza `greet(\"Alice\")`?"

msgid "pages.DefiningFunctions.steps.change_function_name.hints.4.text"
msgstr "Musisz zmienić dokładnie 3 linijki programu."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.5.text"
msgstr "W każdej linijce, którą zmieniasz, zmień dokładnie jedno słowo."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.6.text"
msgstr ""
"Nie ruszaj treści funkcji. Powinna ona nadal zawierać `print(\"Jak się "
"masz?\")`."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.7.text"
msgstr ""
"Nadal powinieneś(aś) wywołać funkcję dwukrotnie po jej zdefiniowaniu, z "
"argumentami `\"Alice\"` i `\"Bob\"`."

msgid "pages.DefiningFunctions.steps.change_function_name.text"
msgstr ""
"Zwróć uwagę, jak zmieniło się wyjście programu. `Jak się masz?` jest wyświetlane dwukrotnie. Możesz myśleć o całym programie jako o czymś\n"
"równoważnym do tego:\n"
"\n"
"__code0__\n"
"\n"
"To pokazuje jedną z najbardziej użytecznych rzeczy odnośnie funkcji. Pozwalają one wielokrotnie używać tego samego kodu bez\n"
"konieczności powtarzania się. To jak pisanie programu wewnątrz programu.\n"
"\n"
"Linia nagłówka definicji funkcji zawsze zawiera te części:\n"
"\n"
"1. Specjalne słowo kluczowe `def`, po którym następuje spacja.\n"
"2. Nazwa funkcji. Jest to jak nazwa zmiennej - możesz wybrać nazwę, którą chcesz, ale istnieją pewne ograniczenia,\n"
"np. nie może zawierać spacji.\n"
"3. Para nawiasów `(` i `)`\n"
"4. Zero lub więcej nazw parametrów pomiędzy nawiasami, oddzielonych przecinkami, jeśli jest ich więcej niż jeden. Tutaj mamy\n"
"jeden parametr o nazwie `name`.\n"
"5. Dwukropek `:`\n"
"\n"
"Zróbmy kilka prostych ćwiczeń. Zmień nazwę funkcji z `greet` na `say_hello`.\n"
"Upewnij się, że cały program nadal działa jak przedtem, ale nie zmieniaj niczego innego."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.0.text"
msgstr ""
"Musisz zmienić nazwę parametru w nagłówku definicji funkcji, ale to nie "
"wszystko."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.1.text"
msgstr ""
"Jeśli zmienisz tylko nazwę parametru w nagłówku definicji funkcji, co się "
"stanie?"

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.2.text"
msgstr "Otrzymasz błąd. Spójrz na komunikat. Co Ci mówi? Skąd pochodzi błąd?"

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.3.text"
msgstr ""
"Jeśli parametr nazywa się `person_name`, co oznacza `print(f\"Hello "
"{name}!\")`?"

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.4.text"
msgstr "Musisz zmienić dokładnie 2 linijki programu."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.5.text"
msgstr "W każdej linijce, którą zmieniasz, zmień dokładnie jedno słowo."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.6.text"
msgstr ""
"Nie ruszaj części po definicji funkcji, tzn. `say_hello(\"Alice\")` i "
"`say_hello(\"Bob\")`."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.7.text"
msgstr ""
"W treści funkcji powinieneś(aś) nadal mieć dwie instrukcje, w tym "
"`print(\"Jak się masz?\")`."

msgid "pages.DefiningFunctions.steps.change_parameter_name.text"
msgstr ""
"Dobrze! Teraz wykonaj podobne ćwiczenie: zmień nazwę parametru z `name` na "
"`person_name`."

msgid "pages.DefiningFunctions.steps.define_greet.text"
msgstr ""
"Zobaczyłeś(aś) już, jak wywoływać funkcje takie jak `print()` i `len()`. Teraz nauczysz się pisać własne\n"
"funkcje, z których mogą korzystać Ty lub inni ludzie. Jest to bardzo ważne, ponieważ programy stają się większe i bardziej skomplikowane.\n"
"\n"
"Oto prosty przykład:\n"
"\n"
"__program_indented__\n"
"\n"
"To definiuje funkcję o nazwie `greet`, która akceptuje jeden parametr. Poniżej definicji wywołujemy funkcję dwukrotnie.\n"
"Uruchom kod, aby zobaczyć co się stanie."

msgid "pages.DefiningFunctions.steps.final_text.text"
msgstr "Doskonale! Teraz masz solidne podstawy podstaw definiowania funkcji."

msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.0"
msgstr ""
"Cześć Alice!\n"
"Jak się masz?\n"
"Cześć Bob!\n"
"Jak się masz?"

msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.1"
msgstr ""
"Cześć Alice!\n"
"Cześć Bob!\n"
"Jak się masz?"

msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.2"
msgstr ""
"Cześć Alice!\n"
"Jak się masz?\n"
"Cześć Bob!"

msgid "pages.DefiningFunctions.steps.how_are_you.requirements"
msgstr ""
"Dodaj `print(\"Jak się masz?\")` po `print(f\"Cześć {name}!\")` z takim samym wcięciem.\n"
"Zachowaj dwa wywołania `greet` po definicji jak są."

msgid "pages.DefiningFunctions.steps.how_are_you.text"
msgstr ""
"Definicja funkcji to składna instrukcja. Podobnie jak `if` i `for`, ma linię nagłówkową, po której następuje wcięty blok\n"
"zawierający jedną lub więcej instrukcji.\n"
"\n"
"Dodaj kolejną instrukcję do funkcji, aby wyglądała ona tak:\n"
"\n"
"__code0__\n"
"\n"
"Następnie uruchom program ponownie."

msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.2"
msgstr ""
"Cześć\n"
"Cześć\n"
"Cześć"

msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.3"
msgstr "Cześć"

msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.4"
msgstr ""
"H\n"
"e\n"
"l\n"
"l\n"
"o"

msgid "pages.DefiningFunctions.steps.print_many.text"
msgstr ""
"Funkcje mogą mieć wiele parametrów. Tutaj jest przykład:\n"
"\n"
"__program_indented__"

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.0.text"
msgstr ""
"Nie ma tu żadnych szczególnych zagadek, chodzi tylko o przestrzeganie "
"receptury na definiowanie funkcji."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.1.text"
msgstr "Upewnij się, że masz wszystkie części funkcji wymienione powyżej."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.2.text"
msgstr "To obejmuje `def`, `()`, i `:`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.3.text"
msgstr "Upewnij się, że twoja funkcja nazywa się `print_twice`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.4.text"
msgstr ""
"Upewnij się, że przyjmuje ona jeden parametr o nazwie `x` pomiędzy nawiasami"
" `()`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.5.text"
msgstr "Spójrz na inne funkcje zdefiniowane powyżej, aby uzyskać pomoc."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.6.text"
msgstr "Użyj parametru wewnątrz treści funkcji."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.7.text"
msgstr "Upewnij się, że treść jest wcięta."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.8.text"
msgstr "Treść powinna zawierać dwie instrukcje lub bardzo prostą pętlę."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.9.text"
msgstr ""
"Upewnij się, że nie wywołujesz `print_twice` wewnątrz treści funkcji "
"`print_twice`. Sprawdź swoje wcięcia."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.requirements"
msgstr ""
"Napisz program definiujący funkcję o nazwie `print_twice` zgodnie z opisem "
"powyżej."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.text"
msgstr ""
"Świetnie!\n"
"\n"
"Teraz napisz własną funkcję o nazwie `print_twice`, która przyjmuje jeden argument `x` i drukuje ten argument dwukrotnie\n"
"na dwóch liniach.\n"
"\n"
"Na przykład, `print_twice(\"Hello\")` powinno wyjść:\n"
"\n"
"__code0__\n"
"\n"
"Możesz przetestować swoją funkcję, wywołując ją po definicji funkcji, ale nie jest to wymagane."

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.0.text"
msgstr ""
"Jedyna zmiana w definicji funkcji powinna dotyczyć zamiany miejscami "
"parametrów, zgodnie z instrukcją, nic więcej."

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.1.text"
msgstr "Musisz naprawić wywołanie `print_many`."

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.2.text"
msgstr ""
"Jeśli funkcja jest zdefiniowana jako `def print_many(n, thing)`, co oznacza "
"`print_many(\"Hello\", 3)`?"

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.3.text"
msgstr "Nadal chcemy, aby `thing = \"Hello\"` i `n = 3`."

msgid "pages.DefiningFunctions.steps.swap_parameters.text"
msgstr ""
"Zauważ przecinki używane do oddzielania parametrów w definicji funkcji i argumentów w wywołaniu funkcji,\n"
"oraz korespondencję między definicją a wywołaniem:\n"
"\n"
"    def print_many(thing, n):\n"
"                     ^    ^\n"
"                     |    |\n"
"      print_many(\"Hello\", 3)\n"
"\n"
"Więc wywołanie `print_many(\"Hello\", 3)` jest jak uruchomienie:\n"
"\n"
"__code0__\n"
"\n"
"Teraz kolejne proste ćwiczenie. Zamień miejscami parametry w nagłówku definicji funkcji, aby było:\n"
"\n"
"__code1__\n"
"\n"
"Jeśli to zrobisz i nic więcej, otrzymasz błąd. Napraw resztę programu, aby zachowywał się jak wcześniej.\n"
"*Nie zmieniaj treści funkcji*."

msgid "pages.DefiningFunctions.title"
msgstr "Definiowanie funkcji"
