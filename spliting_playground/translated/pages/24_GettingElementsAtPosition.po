#
msgid ""
msgstr ""

msgid "pages.GettingElementsAtPosition.steps.final_text.text"
msgstr ""
"If you're still not quite comfortable with `range` and/or `len`, practice and experiment with it for a bit.\n"
"Here are some simple exercises you can try on your own if you want.\n"
"\n"
"- Print the numbers from `1` to `100` inclusive.\n"
"- Print your name 100 times.\n"
"- Print each word in a list `words` except for the last one.\n"
"- Print each word in `words` in reverse order, i.e. print the last word, then the second last word, etc.\n"
"- Revisit the bonus problem at the end of the [Introducing Lists page](#IntroducingLists),\n"
"whether or not you completed it. It's now much easier with `range` and `len`!\n"
"\n"
"When you're ready, continue to the next page for something a bit more challenging."

msgid "pages.GettingElementsAtPosition.steps.index_error.program"
msgstr "words[4]"

msgid "pages.GettingElementsAtPosition.steps.index_error.requirements"
msgstr "Run something like `words[3]` but replace `3` with a bigger number."

msgid "pages.GettingElementsAtPosition.steps.index_error.text"
msgstr ""
"In general, you can get the element at the position `i` with `words[i]`. The operation is called *subscripting* or *indexing*, and the position is called the *index*.\n"
"\n"
"You've probably noticed that the first index is 0, not 1. In programming, counting starts at 0. It seems weird, but that's how most programming languages do it, and it's generally agreed to be better.\n"
"\n"
"This also means that the last index in this list of 4 elements is 3. What happens if you try getting an index greater than that?"

msgid "pages.GettingElementsAtPosition.steps.indices_out_of_bounds.text"
msgstr "Now try `__program__` in the shell."

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.0"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.2"
msgstr ""
"0\n"
"This\n"
"1\n"
"is\n"
"2\n"
"a\n"
"3\n"
"list"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.3"
msgstr ""
"This\n"
"0\n"
"is\n"
"1\n"
"a\n"
"2\n"
"list\n"
"3"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.4"
msgstr ""
"0\n"
"1\n"
"2\n"
"3\n"
"This\n"
"is\n"
"a\n"
"list"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.5"
msgstr ""
"This\n"
"is\n"
"a\n"
"list\n"
"0\n"
"1\n"
"2\n"
"3"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = [0, 1, 2, 3]\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.text"
msgstr ""
"There you go. `words[4]` and beyond don't exist, so trying that will give you an error.\n"
"That first program is a bit repetitive. Let's improve it with a list and a loop!\n"
"\n"
"__program_indented__"

msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"\n"
"print(words[0])\n"
"print(words[1])\n"
"print(words[2])\n"
"print(words[3])"

msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.text"
msgstr ""
"Looping is great, but often you just want to retrieve a single element from the list at a known position.\n"
"Here's how:\n"
"\n"
"__program_indented__"

msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.0.text"
msgstr "Remember that earlier we used `range(4)`."

msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.1.text"
msgstr ""
"This time, it should work for any list. What if the list has 5 elements, or "
"10?"

msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.2.text"
msgstr "Combine the two functions you learned!"

msgid "pages.GettingElementsAtPosition.steps.print_indices_and_words.text"
msgstr ""
"So in general, the valid indices are:\n"
"\n"
"__code0__\n"
"\n"
"Now we can fix the program from earlier to work with any list. Fill in the `...`:\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"    for index in ...:\n"
"        print(index)\n"
"        print(words[index])\n"
"\n"
"For the given example value of `words` it should print:\n"
"\n"
"    0\n"
"    This\n"
"    1\n"
"    is\n"
"    2\n"
"    a\n"
"    3\n"
"    list"

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.0.text"
msgstr ""
"To access the last element of the list, you'll need the index of the last "
"position."

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.1.text"
msgstr ""
"If the list has 2 elements, the first element is at index 0, so the last "
"element is at index 1."

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.2.text"
msgstr ""
"Likewise, if the list had 3 elements, the last element would be at index 2."

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.3.text"
msgstr "Do you see a pattern between those numbers? How can you express it?"

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.4.text"
msgstr "Can you come up with a general solution that works for any length?"

msgid "pages.GettingElementsAtPosition.steps.print_last_element.text"
msgstr ""
"Exercise: for any non-empty list `words`, print the last element. For example, if\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"your program should print `list`."

msgid ""
"pages.GettingElementsAtPosition.steps.printing_the_range.output_prediction_choices.4"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

msgid "pages.GettingElementsAtPosition.steps.printing_the_range.text"
msgstr ""
"As you can see, the result is the same. Try this:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid ""
"pages.GettingElementsAtPosition.steps.range_almost_the_same_as_list.text"
msgstr ""
"`range(4)` is the same thing as `[0, 1, 2, 3]` ... almost. Try `__program__`"
" in the shell."

msgid "pages.GettingElementsAtPosition.steps.range_len.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = range(4)\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

msgid "pages.GettingElementsAtPosition.steps.range_len.requirements"
msgstr ""
"Run the same program from the previous step, but replace the second line "
"`indices = [0, 1, 2, 3]` with `indices = range(4)`."

msgid "pages.GettingElementsAtPosition.steps.range_len.text"
msgstr ""
"That's a bit better, but writing out `[0, 1, 2, ...]` isn't great, especially if it gets long.\n"
"There's a handy function `range` to do that part for you. Replace `[0, 1, 2, 3]` with `range(4)`,\n"
"i.e. `indices = range(4)`."

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.0"
msgstr "range(4)"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.1"
msgstr "range(0, 4)"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.2"
msgstr "list(range(4))"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.3"
msgstr "list(range(0, 4))"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.4"
msgstr "range(0, 1, 2, 3)"

msgid "pages.GettingElementsAtPosition.steps.range_versus_list.text"
msgstr ""
"That's probably a bit surprising. If you're curious, the `0` represents the start of the range.\n"
"`0` is the default start, so `range(4)` is equal to `range(0, 4)`.\n"
"`4` is the end of the range, but the end is always excluded, so the last value is `3`.\n"
"If you're confused now, don't worry about it.\n"
"\n"
"There's a good reason for why `range(4)` is not actually a list - it makes programs faster and more efficient.\n"
"It's not worth explaining that more right now.\n"
"\n"
"But you can easily convert it to a list: try `__program__` in the shell."

msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"print(len(words))"

msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.text"
msgstr ""
"That's just a demonstration to let you see a range in a more familiar form.\n"
"You should almost never actually do that.\n"
"\n"
"If you're feeling overwhelmed, don't worry! All you need to know is that `range(n)`\n"
"is very similar to the list:\n"
"\n"
"__code0__\n"
"\n"
"By the way, you can get the number of elements in a list (commonly called the *length*) using the `len` function.\n"
"Try it by running this code:\n"
"\n"
"    __copyable__\n"
"__code1__"

msgid "pages.GettingElementsAtPosition.title"
msgstr "Getting elements at a position, `range()`, and `len()`"
