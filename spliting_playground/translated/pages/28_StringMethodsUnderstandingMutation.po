#
msgid ""
msgstr ""

msgid "pages.StringMethodsUnderstandingMutation.steps.final_text.text"
msgstr ""
"Observe that `sentence.upper()` does not change the original `sentence`.\n"
"\n"
"You can also use `word.lower()` immediately in a larger expression, e.g.\n"
"\n"
"__code0__"

msgid ""
"pages.StringMethodsUnderstandingMutation.steps.mutation_string_append.text"
msgstr ""
"Again these two methods also work on strings similar to how they work on lists.\n"
"`index` returns the *beginning index* of the search word `'the'` in the longer string\n"
"`'feed the dog and the cat'`, which is `5`.\n"
"\n"
"|  0   |  1   |  2   |  3   |  4   | **5** |  6   |  7   |  8   | ...  |\n"
"| :--: | :--: | :--: | :--: | :--: | :---: | :--: | :--: | :--: | :--: |\n"
"|  f   |  e   |  e   |  d   |      | **t** |  h   |  e   |      | ...  |\n"
"\n"
"Note that in most cases, methods which *modify a list in place* (`append`, `insert`, `remove`) merely return `None`,\n"
"while the remaining functions/methods return a new useful value without changing the original argument.\n"
"The only exception is the `pop` method.\n"
"\n"
"Modifying a value directly is called *mutation* - types of values which can be mutated are *mutable*,\n"
"while those that can't are *immutable*. Lists are mutable.\n"
"Strings are immutable - they don't have any methods like `append` or even subscript assignment.\n"
"See for yourself:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid ""
"pages.StringMethodsUnderstandingMutation.steps.string_count_index.program"
msgstr ""
"string = 'feed the dog and the cat'\n"
"print(string.count('the'))\n"
"print(string.index('the'))"

msgid "pages.StringMethodsUnderstandingMutation.steps.string_count_index.text"
msgstr ""
"`in` works on strings like it does on lists! The command returned `True` because `the` occurs in `feed the dog and the cat` as a *substring*.\n"
"How about `count` and `index`?\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.program"
msgstr "print('the' in 'feed the dog and the cat')"

msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.text"
msgstr ""
"You've already seen that `len` and subscripting work with strings, a bit as if strings are lists of characters.\n"
"Strings also support some of the new methods we've learned, not just for characters but for any substring.\n"
"For example, try the following:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text"
msgstr ""
"You simply can't change a string - you can only create new strings and use those instead.\n"
"That means that this is a useless statement on its own:\n"
"\n"
"__code0__\n"
"\n"
"The string referred to by `word` isn't modified, instead `word.lower()` returned a new string which was immediately discarded.\n"
"If you want to change the value that `word` refers to, you have to assign a new value to the variable:\n"
"\n"
"    __copyable__\n"
"__code1__"

msgid "pages.StringMethodsUnderstandingMutation.title"
msgstr "String Methods and Immutability"
