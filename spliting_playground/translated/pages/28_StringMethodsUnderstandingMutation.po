msgid "pages.StringMethodsUnderstandingMutation.steps.final_text.text"
msgstr ""
"Zauważ, że `sentence.upper()` nie zmienia oryginalnego `sentence`.\n"
"\n"
"Możesz również użyć `word.lower()` bezpośrednio w większym wyrażeniu, np.\n"
"\n"
"__code0__"

msgid ""
"pages.StringMethodsUnderstandingMutation.steps.mutation_string_append.text"
msgstr ""
"Znów te dwie metody także działają na łańcuchach znaków podobnie do list.\n"
"`index` zwraca *indeks początkowy* wyszukiwanego słowa `'the'` w dłuższym łańcuchu\n"
"`'feed the dog and the cat'`, który wynosi `5`.\n"
"\n"
"|  0   |  1   |  2   |  3   |  4   | **5** |  6   |  7   |  8   | ...  |\n"
"| :--: | :--: | :--: | :--: | :--: | :---: | :--: | :--: | :--: | :--: |\n"
"|  f   |  e   |  e   |  d   |      | **t** |  h   |  e   |      | ...  |\n"
"\n"
"Zauważ, że w większości przypadków metody, które *modyfikują listę in situ* (`append`, `insert`, `remove`) po prostu zwracają `None`,\n"
"podczas gdy pozostałe funkcje/metody zwracają nową użyteczną wartość bez zmiany oryginalnego argumentu.\n"
"Jedynym wyjątkiem jest metoda `pop`.\n"
"\n"
"Modyfikowanie wartości bezpośrednio nazywa się *mutacją* - typy wartości które mogą być mutowane są *mutowalne*,\n"
"a te które nie mogą są *niemutowalne*. Listy są mutowalne.\n"
"Łańcuchy znaków są niemutowalne - nie mają żadnych metod takich jak `append` czy nawet przypisanie do indeksu.\n"
"Zobacz sam:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid ""
"pages.StringMethodsUnderstandingMutation.steps.string_count_index.program"
msgstr ""
"string = 'feed the dog and the cat'\n"
"print(string.count('the'))\n"
"print(string.index('the'))"

msgid "pages.StringMethodsUnderstandingMutation.steps.string_count_index.text"
msgstr ""
"`in` działa na łańcuchach znaków tak, jak na listach! Komenda zwróciła `True`, ponieważ `the` występuje w `feed the dog and the cat` jako *podłańcuch*.\n"
"Co z `count` i `index`?\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.program"
msgstr "print('the' in 'feed the dog and the cat')"

msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.text"
msgstr ""
"Widziałeś już, że `len` oraz indeksowanie działają na łańcuchach znaków trochę tak, jakby były one listami znaków.\n"
"Łańcuchy znaków wspierają również niektóre z nowych metod, które poznaliśmy, nie tylko dla pojedynczych znaków, ale również dla dowolnych podłańcuchów.\n"
"Na przykład, wypróbuj poniższe:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text"
msgstr ""
"Po prostu nie możesz zmienić łańcucha znaków - możesz jedynie tworzyć nowe łańcuchy i używać ich zamiast starych.\n"
"To oznacza, że to jest bezużyteczne stwierdzenie samo w sobie:\n"
"\n"
"__code0__\n"
"\n"
"Łańcuch odwołany przez `word` nie jest modyfikowany, zamiast tego `word.lower()` zwróciło nowy łańcuch, który został natychmiast odrzucony.\n"
"Jeśli chcesz zmienić wartość, do której odnosi się `word`, musisz przypisać do zmiennej nową wartość:\n"
"\n"
"    __copyable__\n"
"__code1__"

msgid "pages.StringMethodsUnderstandingMutation.title"
msgstr "Metody Łańcuchów Znaków i Niemutowalność"
