#
msgid ""
msgstr ""

msgid "pages.IntroducingNotPage.steps.IntroducingNot.text"
msgstr ""
"Unlike the other two boolean operators `and` and `or`,\n"
"which are used in between two booleans (called *binary* operators),\n"
"`not` is used before only one boolean (called a *unary* operator).\n"
"It negates the expression to which it is applied, a bit like a minus sign. Try in the shell:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingNotPage.steps.NotFalse.text"
msgstr ""
"Now try the following:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.0.text"
msgstr ""
"What if you were instead asked to simplify this related but opposite function?\n"
"\n"
"__code0__"

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.1.text"
msgstr ""
"In that case there is a standard simplification trick you can apply that we "
"discussed a few pages ago."

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.2.text"
msgstr ""
"In particular the `returns` are redundant because "
"`filename.endswith(\".png\") or filename.endswith(\".jpg\")` is already the "
"desired boolean."

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.3.text"
msgstr ""
"So you can just write:\n"
"\n"
"__code0__"

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.4.text"
msgstr "For the real exercise, you can do something similar."

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.5.text"
msgstr "The difference in the real exercise is that the result is reversed."

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.6.text"
msgstr ""
"That is, `invalid_image` returns `True` when `valid_image` returns `False` "
"and vice versa."

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.7.text"
msgstr "Remember what `not` does?"

msgid "pages.IntroducingNotPage.steps.NotPriority.text"
msgstr ""
"You can see in `birdseye` that\n"
"\n"
"__code0__\n"
"\n"
"is interpreted by Python as\n"
"\n"
"__code1__\n"
"\n"
"rather than:\n"
"\n"
"__code2__\n"
"\n"
"So, `not` has higher priority than `or` if there are no parentheses. It's the same as how\n"
"\n"
"__code3__\n"
"\n"
"means:\n"
"\n"
"__code4__\n"
"\n"
"rather than\n"
"\n"
"__code5__\n"
"\n"
"`not` also has higher priority than `and`.\n"
"\n"
"Again, the main thing to remember is to use parentheses or extra variables when in doubt.\n"
"\n"
"Exercise: Suppose you're writing a program which processes images. Only certain types of file can be processed.\n"
"If the user gives you a file that can't be processed, you want to show an error:\n"
"\n"
"__code6__\n"
"\n"
"Suppose that .png and .jpg files can be processed, but other file types cannot.\n"
"Here's an example function to do that:\n"
"\n"
"    __copyable__\n"
"__code7__\n"
"\n"
"This is longer than it needs to be. Rewrite `invalid_image` so that the body is a single line `return <expression>`,\n"
"i.e. no `if` statement. It should pass the same tests."

msgid "pages.IntroducingNotPage.steps.NotTrueOrTrue.text"
msgstr ""
"What is the priority of `not` compared to `and` and `or`? Try the following in `birdseye`:\n"
"\n"
"__code0__"

msgid "pages.IntroducingNotPage.steps.final_text.text"
msgstr ""
"Well done! Here are two valid solutions:\n"
"\n"
"__code0__\n"
"\n"
"(if you're curious, these are equivalent because of something called De Morgan's law)\n"
"\n"
"Also notice that this is another general pattern that can be simplified: if your code has the form:\n"
"\n"
"__code1__\n"
"\n"
"where `x` itself is a boolean, then it can be simplified to:\n"
"\n"
"__code2__"

msgid "pages.IntroducingNotPage.title"
msgstr "Introducing `not`"
