#
msgid ""
msgstr ""

msgid "pages.IntroducingForLoops.steps.final_text.text"
msgstr ""
"You can read the code almost like normal English:\n"
"\n"
"> For each character in the string `name`, print that character.\n"
"\n"
"Each character is just a normal string. `character` is a normal variable that is given a new value before the code after the `:` runs. So the code above is equivalent to:\n"
"\n"
"    __no_auto_translate__\n"
"    name = 'World'\n"
"\n"
"    character = 'W'\n"
"    print(character)\n"
"\n"
"    character = 'o'\n"
"    print(character)\n"
"\n"
"    character = 'r'\n"
"    print(character)\n"
"\n"
"    character = 'l'\n"
"    print(character)\n"
"\n"
"    character = 'd'\n"
"    print(character)\n"
"\n"
"Note that we could use a different variable name, `character` just makes it clearer.\n"
"\n"
"A for loop generally follows this structure:\n"
"\n"
"    for <variable> in <collection>: <code to repeat>\n"
"\n"
"The `for`, `in`, and `:` are all essential."

msgid "pages.IntroducingForLoops.steps.first_for_loop.text"
msgstr ""
"Good news! You've made it past the boring basics. We can start to write some interesting programs and have a bit of fun. One of the most powerful concepts in programming is the *loop*, which lets you repeat the same code over and over. Python has two kinds of loop: `for` loops and `while` loops. Here is an example of a for loop, try running this program:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingForLoops.title"
msgstr "Introducing For Loops"
