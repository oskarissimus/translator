#
msgid ""
msgstr ""

msgid "pages.IntroducingForLoops.steps.first_for_loop.text"
msgstr ""
"Dobre wiadomości! Udało Ci się przebrnąć przez nudne podstawy. Możemy zacząć pisać niektóre ciekawe programy i trochę się bawić. Jednym z najpotężniejszych pojęć w programowaniu jest *pętla*, która pozwala powtarzać ten sam kod wielokrotnie. Python ma dwa rodzaje pętli: pętle `for` i pętle `while`. Oto przykład pętli for, spróbuj uruchomić ten program:\n"
"\n"
"__program_wcięty__"

msgid "pages.IntroducingForLoops.steps.final_text.text"
msgstr ""
"Kod można czytać prawie jak zwykły angielski:\n"
"\n"
"> Dla każdego znaku w ciągu `name`, wydrukuj ten znak.\n"
"\n"
"Każdy znak to po prostu normalny ciąg. `character` to normalna zmienna, której przed wykonaniem kodu po `:` przypisywana jest nowa wartość. Więc kod powyżej jest równoważny:\n"
"\n"
"    __bez_auto_tłumaczenia__\n"
"    name = 'Świat'\n"
"\n"
"    character = 'Ś'\n"
"    print(character)\n"
"\n"
"    character = 'w'\n"
"    print(character)\n"
"\n"
"    character = 'i'\n"
"    print(character)\n"
"\n"
"    character = 'a'\n"
"    print(character)\n"
"\n"
"    character = 't'\n"
"    print(character)\n"
"\n"
"Zauważ, że moglibyśmy użyć innej nazwy zmiennej, `character` po prostu sprawia, że jest to jaśniejsze.\n"
"\n"
"Pętla for zazwyczaj stosuje się w następującej strukturze:\n"
"\n"
"    for <zmienna> in <kolekcja>: <kod do powtórzenia>\n"
"\n"
"Elementy `for`, `in`, i `:` są niezbędne."

msgid "pages.IntroducingForLoops.title"
msgstr "Wprowadzenie do pętli for"