#
msgid ""
msgstr ""

msgid "pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text"
msgstr ""
"Modify this program:\n"
"\n"
"__code0__\n"
"\n"
"to add a space after every character in the triangle, so the output looks like this:\n"
"\n"
"    W\n"
"    W o\n"
"    W o r\n"
"    W o r l\n"
"    W o r l d"

msgid "pages.BuildingUpStringsExercises.steps.name_triangle_backwards.text"
msgstr ""
"Tremendous! Now modify the program so that each line is backwards, like this:\n"
"\n"
"    __no_auto_translate__\n"
"    W\n"
"    oW\n"
"    roW\n"
"    lroW\n"
"    dlroW"

msgid "pages.BuildingUpStringsExercises.steps.name_underlined.text"
msgstr ""
"Brilliant!\n"
"\n"
"Code like:\n"
"\n"
"__code0__\n"
"\n"
"is so common that Python lets you abbreviate it. This means the same thing:\n"
"\n"
"__code1__\n"
"\n"
"Note that there is no abbreviation for `line = char + line`.\n"
"\n"
"Now use `+=` and a for loop to write your own program which prints `name` 'underlined', like this:\n"
"\n"
"    World\n"
"    -----\n"
"\n"
"There should be one `-` for each character in `name`."

msgid "pages.BuildingUpStringsExercises.steps.name_box.text"
msgstr ""
"Fantastic!\n"
"\n"
"By the way, when you don't need to use a variable, it's common convention to name that variable `_` (underscore), e.g. `for _ in name:`. This doesn't change how the program runs, but it's helpful to readers.\n"
"\n"
"Let's make this fancier. Extend your program to draw a box around the name, like this:\n"
"\n"
"    +-----+\n"
"    |World|\n"
"    +-----+"

msgid "pages.BuildingUpStringsExercises.steps.name_box_2.text"
msgstr ""
"You're getting good at this! Looks like you need more of a challenge...maybe instead of putting a name in a box, the name should be the box? Write a program that outputs this:\n"
"\n"
"    +World+\n"
"    W     W\n"
"    o     o\n"
"    r     r\n"
"    l     l\n"
"    d     d\n"
"    +World+"

msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.text"
msgstr ""
"Sweet! You're really getting the hang of this!\n"
"\n"
"If you want you can do one more optional bonus challenge below.\n"
"If not, you can just continue to the [next page](#BasicTerminology) now.\n"
"You can come back and do this later if you want.\n"
"\n"
"Try writing a program that outputs the given `name` in a diagonal line, e.g:\n"
"\n"
"    W\n"
"     o\n"
"      r\n"
"       l\n"
"        d"

msgid "pages.BuildingUpStringsExercises.steps.final_text.text"
msgstr "Wow, nothing can stop you!"

msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_spaced.hints.0.text"
msgstr "You will need to use one more `+`."

msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_spaced.hints.1.text"
msgstr "You will need to use a string consisting of one space: `' '`."

msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.0.text"
msgstr ""
"The solution is very similar to the original triangle program, just make one"
" small change."

msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.1.text"
msgstr ""
"You still want to add one character to `line` at a time, it's just a "
"question of where you add it."

msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.2.text"
msgstr ""
"You want the lines to be reversed, so you need to reverse/flip something."

msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.3.text"
msgstr "You need to add the character before the string, instead of after."

msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.4.text"
msgstr ""
"3 + 7 is equal to 7 + 3. Same for all numbers. Is this also true for "
"strings?"

msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.0.text"
msgstr "Look at the triangle program for inspiration."

msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.1.text"
msgstr ""
"Look at the program where you printed `name` once for each character for "
"inspiration."

msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.2.text"
msgstr ""
"You will need to build up a string of dashes (`-`) one character at a time."

msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.3.text"
msgstr ""
"The for loop will create a variable such as `char`, but the program doesn't "
"need to use it."

msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.0.text"
msgstr ""
"You did all the hard stuff in the previous exercise. Now it's just some "
"simple adding of strings."

msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.1.text"
msgstr ""
"You only need one for loop - the one used to make the line of dashes from "
"the previous exercise."

msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.2.text"
msgstr ""
"Don't try and do everything at once. Break the problem up into smaller, "
"easier subproblems."

msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.3.text"
msgstr ""
"Try writing a program that outputs:\n"
"\n"
"    -----\n"
"    World\n"
"    -----"

msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.4.text"
msgstr ""
"Since you need to output three separate lines of text, you will need to call"
" `print()` three times."

msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.5.text"
msgstr ""
"Try writing a program that outputs:\n"
"\n"
"    |World|"

msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.0.text"
msgstr "You will need two separate for loops over `name`."

msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.1.text"
msgstr ""
"Each line except for the first and last has the same characters in the "
"middle. That means you can reuse something."

msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.2.text"
msgstr ""
"Create a variable containing the spaces in the middle and use it many times."

msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.3.text"
msgstr ""
"Use one loop to create a bunch of spaces, and a second loop to print a bunch"
" of lines using the previously created spaces."

msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.0.text"
msgstr ""
"The first letter should have 0 spaces before it, the second letter should "
"have 1 space before it, the third should have 2, etc."

msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.1.text"
msgstr ""
"You should keep the spaces in a variable and build them up in a loop, as "
"before."

msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.2.text"
msgstr ""
"The difference is that you need to print letters at the same time as "
"building up spaces."

msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.3.text"
msgstr "In other words, you need a single loop that does both."

msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.4.text"
msgstr ""
"The body of the loop needs to print the spaces and letter, and also add a "
"space."

msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.5.text"
msgstr ""
"Since the first letter should have no spaces before it, you need to add a "
"space after printing a letter."

msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.messages.add_space_first.text"
msgstr ""
"Almost there! You have one space too many before each letter.\n"
"Make sure that the first time your loop calls `print`\n"
"your variable which will contain the spaces is an empty string.\n"
"Check the order of your code."

msgid "pages.BuildingUpStringsExercises.title"
msgstr "Building Up Strings Exercises"

msgid "pages.BuildingUpStringsExercises.steps.name_box.disallowed.0.message"
msgstr ""
"Well done, this solution is correct! However, it can be improved.\n"
"You only need to use one loop - using more is inefficient.\n"
"You can reuse the variable containing the line of `-` and `+`."

msgid "pages.BuildingUpStringsExercises.steps.name_box_2.disallowed.0.message"
msgstr ""
"Well done, this solution is correct!\n"
"And you used a nested loop (a loop inside a loop) which we haven't even covered yet!\n"
"However, in this case a nested loop is inefficient.\n"
"You can make a variable containing spaces and reuse that in each line."
