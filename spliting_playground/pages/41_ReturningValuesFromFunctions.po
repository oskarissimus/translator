#
msgid ""
msgstr ""

msgid "pages.ReturningValuesFromFunctions.steps.first_return.text"
msgstr ""
"Functions can be especially useful when they *return* values, rather than just printing them. Try this example:\n"
"\n"
"__program_indented__"

msgid "pages.ReturningValuesFromFunctions.steps.losing_return_value.text"
msgstr ""
"Here we passed `number` (which has value `5`) as the argument `x` to the function `double`, and `double` *returned*\n"
"`x * 2`, i.e. `5 * 2`, i.e. `10`, which became the value of the variable `twice`. The special keyword `return` inside\n"
"`double` makes `double(number)` an expression with a value - specifically the value which was returned.\n"
"It's a bit like `twice = double(number)` is equivalent to `twice = number * 2`, although that's not\n"
"exactly what happens.\n"
"\n"
"Note that `double(number)` *didn't change `number`*. At the end, `number` is still `5`. Rather, `double(number)`\n"
"returned a new value. It's crucial that the program made use of that returned value, in this case by storing\n"
"it in a variable. Immediately printing it with `print(double(number))` also works. On the other hand,\n"
"try this:\n"
"\n"
"__program_indented__"

msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.text"
msgstr ""
"Here `double(number)` still returned `10`, but we didn't make use of that so it was lost. `number` is still `5`.\n"
"\n"
"Write a function `quadruple` which takes one argument `x` and returns that argument multiplied by 4.\n"
"You must only use the `double` function - no numbers or multiplication are allowed directly in the body\n"
"of `quadruple`."

msgid "pages.ReturningValuesFromFunctions.steps.final_text.text"
msgstr ""
"Well done! Here are two possible solutions:\n"
"\n"
"__code0__"

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.0.text"
msgstr "To multiply by 4, multiply by 2 twice."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.1.text"
msgstr "That means you need to call `double` twice."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.2.text"
msgstr "Make sure you use the returned value from `double` each time."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.3.text"
msgstr "Make sure you have all the parts of a function definition."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.4.text"
msgstr "That includes `def`, `()`, and `:`."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.5.text"
msgstr "Make sure your function is named `quadruple`."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.6.text"
msgstr ""
"Make sure it accepts one parameter called `x` in between the parentheses "
"`()`."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.7.text"
msgstr "Use the parameter inside the function body."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.8.text"
msgstr "Make sure the body is indented."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.9.text"
msgstr "Make sure you `return` something at the end."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.10.text"
msgstr "Look at the definition of `double` for an example."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.11.text"
msgstr ""
"Make sure that you don't call `quadruple` inside the function body of "
"`quadruple`. Check your indentation."

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.messages.used_multiply.text"
msgstr ""
"You cannot use `*`, `+`, or even any numbers inside `quadruple`.\n"
"You must call `double` to solve the problem."

msgid "pages.ReturningValuesFromFunctions.title"
msgstr "Returning Values From Functions"

msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.requirements"
msgstr ""
"Write a program which defines a function called `quadruple` as described "
"above."
