#
msgid ""
msgstr ""

msgid "pages.IntroducingAnd.steps.TrueAndTrue.text"
msgstr ""
"Another boolean operator in Python is `and`.\n"
"The expression `A and B` is `True` only if BOTH `A` and `B` are `True`. Otherwise it's `False`.\n"
"Try it in the shell:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingAnd.steps.TrueAndFalse.text"
msgstr ""
"Good, now try:\n"
"\n"
"__program_indented__\n"
"\n"
"What do you expect?"

msgid "pages.IntroducingAnd.steps.FalseAndFalse.text"
msgstr ""
"Finally, try:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingAnd.steps.AndExercise.text"
msgstr ""
"Let's practice now. Previously we wrote a function `is_valid_percentage` using `or`. Here's an example\n"
"solution:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Rewrite this function using `and` instead."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.text"
msgstr ""
"Awesome! Here's one possible solution:\n"
"\n"
"__code0__\n"
"\n"
"As before, we can simplify this solution to:\n"
"\n"
"__code1__\n"
"\n"
"There's another trick to improve this further called comparison chaining. Any condition like this:\n"
"\n"
"__code2__\n"
"\n"
"can be shortened by removing the extra `and b` into:\n"
"\n"
"__code3__\n"
"\n"
"This works for any comparison operators, including `==`, and the two operators can even be different.\n"
"So the solution can be simplified to:\n"
"\n"
"__code4__\n"
"\n"
"Next exercise: given a list of three elements, check if all three elements are equal.\n"
"\n"
"    __copyable__\n"
"__code5__"

msgid "pages.IntroducingAnd.steps.final_text.text"
msgstr ""
"Good job. There are many possible correct solutions here:\n"
"\n"
"__code0__\n"
"\n"
"or using comparison chaining again:\n"
"\n"
"__code1__\n"
"\n"
"or check that it's equal to a list containing the first element three times:\n"
"\n"
"__code2__"

msgid "pages.IntroducingAnd.steps.AndExercise.hints.0.text"
msgstr ""
"If you have something like `x < 0 and x > 100`, you're on the wrong track. "
"That's going to be `False` for *any* value of `x`!"

msgid "pages.IntroducingAnd.steps.AndExercise.hints.1.text"
msgstr ""
"The solution with `and` is different in several ways from the solution with "
"`or`."

msgid "pages.IntroducingAnd.steps.AndExercise.hints.2.text"
msgstr ""
"Our solution with `or` first determines if `x` is an invalid percentage, "
"else concludes validity. Using `and` will do this in reverse."

msgid "pages.IntroducingAnd.steps.AndExercise.hints.3.text"
msgstr "You will have to reverse the `return` statements accordingly."

msgid "pages.IntroducingAnd.steps.AndExercise.hints.4.text"
msgstr "You will have to change the comparison operators too."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.0.text"
msgstr "The list will always have 3 elements."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.1.text"
msgstr "That means you don't need to use a loop."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.2.text"
msgstr "Remember that you can get the first element using `row[0]`."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.3.text"
msgstr ""
"The first element, second element, and third element all need to be equal."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.4.text"
msgstr ""
"That means the first element should be equal to the second element and also "
"the third element."

msgid "pages.IntroducingAnd.title"
msgstr "Introducing `and`"
