#
msgid ""
msgstr ""

msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text"
msgstr ""
"You can use a nested loop to iterate over each element and sub-element of a nested list.\n"
"For example, consider this nested list.\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Click the button to copy the list into the editor, then type in the following nested loop.\n"
"\n"
"__code1__\n"
"\n"
"Look carefully at the code. Note that the outer loop creates a variable `sublist`\n"
"and the inner loop iterates over the same variable. This is a common pattern.\n"
"Now run the code."

msgid "pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor.text"
msgstr ""
"Now run the same program again in Python Tutor.\n"
"\n"
"Examine what `numbers` looks like, and what `numbers[0]` up to `numbers[3]` are.\n"
"Look at how `sublist` and `num` variables advance."

msgid "pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text"
msgstr ""
"Now let's solve some problems using this kind of loop.\n"
"\n"
"Suppose we have a nested list of strings like the one below,\n"
"and we want to search for a particular `word` deep within the list.\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"You can imagine that `strings` represents a book, where each sublist is a page and each string within\n"
"is a line in that page.\n"
"It could also represent a library, where each list is a book, and each string is a page.\n"
"\n"
"Write a program to print every string that contains `word`.\n"
"It should work for any `word` and `strings`. For the example above, it should print\n"
"\n"
"    hello there\n"
"    hello world\n"
"\n"
"Remember that there is a specific way to check if a string contains another string. If you can't remember how, Google it!"

msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text"
msgstr ""
"Nice!\n"
"\n"
"Now let's change the exercise slightly. This time the output should tell us which *sublists* contain `word`,\n"
"rather than which inner strings. In particular, we want to print a boolean for each sublist:\n"
"`True` if the sublist contains the word in any of its strings, `False` if it's not there at all.\n"
"\n"
"Given these example inputs:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"then your program should print\n"
"\n"
"__code1__\n"
"\n"
"Note that `word in sublist` won't work. For example, `\"hello\" in [\"hello there\", \"how are you\"]` is `False`\n"
"because `\"hello\"` is not *equal* to either of the two elements of that list, even though it is in one of them."

msgid "pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text"
msgstr ""
"Well done!\n"
"\n"
"Next, print only one boolean to indicate if `word` is present in any string in the entire nested list at all. For example, if\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"your program should print `False`."

msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text"
msgstr ""
"Excellent!\n"
"\n"
"[Earlier in the course](#GettingElementsAtPositionExercises) there was an exercise\n"
"to print two strings vertically side by side, like this:\n"
"\n"
"    H W\n"
"    e o\n"
"    l r\n"
"    l l\n"
"    o d\n"
"\n"
"Now we're going to generalize this to a list of strings, rather than just two.\n"
"\n"
"For this exercise you are given a list of strings of **equal length**.\n"
"Write a program that prints the first letter of each string on one line,\n"
"then the second letter of each string on the next line, and so on. For example, if\n"
"\n"
"__code0__\n"
"\n"
"then your program should print\n"
"\n"
"    __no_auto_translate__\n"
"    adg\n"
"    beh\n"
"    cfi\n"
"\n"
"Your program should work for any such list. In particular, if you use the following list,\n"
"you'll discover a hidden message from the Zen of Python!\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    strings = [\"  b n\", \"f ete\", \"liths\", \"astat\", \"t ene\", \"  r d\"]\n"
"\n"
"Note that this time you shouldn't add spaces between letters in the output."

msgid "pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.text"
msgstr ""
"Excellent! If you'd like, you can just continue to the [next page](#DefiningFunctions) now.\n"
"Or you can do a bonus challenge!\n"
"\n"
"Now let's generalize the previous exercise to strings of unequal length. Once again you are given a list of strings.\n"
"Like before, write a program that prints the first letter of each string together on one line,\n"
"then the second letters together on the next line, and so on.\n"
"But this time, if a string does not have enough letters, it should print a space.\n"
"\n"
"For example, if\n"
"\n"
"    __no_auto_translate__\n"
"    strings = [\"abcqwe\", \"def\", \"ghiq\"]\n"
"\n"
"your program should print\n"
"\n"
"    adg\n"
"    beh\n"
"    cfi\n"
"    q q\n"
"    w\n"
"    e"

msgid "pages.LoopingOverNestedLists.steps.final_text.text"
msgstr ""
"You have mastered nested lists and how to combine them with nested loops.\n"
"Brilliant! You now have extremely powerful programming tools in your tool belt."

msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.0.text"
msgstr "How do you check if a string contains a word?"

msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.1.text"
msgstr ""
"Make sure to check whether **the string** contains the word, not the "
"sublist."

msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.2.text"
msgstr "How can you access each string in each sublist of a nested list?"

msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.3.text"
msgstr "You need to use a nested loop."

msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.4.text"
msgstr ""
"The loops should follow the same pattern as the example at the beginning of "
"the page."

msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.0.text"
msgstr "For each sublist, define a boolean."

msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.1.text"
msgstr "Go through a sublist, update the boolean accordingly."

msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.2.text"
msgstr "Only print the boolean once for each sublist."

msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.3.text"
msgstr "What should be the initial value for the boolean?"

msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.4.text"
msgstr ""
"What if one of the sublists is empty? What should you print for that "
"sublist?"

msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.5.text"
msgstr ""
"If you find the word in a string, the boolean should be set to `True`."

msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.6.text"
msgstr "What if a string doesn't contain the word?"

msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.7.text"
msgstr ""
"Doesn't matter! It doesn't change whether any other string might contain the"
" word."

msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.8.text"
msgstr ""
"In other words, don't set the boolean to `False` except at the beginning."

msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.0.text"
msgstr "This is very similar to the previous exercise."

msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.1.text"
msgstr "When should you print the boolean?"

msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.2.text"
msgstr "Remember you want to print it only once."

msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.3.text"
msgstr ""
"Instead of defining a boolean for each sublist, define only one boolean for "
"the entire list."

msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.4.text"
msgstr "When and how should you modify the boolean?"

msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.0.text"
msgstr "This is NOT similar to the previous exercises on this page."

msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.1.text"
msgstr ""
"Think about the solution when there's just two strings. How can you "
"generalize it to a list of strings?"

msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.2.text"
msgstr ""
"You'll need to go through the first letters, then the second letters, and so"
" on."

msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.3.text"
msgstr "You'll have to use a loop, but how long should the loop take?"

msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.4.text"
msgstr "Remember that strings in the list have equal lengths."

msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.5.text"
msgstr "For each position (first, second etc.) define a new string."

msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.6.text"
msgstr "What should that string be initially?"

msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.7.text"
msgstr ""
"For each position (first, second etc.) you'll have to go through each string"
" in the list."

msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.8.text"
msgstr "You'll need another loop inside the one you have."

msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.0.text"
msgstr "Since the strings can have different lengths, this is a bit tricky."

msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.1.text"
msgstr "For how long should your outer loop go this time?"

msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.2.text"
msgstr ""
"Before you start handling the strings, it might be a good idea to find the "
"longest string length first."

msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.3.text"
msgstr "The rest is very similar to the previous exercise."

msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.4.text"
msgstr ""
"The only difference is that now you have to determine whether to add a "
"letter from a string, or a space."

msgid "pages.LoopingOverNestedLists.title"
msgstr "Looping Over Nested Lists"

msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor.requirements"
msgstr ""
"Run a single program consisting of the two parts above combined.\n"
"They're separated so that you don't need to type in the `numbers = [...]` part,\n"
"but typing in the nested loop part is best for learning.\n"
"Make sure the indentation is correct."

msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.requirements"
msgstr ""
"Run a single program consisting of the two parts above combined.\n"
"They're separated so that you don't need to type in the `numbers = [...]` part,\n"
"but typing in the nested loop part is best for learning.\n"
"Make sure the indentation is correct."
