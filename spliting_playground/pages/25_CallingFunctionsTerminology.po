#
msgid ""
msgstr ""

msgid "pages.CallingFunctionsTerminology.steps.print_functions.text"
msgstr ""
"It's time to expand your vocabulary some more.\n"
"\n"
"`print` and `len` are ***functions***. See for yourself:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.introducing_callable.text"
msgstr ""
"An expression like `len(things)` or `print(things)` is a function ***call*** - when you write that, you are ***calling*** the function `len` or `print`. The fact that this is possible means that functions are ***callable***:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.not_callable.text"
msgstr ""
"Most things are not callable, so trying to call them will give you an error:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.print_returns_none.text"
msgstr ""
"In the call `len(things)`, `things` is an ***argument***. Sometimes you will also see the word ***parameter***, which means basically the same thing as argument. It's a bit like you're giving the argument to the function - specifically we say that the argument `things` is *passed* to `len`, and `len` *accepts* or *receives* the argument.\n"
"\n"
"`len(things)` will evaluate to a number such as 3, in which case we say that `len` ***returned*** 3.\n"
"\n"
"All calls have to return something...even if it's nothing. For example, `print`'s job is to display something on screen, not to return a useful value. So it returns something useless instead:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.len_of_none.text"
msgstr ""
"`None` is a special 'null' value which can't do anything interesting. It's a common placeholder that represents the lack of a real useful value. Functions that don't want to return anything return `None` by default. If you see an error message about `None` or `NoneType`, it often means you assigned the wrong thing to a variable:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.methods_of_str.text"
msgstr ""
"A ***method*** is a function which belongs to a type, and can be called on all values of that type using `.`. For example, `upper` and `lower` are methods of strings, which are called with e.g. `word.upper()`:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.no_append_for_str.text"
msgstr ""
"Another example is that `append` is a method of lists. But you can't use `.upper` on a list or `.append` on a string:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.final_text.text"
msgstr ""
"The word 'attribute' in the error message refers to the use of `.` - the "
"error actually comes just from `word.append`, without even a call."

msgid "pages.CallingFunctionsTerminology.title"
msgstr "Terminology: Calling functions and methods"
