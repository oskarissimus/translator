#
msgid ""
msgstr ""

msgid "pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate.text"
msgstr ""
"Let's review how to work with lists. Suppose we have a list `nums = [1, 2, 3]`. You can use:\n"
"\n"
"- **`append`**: Add an element to the end of the list. `nums.append(4)` changes the list to `[1, 2, 3, 4]`.\n"
"- **`len`**: Returns the number of elements. `len(nums)` is `3`.\n"
"- **`range`**: `range(n)` is an object similar to the list of numbers from `0` to `n - 1`. That means it contains `n` numbers. In particular, `range(len(nums))` is like `[0, 1, 2]`, which are the indices of every element in `nums`.\n"
"- **`[]` (subscripting/indexing)**: Get a value at an index. `nums[0]` is `1`, `nums[1]` is `2`, `nums[2]` is `3`.\n"
"- **`+`**: Concatenates lists. `nums + [4, 5]` is `[1, 2, 3, 4, 5]`.\n"
"\n"
"Note that `nums.append(4)` modifies the existing list `nums`, while `nums + [4, 5]` does not.\n"
"One way to preserve the value of `nums + [4, 5]` is to assign it to a *new variable*.\n"
"Run the following code:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text"
msgstr ""
"As you can see, `+` does not modify `nums`, but `append` does.\n"
"\n"
"Here's some new things.\n"
"\n"
"**`subscript assignment`**: Set a value at an index (replacing the value that was there before) using the syntax\n"
"\n"
"__code0__\n"
"\n"
"Raises an error if `index` is not a valid index of `some_list`. For example, run this program:\n"
"\n"
"__program_indented__"

msgid "pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text"
msgstr ""
"**`index`**: Returns the first index of a value in a list using the syntax\n"
"\n"
"__code0__\n"
"\n"
"Raises an error if the value isn't there. For example run this line in the shell:\n"
"\n"
"__program_indented__"

msgid "pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text"
msgstr ""
"**`pop`**: Removes and returns an element at a given *index* using the syntax\n"
"\n"
"__code0__\n"
"\n"
"Without an argument, i.e. just `some_list.pop()`, it will remove and return the last element.\n"
"Raises an error if `index` is not a valid index of `some_list`. For example run this program:\n"
"\n"
"__program_indented__"

msgid "pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text"
msgstr ""
"**`remove`**: Removes the first occurrence of the given *value* using the syntax\n"
"\n"
"__code0__\n"
"\n"
"Raises an error if the value isn't in the list. For example run this program:\n"
"\n"
"__program_indented__"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.text"
msgstr ""
"Now you will solve four short exercises involving these concepts.\n"
"Below is a list of correct and incorrect lines of code mixed together.\n"
"Each upcoming exercise has a solution that includes exactly one of the lines below,\n"
"and you must find the correct line from the list.\n"
"\n"
"__code0__\n"
"\n"
"Here is an incomplete program:\n"
"\n"
"    __copyable__\n"
"__code1__\n"
"\n"
"Replace the middle line with one line from the list above. The final program should modify `x` to move the first element to the end, so that it prints `['b', 'c', 'a']`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.text"
msgstr ""
"Good job. For the next exercise, start with the same incomplete program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Choose a line of code from the list that overwrites the last element of `x` with the first element,\n"
"so now it should print `['a', 'b', 'a']`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.text"
msgstr ""
"Excellent!\n"
"\n"
"You might realize that working with the last element via `x[len(x) - 1]` is a bit cumbersome.\n"
"The same can be achieved by `x[-1]`.\n"
"Similarly, the second to last element `x[len(x) - 2]` can be written as `x[-2]`, and so on.\n"
"Python allows us to count the index backwards too, starting at the last element with `-1`:\n"
"\n"
"| Index     | First elt. | Second elt. | Third elt.  | ... | 2nd to last elt. | Last elt.  |\n"
"|-----------|------------|-------------|-------------|-----|------------------|------------|\n"
"| Forwards  | `0`        | `1`         | `2`         | ... | `len(x) - 2`     |`len(x) - 1`|\n"
"| Backwards | `-len(x)`  |`-len(x) + 1`|`-len(x) + 2`| ... | `-2`             |  `-1`      |\n"
"\n"
"Next exercise:\n"
"\n"
"This time, rather than modifying the list `x`, you will create a new list `y`:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"`y` should be the same as `x` but also have the first element repeated at the end.\n"
"Therefore the program will print `['a', 'b', 'c', 'a']`."

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.text"
msgstr ""
"Great work. Now the final exercise:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Replace the middle line `x.remove(0)` with a line from the list that does the same thing."

msgid "pages.FunctionsAndMethodsForLists.steps.final_text.text"
msgstr "Great job!"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = ['a', 'b', 'c']`, "
"then one line copied exactly from the list (no additions), and `print(x)`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.1.text"
msgstr "Moving the first element to the end requires two things."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.2.text"
msgstr "Removing the first element..."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.3.text"
msgstr "and adding it to the end."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.4.text"
msgstr "Which functions/methods can you use for this?"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.5.text"
msgstr "Remember that the first index is 0."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = ['a', 'b', 'c']`, "
"then one line copied exactly from the list (no additions), and `print(x)`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.1.text"
msgstr "You need to get the value of the first element in `x`..."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.2.text"
msgstr "and assign that value to the last position in `x`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.3.text"
msgstr "How do you assign a value at a specific index in the list?"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.4.text"
msgstr "What are the indices of the first and last last elements in `x`?"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = ['a', 'b', 'c']`, "
"`y = ` followed by one line copied exactly from the list, and `print(y)`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.1.text"
msgstr "Which lines of code create a new list rather than modifying?"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.2.text"
msgstr "`x` is a list. Each element of `x` is a string."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.3.text"
msgstr ""
"You can add lists together, you can add strings together, but you can't add "
"a string and a list."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.4.text"
msgstr "How do you make a list containing one element?"

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = [1, 2, 0, 3]`, one "
"line copied exactly from the list (no additions), and `print(x)`."

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.1.text"
msgstr "What does `x.remove(0)` do?"

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.2.text"
msgstr "It removes an element!"

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.3.text"
msgstr "Which function/method can also remove an element?"

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.4.text"
msgstr ""
"The other function/method can't simply be told 'remove 0', it needs a "
"different kind of information."

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.5.text"
msgstr "Specifically, it needs to be told where 0 is."

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.6.text"
msgstr "Which function/method provides that kind of information?"

msgid "pages.FunctionsAndMethodsForLists.title"
msgstr "Functions and Methods for Lists"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with"
" exactly one line from the long list of lines from before. You must choose "
"the correct line, there's only one right answer. Type in the line exactly. "
"Do not replace the `y = ` part, that should still be there just before the "
"line that you type in, on the same line."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with"
" exactly one line from the long list just before that. You must choose the "
"correct line, there's only one right answer. Type in the line exactly."

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `x.remove(0)` with exactly one line"
" from the long list of lines from before. The line you choose should have "
"the same effect as `x.remove(0)`, so that the program prints `[1, 2, 3]`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with"
" exactly one line from the long list in the previous step. You must choose "
"the correct line, there's only one right answer. Type in the line exactly."
