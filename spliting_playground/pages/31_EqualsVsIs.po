#
msgid ""
msgstr ""

msgid "pages.EqualsVsIs.steps.two_separate_lists.text"
msgstr ""
"It's time to learn some technical details that are often misunderstood and lead to errors.\n"
"Run this program:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.EqualsVsIs.steps.same_list.text"
msgstr ""
"This program is quite straightforward and mostly consists of things you're familiar with.\n"
"We create two variables which refer to lists.\n"
"The lists have the same elements, so they are equal: `list1 == list2` is `True`.\n"
"\n"
"But then there's a new comparison operator: `is`. Here `list1 is list2` is `False`.\n"
"That means that regardless of the two lists being equal,\n"
"they are still two separate, distinct, individual lists.\n"
"As a result, when you append 4 to `list1`, only `list1` changes.\n"
"\n"
"Now change `list2 = [1, 2, 3]` to `list2 = list1` and see what difference it makes."

msgid "pages.EqualsVsIs.steps.final_text.text"
msgstr ""
"Now `list1 is list2` is `True`, because *there is only one list*, and the two variables\n"
"`list1` and `list2` both refer to that same list. `list1.append(4)` appends to the one list\n"
"and the result can be seen in both `print(list1)` and `print(list2)` because both lines\n"
"are now just different ways of printing the same list.\n"
"\n"
"I recommend running both versions with Python Tutor to see how it visualises the difference.\n"
"In the second case, the two variables both have arrows pointing to a single list object.\n"
"\n"
"`list2 = list1` doesn't create an eternal link between the variables. If you assign a new value\n"
"to *either* of the variables, e.g. `list1 = [7, 8, 9]`, the other variable will be unaffected\n"
"and will still point to the original list.\n"
"\n"
"Basically, an assignment like:\n"
"\n"
"    list2 = <expression>\n"
"\n"
"means 'make the variable `list2` refer to whatever `<expression>` evaluates to'.\n"
"It doesn't make a copy of that value, which is how both variables can end up pointing to the same list.\n"
"But as we've learned before, `list2` doesn't remember `<expression>`, only the value.\n"
"It doesn't know about other variables.\n"
"\n"
"You can copy a list with the `copy` method:\n"
"\n"
"__code0__\n"
"\n"
"This will make the program behave like the first version again.\n"
"\n"
"If you come across this kind of problem and you're still having trouble understanding this stuff, read the essay [Facts and myths about Python names and values](https://nedbatchelder.com/text/names.html)."

msgid "pages.EqualsVsIs.title"
msgstr "`==` vs `is`, and Having Multiple Names for One Value"

msgid "pages.EqualsVsIs.steps.same_list.requirements"
msgstr ""
"Run the same program as above, but replace the *second* `[1, 2, 3]` with "
"`list1`."
