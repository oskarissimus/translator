#
msgid ""
msgstr ""

msgid "pages.BasicTerminology.steps.final_text.text"
msgstr ""
"Here's some words you need to know:\n"
"\n"
"An ***expression*** is a piece of code that has a value. For example, in this line of code:\n"
"\n"
"    __no_auto_translate__\n"
"    sentence = 'Hello ' + name\n"
"\n"
"there are three expressions:\n"
"\n"
"1. `'Hello '`\n"
"2. `name`\n"
"3. `'Hello ' + name`\n"
"\n"
"By contrast, the full line `sentence = ...` is a ***statement***. It's a command that tells the computer to perform an action. It has no value of its own. This means, for example, that you can't add statements together. This code is invalid:\n"
"\n"
"    (word = 'Hello') + (name = 'Bob')\n"
"\n"
"Specifically, a statement like `sentence = ...` where a variable is given a value is called ***assignment*** - the value is *assigned to* the the variable.\n"
"\n"
"A program is a list of statements which are executed in order. A `for` loop is a *compound statement*, meaning it has a body of its own which contains other statements. Most statements will also contain expressions, and expressions can contain other smaller expressions, but expressions cannot contain statements.\n"
"\n"
"The process of calculating the value of an expression is called ***evaluation*** - note how it almost contains the word 'value'. The computer *evaluates* `1 + 2` to get the value `3`.\n"
"\n"
"The process of executing a loop is called ***iteration***. Code like `for char in 'Hello':` is *iterating over* the string `'Hello'`. The fact that it's possible means that strings are *iterable*. By contrast, numbers are not iterable, which is exactly what Python will tell you if you try `for char in 3:`. Each run through the loop is *one iteration*, so in this example there will be 5 iterations."

msgid "pages.BasicTerminology.title"
msgstr "Basic Terminology"
