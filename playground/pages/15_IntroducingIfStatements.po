#
msgid ""
msgstr ""

msgid "pages.IntroducingIfStatements.steps.introducing_booleans.text"
msgstr ""
"Teraz nauczymy się, jak nakazać komputerowi podejmowanie decyzji i wykonywanie kodu\n"
"tylko w określonych warunkach. Do tego będziemy potrzebowali nowego rodzaju wartości. Widziałeś już\n"
"liczby i łańcuchy znaków, teraz poznaj *wartości logiczne*. Istnieją tylko dwie wartości logiczne:\n"
"`True` (Prawda) i `False` (Fałsz). Wypróbuj ten program:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingIfStatements.steps.first_if_statements.text"
msgstr ""
"Wartości logiczne są przeznaczone do użycia wewnątrz *instrukcji warunkowych* (często nazywanych również *kondycjami*).\n"
"\n"
"Oto prosty przykład, który możesz uruchomić:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingIfStatements.steps.excited_example.text"
msgstr ""
"Zwróć uwagę, jak kod w pierwszej instrukcji `if` został wykonany, ale w drugiej już nie.\n"
"\n"
"Ogólnie rzecz biorąc, instrukcja warunkowa `if` wygląda następująco:\n"
"\n"
"    if <warunek>:\n"
"        <ciało>\n"
"\n"
"gdzie `<warunek>` to dowolne wyrażenie, które daje wartość logiczną, a `<ciało>` to **wcięta** lista\n"
"jednego lub więcej poleceń. Struktura jest dość podobna do pętli `for`. Zwróć uwagę na dwukropek (`:`), który\n"
"jest niezbędny.\n"
"\n"
"Kiedy komputer widzi `if <warunek>:`, sprawdza, czy `<warunek>` jest `True`. Jeśli tak jest, wykonuje ciało.\n"
"Jeśli nie, pomija je i kontynuuje resztę programu.\n"
"\n"
"Oto bardziej interesujący przykład, który możesz uruchomić:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingIfStatements.steps.excited_false_example.text"
msgstr ""
"(Pamiętaj, że `sentence += '!'` oznacza `sentence = sentence + '!'`)\n"
"\n"
"Zmień `excited = True` na `excited = False` i uruchom program ponownie, aby zobaczyć, jaka jest różnica."

msgid "pages.IntroducingIfStatements.steps.excited_confused_exercise.text"
msgstr ""
"Czas na ćwiczenie. Zmodyfikuj program powyżej, aby zawierał dodatkowy\n"
"parametr logiczny `confused`, a program powinien się zaczynać tak:\n"
"\n"
"__code0__\n"
"\n"
"(`sentence` może być dowolnym łańcuchem znaków, a obie wartości logiczne mogą być `True` lub `False`)\n"
"\n"
"Gdy `confused` ma wartość true, wydrukowane zdanie powinno mieć na końcu dodany znak zapytania.\n"
"Jeśli zarówno `confused`, jak i `excited` są prawdziwe, zdanie powinno się kończyć na `!?`."

msgid "pages.IntroducingIfStatements.steps.final_text.text"
msgstr ""
"Dobra robota! Ten program może robić 4 różne rzeczy w zależności od tego, jak połączysz `excited`\n"
"i `confused`. Wypróbuj je, jeśli chcesz."

msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.0.text"
msgstr ""
"Musisz dodać tylko kilka linii do istniejącego programu. Wszystkie "
"istniejące kody powinny pozostać bez zmian."

msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.1.text"
msgstr "Kod, który dodasz, powinien być bardzo podobny do istniejącego kodu."

msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.0"
msgstr "Hello World"

msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.1"
msgstr "Hello World!"

msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.0"
msgstr "Hello World"

msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.1"
msgstr "Hello World!"

msgid "pages.IntroducingIfStatements.title"
msgstr "Introducing If Statements"

msgid "pages.IntroducingIfStatements.steps.excited_false_example.requirements"
msgstr ""
"Run the program from the previous step, but replace `True` with `False`, so "
"`excited = False`."
