#
msgid ""
msgstr ""

msgid "pages.IntroducingElif.steps.dna_example.text"
msgstr ""
"Krótka lekcja biologii! Większość komórek w twoim ciele zawiera pełny kod genetyczny w postaci DNA.\n"
"Składa się on z nici złożonych z jednostek molekularnych zwanych nukleobazami, które występują w czterech odmianach:\n"
"Adenina, Cytosyna, Guanina i Tymina, krótko ACGT.\n"
"Część pojedynczej nici może wyglądać na przykład tak:\n"
"\n"
"    AGTAGCGTCCTTAGTTACAGGATGGCTTAT...\n"
"\n"
"Nici ta będzie sparowana z inną nicią, w której A jest zastąpione przez T i odwrotnie,\n"
"oraz C jest zastąpione przez G i odwrotnie, np:\n"
"\n"
"    TCATCGCAGGAATCAATGTCCTACCGAATA...\n"
"\n"
"Obie nici są \"zapięte\" razem w słynną strukturę podwójnej helisy,\n"
"połączone przez pasujące do siebie pary A-T i C-G. Te parowania są niezbędne przy kopiowaniu DNA,\n"
"gdy komórki się dzielą i rozmnażają. Podwójna helisa jest rozpinana, a kod jest transkrybowany\n"
"na swoją przeciwną wersję, aby dokonać kopii.\n"
"\n"
"Powtórzymy ten proces. Spróbujmy napisać podobny program, jak ten, który właśnie napisaliśmy:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.IntroducingElif.steps.dna_example_with_else.text"
msgstr ""
"Ojej, to nie do końca działa. `T` jest zmieniane na `A`, ale `A` nie jest zmieniane na nic.\n"
"Czy widzisz, dlaczego?\n"
"\n"
"Kiedy `char == 'A'`, to wówczas ciało `char = 'T'` rzeczywiście się wykonuje. Ale to oznacza, że kolejny\n"
"warunek `char == 'T'` również jest spełniony i wtedy `char = 'A'` i wracamy do punktu wyjścia.\n"
"Musimy zmieniać `char` z `T` na `A` tylko jeśli `char` początkowo nie było `A`. Oznacza to, że `char == 'A'` było `False`. Możemy to osiągnąć za pomocą `else`, tak jak tutaj:\n"
"\n"
"__code0__\n"
"\n"
"Teraz napraw program, aby poprawnie zamieniał wszystkie znaki."

msgid "pages.IntroducingElif.steps.dna_example_with_elif.text"
msgstr ""
"Fantastycznie! Udało ci się naśladować to, co twoje własne komórki ciągle wykonują.\n"
"\n"
"`If` umieszczony wewnątrz `else` można zastąpić pojedynczym słowem kluczowym `elif`. Na przykład,\n"
"poprzedni kod można zmienić na to:\n"
"\n"
"__code0__"

msgid "pages.IntroducingElif.steps.final_text.text"
msgstr ""
"Często spotyka się łańcuch klauzul `elif`, gdy chcemy, aby jedno z wielu ciał zostało wykonane, tak jak w tym przypadku. Ogólnie rzecz biorąc, kod tego typu:\n"
"\n"
"__code0__\n"
"\n"
"może być przepisany jako:\n"
"\n"
"__code1__\n"
"\n"
"co jest krótsze i oszczędza problem z nieprzyjemnym zagnieżdżonym wcięciem.\n"
"Różnica jest tylko kosmetyczna: gdy komputer wykonuje ten kod, nie może\n"
"rozróżnić między tymi dwiema wersjami.\n"
"\n"
"Należy zauważyć, że `elif` może opcjonalnie być poprzedzony jednym finalnym `else`. Nie włączyliśmy go\n"
"w naszym przykładzie DNA, ale moglibyśmy dodać, aby ostrzec nas o jakichkolwiek niespodziewanych znakach\n"
"w danych wejściowych, lub zmienić `elif char == 'C':` na `else:`, jeśli bylibyśmy pewni\n"
"że dane wejściowe są prawidłowe."

msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.0.text"
msgstr ""
"```python\n"
"zmienna = not __code0__\n"
"```"

msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.1.text"
msgstr ""
"```python\n"
"zmienna = __code0__  # Zakładając, że __code0__ to albo True albo False\n"
"znak = __code1__  # Zakładając, że __code1__ to znak 'G' lub 'C'\n"
"\n"
"if znak == 'G':\n"
"    nowy_znak = 'C'\n"
"else:\n"
"    nowy_znak = 'G'\n"
"\n"
"zmienna = not zmienna\n"
"\n"
"print(nowy_znak)\n"
"```"

msgid "pages.IntroducingElif.title"
msgstr "Introducing `elif`"

msgid "pages.IntroducingElif.steps.dna_example_with_elif.requirements"
msgstr ""
"Copy the program from the first step on this page, but replace the 4 `if` blocks there with the\n"
"combination of `if` and `elif` blocks here. In other words, replace each of the last three `if`s with\n"
"`elif`, but leave the first `if` alone."
