#
msgid ""
msgstr ""

msgid "pages.NewlinesAndFormatBoard.steps.one_way_to_print_board.text"
msgstr ""
"Następnie chcielibyśmy rozwiązać problem wyświetlania planszy do gry w kółko i krzyżyk. Oto jeden ze sposobów na to:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(Co to jest `\"\".join`? Wyszukaj to!)"

msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text"
msgstr ""
"To dobry początek, ale idealnie byśmy chcieli funkcję, która *zwraca* łańcuch znaków zamiast go drukować.\n"
"W ten sposób inny kod może w łatwy sposób używać tego łańcucha znaków na różne sposoby. Możemy chcieć manipulować łańcuchem\n"
"(na przykład otoczyć go ramką lub wyekstrahować tylko kilka pierwszych linii), możemy chcieć wysłać go gdzieś innym niż na ekran\n"
"(np. do pliku) i w tym konkretnym przypadku chcemy mieć możliwość testowania go przy użyciu `assert_equal`. To nie działa:\n"
"\n"
"__code0__\n"
"\n"
"ponieważ `print_board` nie używa `return`, więc domyślnie zwraca `None`.\n"
"Zamiast tego chcielibyśmy mieć kod w stylu:\n"
"\n"
"__code1__\n"
"\n"
"Wtedy `print(format_board(board))` powinien wydrukować coś podobnego do tego, co widzieliśmy na początku.\n"
"Ale jak zwrócić łańcuch znaków z wieloma liniami? I jak to przetestować? Chcielibyśmy zrobić coś takiego:\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"Zobacz sam, jak to nie działa."

msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.text"
msgstr ""
"Zwykle łańcuch znaków musi znajdować się w jednej linii, więc taki zapis jest nieprawidłowy:\n"
"\n"
"    string = \"Pierwsza linia\n"
"    Druga linia\"\n"
"    print(string)\n"
"\n"
"Ale Python dostarcza rozwiązanie! Jest nim użycie *potrójnych cudzysłowów*, czyli trzech znaków cudzysłowia pod rząd\n"
"(albo `'''` albo `\"\"\"`) wokół zawartości łańcucha znaków. Uruchom następujący kod:\n"
"\n"
"__program_indented__"

msgid "pages.NewlinesAndFormatBoard.steps.discovering_newline.text"
msgstr ""
"Hurra! *Łańcuch znaków pomiędzy potrójnymi cudzysłowami* może rozciągać się na wiele linii i będą one wyświetlane na wyjściu.\n"
"\n"
"Podobnie jak pojedyncze i podwójne cudzysłowy, potrójne cudzysłowy są tylko innym rodzajem notacji, a nie nowym rodzajem łańcucha znaków.\n"
"`\"\"\"abc\"\"\"` to to samo co `\"abc\"`.\n"
"\n"
"Jednakże łańcuch `string` zawiera coś nowego. Uruchom `__program__` w konsoli, żeby zobaczyć."

msgid "pages.NewlinesAndFormatBoard.steps.introducing_newline.text"
msgstr ""
"Oto sekret!\n"
"\n"
"`\\n` reprezentuje ***znak nowej linii***. To jest po prostu inny znak, podobnie jak litera czy spacja (`' '`).\n"
"To znak, który występuje między dwoma oddzielnymi liniami, który wpisujesz, naciskając Enter na klawiaturze.\n"
"\n"
"Ponownie, `\\n` *reprezentuje* znak nowej linii w literalach łańcuchowych w Pythonie.\n"
"Łańcuch znaków tak naprawdę nie zawiera `\\` i `n`, zawiera tylko jeden znak. Sprawdź to w konsoli:\n"
"\n"
"__code0__"

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.text"
msgstr ""
"Teraz użyj znaku nowej linii, aby napisać funkcję `format_board` (twoje rozwiązanie powinno działać dla kwadratowej `board` dowolnego rozmiaru):\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text"
msgstr ""
"Świetnie! Typowe rozwiązanie wygląda tak:\n"
"\n"
"__code0__\n"
"\n"
"Jeśli sprawdziłeś, jak działa `join` i użyłeś go w swoim rozwiązaniu, to bardzo dobrze!\n"
"Możesz to również było rozwiązane w taki sposób:\n"
"\n"
"__code1__\n"
"\n"
"Jeśli chcesz, możesz teraz przejść do [następnej strony](#Types). Lub możesz podjąć dodatkowe wyzwanie!\n"
"\n"
"Napisz ulepszoną wersję funkcji `format_board`, która wyświetla separatory rzędów i kolumn. Na przykład, jeśli\n"
"\n"
"__code2__\n"
"\n"
"to `print(format_board(board))` powinno wydrukować\n"
"\n"
"    X|O|X\n"
"    -+-+-\n"
"     |O|O\n"
"    -+-+-\n"
"     |X|\n"
"\n"
"Ponownie powinno to działać dla kwadratowej `board` *dowolnego rozmiaru*.\n"
"\n"
"Zachęcamy do użycia `join` w tym ćwiczeniu. Podajemy jeden test jak poprzednio, możesz napisać dodatkowe testy:\n"
"\n"
"    __copyable__\n"
"__code3__"

msgid "pages.NewlinesAndFormatBoard.steps.final_text.text"
msgstr ""
"Świetna robota! To było całkiem wymagające.\n"
"\n"
"Teraz opanowałeś umiejętność tworzenia łańcucha znaków z wielu linii tekstu oraz rozwiązałeś problem wyświetlania planszy graczom.\n"
"\n"
"Następnie dowiesz się więcej o typach w Pythonie, o tym, jak je konwertować, oraz o tym, jak uzyskiwać dane wejściowe od graczy.\n"
"Jesteś już w połowie drogi do ukończenia projektu. Tak trzymaj!"

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.0.text"
msgstr ""
"Look carefully at the test case we provided. It shows you all you need!"

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.1.text"
msgstr ""
"You need to build up a string for the whole board. Start with an empty "
"string."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.2.text"
msgstr "For each row, add the characters from that row to the string."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.3.text"
msgstr "You'll need a nested loop."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.4.text"
msgstr ""
"When you reach the end of a row, you need to add a newline before the next "
"row."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.5.text"
msgstr ""
"`'\\n'` is just like any other character! You can add it as usual with `+`."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.6.text"
msgstr "Notice that the end of the last row is different than the others."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.7.text"
msgstr ""
"Before you add a newline, you'll need to check if it's the last row or not."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.8.text"
msgstr "Your outer loop should loop over the length of the board."

msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.9.text"
msgstr "Then check if you are at the last index or not."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.0.text"
msgstr ""
"There are two types of lines to be displayed: one type has the pieces joined"
" by `|`s in between them, the other type has `-`s joined by `+`s in between "
"them."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.1.text"
msgstr ""
"Both of these types of lines can be built up by using `join` appropriately."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.2.text"
msgstr ""
"For example, how can you convert a row `['X', 'O', 'X']` into `'X|O|X'` "
"using `join`?"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.3.text"
msgstr ""
"Similarly, how can you obtain `'-+-+-'` using `join`? To what list should "
"you apply `join`?"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.4.text"
msgstr ""
"Once you figured out how to build up both types of lines, how can you "
"combine them to obtain the final result?"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.5.text"
msgstr "Notice that the lines with the `+-`  signs are always the same."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.6.text"
msgstr ""
"And there is one line with `+-` separating every consecutive pair of lines "
"with pieces."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.7.text"
msgstr "You can use `join` on the lines themselves!"

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.8.text"
msgstr ""
"The lines with the pieces can be joined together with the `+-` line in "
"between them (with newlines added in appropriate places)."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.9.text"
msgstr ""
"To do that, first you need to keep the lines with the pieces stored in a "
"list as you are building them."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.10.text"
msgstr "Then apply `join` to that list, with the `+-` line as separator."

msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.11.text"
msgstr ""
"To add the newlines to the `+-` line correctly, take a look at the test case"
" we provided."

msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.program"
msgstr ""
"assert_equal(\n"
"    format_board([\n"
"        ['X', 'O', 'X'],\n"
"        [' ', 'O', 'O'],\n"
"        [' ', 'X', ' ']\n"
"    ]),\n"
"    \"XOX\n"
"      OO\n"
"      X \"\n"
")"

msgid "pages.NewlinesAndFormatBoard.title"
msgstr "The newline character, `format_board`"

msgid ""
"pages.NewlinesAndFormatBoard.steps.discovering_newline.special_messages.bad_string.text"
msgstr ""
"Oops, `string` doesn't have the right value. Run the program from the "
"previous step again."

msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.program"
msgstr ""
"string = \"\"\"First line\n"
"Second line\"\"\"\n"
"print(string)"
