#
msgid ""
msgstr ""

msgid "pages.OtherComparisonOperators.steps.try_not_equals.text"
msgstr ""
"Przeciwieństwem operatora równości `==` jest operator *nierówności* `!=`. "
"Jeśli się przyjrzeć, to trochę przypomina ≠. Zwraca `True`, gdy dwie "
"wartości są... nierówne. Wypróbuj `__program__` samodzielnie w konsoli."

msgid "pages.OtherComparisonOperators.steps.brokn_kyboard.text"
msgstr ""
"Oto sympatyczny mały program używający `!=`:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.OtherComparisonOperators.steps.introducing_less_than.text"
msgstr ""
"Inne przydatne operatory to `<` (mniejsze niż) i `>` (większe niż). Na "
"przykład `a < b` oznacza \"`a` jest mniejsze od `b`\". Spróbuj użyć jednego "
"z tych operatorów w konsoli, aby porównać dwie liczby."

msgid "pages.OtherComparisonOperators.steps.comparing_strings.text"
msgstr ""
"Możesz również użyć tych operatorów do porównania łańcuchów znaków. Jeśli "
"uszeregujesz dwa łańcuchy znaków w porządku alfabetycznym, pierwszy jest "
"'mniejszy' od drugiego. Przekonaj się sam."

msgid "pages.OtherComparisonOperators.steps.grades_example.text"
msgstr ""
"Oto praktyczny przykład zastosowania `<` do wypróbowania:\n"
"\n"
"__program_indented__\n"
"\n"
"Przypomnijmy, że `elif percentage < 60` po `if percentage < 40` oznacza \"jeśli procent nie był mniejszy niż 40 i równocześnie jest mniejszy niż 60\", więc przejdzie dla wszystkich liczb od 40 do 59 włącznie. Podobnie ocena 'B' jest przyznawana dla procentów od 60 do 79, a 'A' dla każdej liczby 80 i wyższej."

msgid "pages.OtherComparisonOperators.steps.min_three_exercise.text"
msgstr ""
"Teraz czas na ćwiczenie: napisz program, który przyjmuje trzy zmienne `x1`, `x2` i `x3`, i wypisuje wartość najmniejszej z nich. Więc dla:\n"
"\n"
"__code0__\n"
"\n"
"powinien wydrukować `10`."

msgid "pages.OtherComparisonOperators.steps.final_text.text"
msgstr ""
"Cudownie!\n"
"\n"
"Istnieje wiele sposobów, aby rozwiązać to zadanie. Oto jedno z rozwiązań:\n"
"\n"
"__code0__\n"
"\n"
"A oto inne:\n"
"\n"
"__code1__\n"
"\n"
"Te programy (również Twój) działają równie dobrze zarówno z liczbami, jak i łańcuchami znaków. Więc dla:\n"
"\n"
"__code2__\n"
"\n"
"wydrukują `Alice`, ponieważ to jest pierwszy łańcuch znaków w porządku alfabetycznym.\n"
"\n"
"`<` i `>` zwracają wartość False, jeśli porównywane wartości są równe. Na przykład,\n"
"3 nie jest mniejsze niż 3, więc `3 < 3` oraz `3 > 3` są obie False.\n"
"Aby uwzględnić równe wartości, użyj `<=` i `>=`.\n"
"Znowu, jeśli się przyjrzeć, wyglądają one trochę jak ≤ i ≥.\n"
"Zwróć uwagę, że `=` występuje na drugim miejscu – nie istnieją takie operatory jak `=<` czy `=>`.\n"
"Aby to zapamiętać, czytaj je na głos jako \"mniejsze lub równe\"\n"
"i \"większe lub równe\".\n"
"\n"
"Podsumowując, główne operatory porównania to `==`, `!=`, `<`, `>`, `<=` i `>=`.\n"
"Jeśli kiedykolwiek masz wątpliwości, co do ich działania, pobaw się nimi w konsoli!"

msgid "pages.OtherComparisonOperators.steps.min_three_exercise.hints.0.text"
msgstr ""
"```python\n"
"x1 = __code0__\n"
"x2 = __code1__\n"
"\n"
"if x1 < x2:\n"
"    najmniejsza = x1\n"
"else:\n"
"    najmniejsza = x2\n"
"\n"
"print(najmniejsza)\n"
"```"

msgid "pages.OtherComparisonOperators.steps.min_three_exercise.hints.1.text"
msgstr ""
"```python\n"
"x1 = __code0__\n"
"x2 = __code1__\n"
"\n"
"if x1 < x2:\n"
"    print(x1)\n"
"else:\n"
"    print(x2)\n"
"```"

msgid "pages.OtherComparisonOperators.title"
msgstr "Other Comparison Operators"

msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.0.text"
msgstr ""
"This is almost exactly the same as the previous step, just use strings "
"instead of numbers."

msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.1.text"
msgstr "You only need to run one very small, simple line in the shell."

msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.2.text"
msgstr ""
"You can also do this by running multiple lines in the shell, first defining "
"variables and then comparing them, but you don't need to, this can be done "
"without variables."

msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.3.text"
msgstr ""
"Remember adding two strings in the shell at the beginning of the course?"

msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.4.text"
msgstr "For example, we did `'hello' + 'world'`"

msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.5.text"
msgstr ""
"For this exercise you have to do basically that, but compare them instead."

msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.0.text"
msgstr "You only need to run one very small, simple line in the shell."

msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.1.text"
msgstr "How would you add two numbers in the shell?"

msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.2.text"
msgstr "For example, try `123 + 456`"

msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.3.text"
msgstr ""
"For this exercise you have to do basically that, but compare them instead."

msgid "pages.OtherComparisonOperators.steps.comparing_strings.requirements"
msgstr "Run any code in the shell using either `<` or `>` on two strings."

msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.requirements"
msgstr "Run any code in the shell using either `<` or `>` on two numbers."
