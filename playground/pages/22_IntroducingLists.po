#
msgid ""
msgstr ""

msgid "pages.IntroducingLists.steps.first_list.text"
msgstr ""
"Nadeszła pora, aby dowiedzieć się o potężnym nowym rodzaju wartości, zwanym *listami*. Oto przykład:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingLists.steps.can_contain_anything.text"
msgstr ""
"Lista jest *sekwencją* (uporządkowaną kolekcją/kontenerem) dowolnej liczby wartości.\n"
"Wartości te często określane są jako *elementy*.\n"
"Mogą być czymkolwiek: liczbami, łańcuchami znaków, wartościami logicznymi, a nawet listami! Mogą również być mieszaniną typów.\n"
"\n"
"Aby bezpośrednio utworzyć listę, jak powyżej:\n"
"\n"
"1. Napisz nawiasy kwadratowe: `[]`\n"
"2. Jeśli nie chcesz pustej listy, wpisz w środku pewne wyrażenia, które będą elementami.\n"
"3. Użyj przecinków (`,`), aby oddzielić elementy.\n"
"\n"
"Oto kolejny przykład tworzenia listy:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingLists.steps.numbers_sum.text"
msgstr ""
"Jak widziałeś powyżej, listy są *iterowalne*, co oznacza, że możesz iterować po nich używając `pętli for`.\n"
"Oto program, który sumuje wszystkie liczby na liście:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingLists.steps.strings_sum.text"
msgstr ""
"Teraz zmodyfikuj program, aby mógł on sumować listę łańcuchów znaków zamiast liczb.\n"
"Na przykład, mając:\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"powinien on wypisać:\n"
"\n"
"    __no_auto_translate__\n"
"    Thisisalist"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.text"
msgstr ""
"Fantastycznie!\n"
"\n"
"Jeśli chcesz, możesz już teraz przejść do [następnej strony](#BuildingNewLists).\n"
"\n"
"Dla chętnych na dodatkowe wyzwanie: rozszerz program tak, aby wprowadzić ciąg separatorów *pomiędzy* każdym słowem.\n"
"Na przykład, mając:\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"    separator = ' - '\n"
"\n"
"to powinno wyświetlić:\n"
"\n"
"    __no_auto_translate__\n"
"    This - is - a - list"

msgid "pages.IntroducingLists.steps.final_text.text"
msgstr ""
"Gratulacje! To było naprawdę trudne! Jedno z rozwiązań wygląda tak:\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"    separator = ' - '\n"
"    total = ''\n"
"    not_first = False\n"
"\n"
"    for word in words:\n"
"        if not_first:\n"
"            total += separator\n"
"        total += word\n"
"        not_first = True\n"
"\n"
"    print(total)"

msgid "pages.IntroducingLists.steps.strings_sum.hints.0.text"
msgstr ""
"```python\n"
"x1 = __code0__\n"
"x2 = __code1__\n"
"\n"
"najmniejsza = ''\n"
"if x1 < x2:\n"
"    najmniejsza += x1\n"
"else:\n"
"    najmniejsza += x2\n"
"\n"
"print(najmniejsza)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum.hints.1.text"
msgstr ""
"```python\n"
"x1 = __code0__\n"
"x2 = __code1__\n"
"\n"
"if x1 < x2:\n"
"    mniejsza = x1\n"
"else:\n"
"    mniejsza = x2\n"
"\n"
"print(mniejsza)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum.hints.2.text"
msgstr ""
"```python\n"
"x1 = __code0__\n"
"x2 = __code1__\n"
"\n"
"if x1 < x2:\n"
"    mniejsza = x1\n"
"else:\n"
"    mniejsza = x2\n"
"\n"
"print(mniejsza)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum.hints.3.text"
msgstr ""
"```python\n"
"x1 = __code0__\n"
"x2 = __code1__\n"
"\n"
"if x1 < x2:\n"
"    print(x1)\n"
"else:\n"
"    print(x2)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum.hints.4.text"
msgstr ""
"Tak, istnieje podobne pojęcie wśród łańcuchów znaków do liczby 0, jest to "
"pusty łańcuch znaków, reprezentowany przez '' (dwa pojedyncze cudzysłowy bez"
" żadnych znaków pomiędzy nimi) lub \"\" (dwa podwójne cudzysłowy bez żadnych"
" znaków pomiędzy nimi)."

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.0.text"
msgstr ""
"```python\n"
"x1 = __code0__\n"
"x2 = __code1__\n"
"\n"
"if x1 < x2:\n"
"    result = x1\n"
"else:\n"
"    result = x2\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.1.text"
msgstr ""
"```python\n"
"x1 = __code0__\n"
"x2 = __code1__\n"
"\n"
"if x1 < x2:\n"
"    print(x1)\n"
"else:\n"
"    print(x2)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.2.text"
msgstr ""
"```python\n"
"# Zakładamy, że 'words' to lista słów, a 'separator' to łańcuch znaków używany jako separator\n"
"words = __code0__  # np. ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # np. ', '\n"
"\n"
"result = ''\n"
"for word in words:\n"
"    result += word + separator\n"
"\n"
"# Usuwamy ostatni separator z końca wynikowego łańcucha znaków\n"
"result = result[:-len(separator)]\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.3.text"
msgstr ""
"```python\n"
"words = __code0__  # np. ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # np. ', '\n"
"\n"
"result = ''\n"
"for i, word in enumerate(words):\n"
"    if i > 0:\n"
"        result += separator\n"
"    result += word\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.4.text"
msgstr ""
"```python\n"
"words = __code0__  # np. ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # np. ', '\n"
"\n"
"result = ''\n"
"for word in words:\n"
"    if result:  # Jeżeli 'result' nie jest pustym łańcuchem znaków, dodajemy separator przed słowem\n"
"        result += separator\n"
"    result += word\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.5.text"
msgstr ""
"```python\n"
"words = __code0__  # np. ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # np. ', '\n"
"\n"
"result = separator.join(words)  # Łączenie słów w liście za pomocą separatora\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.6.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"# Rozpoczęcie wyniku od pierwszego słowa w liście, aby ominąć dodawanie separatora w pierwszej iteracji\n"
"result = words[0]\n"
"\n"
"# Iterowanie przez pozostałe słowa w liście i dodawanie ich z separatorem\n"
"for word in words[1:]:\n"
"    result += separator + word\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.7.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = \"\"\n"
"for i, word in enumerate(words):\n"
"    if i == len(words) - 1:  # Jeśli to jest ostatnie słowo w liście, nie dodawaj separatora\n"
"        result += word\n"
"    else:\n"
"        result += word + separator  # Dodanie słowa i separatora\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.8.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = ''\n"
"for i, word in enumerate(words):\n"
"    result += word\n"
"    if i < len(words) - 1:  # Jeżeli to nie jest ostatnia iteracja, dodaj separator\n"
"        result += separator\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.9.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = ''\n"
"for i, word in enumerate(words):\n"
"    result += word\n"
"    if i != len(words) - 1:  # Dodaj separator tylko jeśli to nie jest ostatnia iteracja\n"
"        result += separator\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.10.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = ''\n"
"for i, word in enumerate(words):\n"
"    if i == 0:  # Jeśli to jest pierwsza iteracja, nie dodawaj separatora\n"
"        result += word\n"
"    else:\n"
"        result += separator + word  # W każdej kolejnej iteracji dodaj separator przed słowem\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.11.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = ''\n"
"first_iteration = True  # Zmienna śledząca, czy jesteśmy w pierwszej iteracji\n"
"\n"
"for word in words:\n"
"    if not first_iteration:  # Jeśli to nie jest pierwsza iteracja, dodaj separator przed słowem\n"
"        result += separator\n"
"    result += word\n"
"    first_iteration = False  # Po pierwszej iteracji ustawiamy zmienną na False\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.12.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = ''\n"
"pierwsza_iteracja = True  # Zmienna śledząca, czy jesteśmy w pierwszej iteracji\n"
"\n"
"for word in words:\n"
"    if not pierwsza_iteracja:  # Jeśli to nie jest pierwsza iteracja, dodaj separator przed słowem\n"
"        result += separator\n"
"    result += word\n"
"    pierwsza_iteracja = False  # Po pierwszej iteracji ustawiamy zmienną na False\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.13.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = ''\n"
"pierwsza_iteracja = True  # Zmienna śledząca, czy jesteśmy w pierwszej iteracji\n"
"\n"
"for word in words:\n"
"    if pierwsza_iteracja:\n"
"        result += word\n"
"        pierwsza_iteracja = False  # Ustawienie zmiennej na False po pierwszej iteracji\n"
"    else:\n"
"        result += separator + word  # Dodawanie separatora przed słowem w pozostałych iteracjach\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.14.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = ''\n"
"for word in words:\n"
"    if result:  # Jeśli w zmiennej result jest już jakiś tekst, dodaj separator\n"
"        result += separator\n"
"    result += word  # Dodaj kolejne słowo do wyniku\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.15.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = words[0]  # Rozpocznij wynik od pierwszego słowa\n"
"for word in words[1:]:  # Iteruj przez listę pomijając pierwsze słowo\n"
"    result += separator + word  # Dodaj separator, a następnie słowo\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.16.text"
msgstr ""
"```python\n"
"words = __code0__  # przykładowo ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # przykładowo ', '\n"
"\n"
"result = ''  # Rozpoczęcie pustego łańcucha znaków do akumulacji wyniku\n"
"\n"
"for word in words:\n"
"    if result:  # Jeżeli w zmiennej result jest już jakiś tekst (nie jest pusty)\n"
"        result += separator  # Najpierw dodaj separator\n"
"    result += word  # Następnie dodaj słowo\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.17.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = ''\n"
"pierwsza_iteracja = True  # Zmienna śledząca, czy jesteśmy w pierwszej iteracji\n"
"\n"
"for word in words:\n"
"    if pierwsza_iteracja:\n"
"        result += word\n"
"        pierwsza_iteracja = False  # Zmień zmienną na False po dodaniu pierwszego słowa\n"
"    else:\n"
"        result += separator + word  # W pozostałych iteracjach dodaj najpierw separator, potem słowo\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.18.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = ''\n"
"pierwsze_słowo = True  # Zmienna śledząca, czy jesteśmy przy pierwszym słowie listy\n"
"\n"
"for word in words:\n"
"    if pierwsze_słowo:\n"
"        result += word\n"
"        pierwsze_słowo = False  # Zmiana zmiennej na False po dodaniu pierwszego słowa\n"
"    else:\n"
"        result += separator + word  # W każdej następnej iteracji dodajemy najpierw separator, potem słowo\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.19.text"
msgstr ""
"```python\n"
"words = __code0__  # przykładowo ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # przykładowo ', '\n"
"\n"
"result = ''\n"
"to_pierwsza_iteracja = True  # Zmienna śledząca, czy jest to pierwsza iteracja\n"
"\n"
"for word in words:\n"
"    if to_pierwsza_iteracja:  # Sprawdź, czy to jest pierwsza iteracja\n"
"        result += word  # Jeśli tak, dodaj tylko słowo\n"
"        to_pierwsza_iteracja = False  # Zmień wartość zmiennej, aby oznaczyć koniec pierwszej iteracji\n"
"    else:\n"
"        result += separator + word  # W kolejnych iteracjach dodaj separator przed słowem\n"
"\n"
"print(result)\n"
"```"

msgid "pages.IntroducingLists.steps.first_list.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"\n"
"for word in words:\n"
"    print(word)"

msgid "pages.IntroducingLists.title"
msgstr "Introducing Lists"
