#
msgid ""
msgstr ""

msgid "pages.MultiLineExpressions.steps.invalid_multiline.text"
msgstr ""
"Nasze linie kodu zaczynają być dość długie.\n"
"Na szczęście Python oferuje kilka sposobów na rozłożenie jednego polecenia na wiele linii,\n"
"ale nie dzieje się to automatycznie. Musisz się upewnić, że Python rozumie, że właśnie to robisz.\n"
"Na przykład ten kod to niepoprawna składnia i spowoduje błąd:\n"
"\n"
"__program_indented__"

msgid "pages.MultiLineExpressions.steps.valid_multiline.text"
msgstr ""
"Python próbuje zinterpretować to jako dwie osobne linie kodu i się gubi. Musisz mu powiedzieć,\n"
"że pierwsza linia jest kontynuowana na drugiej linii.\n"
"\n"
"Jednym ze sposobów, aby to osiągnąć, jest dodanie `\\` na końcu linii, aby 'uciec' przed przerwą w linii.\n"
"\n"
"Innym sposobem jest upewnienie się, że przerwa w linii znajduje się w jakimś rodzaju nawiasów. Wtedy\n"
"kontynuacja linii jest sugerowana, ponieważ Python będzie czekał aż wszystkie nawiasy zostaną zamknięte przed\n"
"uznaniem linii za kompletne. Jeśli już masz nawiasy, na przykład dlatego, że wywołujesz funkcję\n"
"lub tworzysz listę, możesz nie musieć nic robić! W przeciwnym razie możesz dodać nawiasy do dowolnego wyrażenia,\n"
"aby zasugerować kontynuację linii.\n"
"\n"
"Oto kilka przykładów. Zachowaj szczególną uwagę na detale.\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.MultiLineExpressions.steps.final_text.text"
msgstr ""
"Więc jeśli otrzymasz tajemniczy `SyntaxError`, upewnij się, że nie "
"rozdzieliłeś niepoprawnie żadnych linii!"

msgid "pages.MultiLineExpressions.steps.invalid_multiline.program"
msgstr ""
"is_friend = name == \"Alice\" or\n"
"            name == \"Bob\""

msgid "pages.MultiLineExpressions.title"
msgstr "Multi-line statements"
