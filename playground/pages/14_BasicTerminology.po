#
msgid ""
msgstr ""

msgid "pages.BasicTerminology.steps.final_text.text"
msgstr ""
"Oto kilka pojęć, które powinieneś znać:\n"
"\n"
"***Wyrażenie*** to fragment kodu, który ma jakąś wartość. Na przykład w tej linii kodu:\n"
"\n"
"    __no_auto_translate__\n"
"    sentence = 'Hello ' + name\n"
"\n"
"są trzy wyrażenia:\n"
"\n"
"1. `'Hello '`\n"
"2. `name`\n"
"3. `'Hello ' + name`\n"
"\n"
"Natomiast cała linia `sentence = ...` to ***instrukcja***. To polecenie, które każe komputerowi wykonać jakąś akcję. Samo w sobie nie ma wartości. Oznacza to na przykład, że nie można dodawać do siebie instrukcji. Ten kod jest nieprawidłowy:\n"
"\n"
"    (word = 'Hello') + (name = 'Bob')\n"
"\n"
"Konkretnie, instrukcja taka jak `sentence = ...`, gdzie zmiennej przypisywana jest wartość, nazywana jest ***przypisaniem*** - wartość jest *przypisywana do* zmiennej.\n"
"\n"
"Program to lista instrukcji, które są wykonywane w kolejności. Pętla `for` to *złożona instrukcja*, co oznacza, że ma własne ciało, które zawiera inne instrukcje. Większość instrukcji będzie również zawierać wyrażenia, a wyrażenia mogą zawierać mniejsze wyrażenia, ale wyrażenia nie mogą zawierać instrukcji.\n"
"\n"
"Proces obliczania wartości wyrażenia nazywa się ***ewaluacją*** - zauważ, jak prawie zawiera słowo 'wartość'. Komputer *ewaluuje* `1 + 2` aby otrzymać wartość `3`.\n"
"\n"
"Proces wykonywania pętli nazywa się ***iteracją***. Kod taki jak `for char in 'Hello':` to *iterowanie przez* łańcuch znaków `'Hello'`. Fakt, że jest to możliwe, oznacza, że łańcuchy znaków są *iterowalne*. W przeciwieństwie do nich, liczby nie są iterowalne, co dokładnie powie Ci Python, jeśli spróbujesz `for char in 3:`. Każde przejście przez pętlę to *jedna iteracja*, więc w tym przykładzie będzie ich 5."

msgid "pages.BasicTerminology.title"
msgstr "Basic Terminology"
