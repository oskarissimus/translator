#
msgid ""
msgstr ""

msgid "pages.CombiningAndAndOr.steps.CombiningAndOr.text"
msgstr ""
"Jeśli użyjesz zarówno `and`, jak i `or` w jednym wyrażeniu, jest to bardzo podobne do łączenia `*` i `+`.\n"
"Operatory są ewaluowane w określonej kolejności.\n"
"\n"
"Na przykład, spróbuj następujący kod w konsoli.\n"
"Czego się spodziewasz?\n"
"\n"
"__program_indented__"

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.text"
msgstr ""
"Jeśli przeczytasz to nieuwaznie od lewej do prawej, możesz pomyśleć, że:\n"
"\n"
"__code0__\n"
"\n"
"jest równoważne z\n"
"\n"
"__code1__\n"
"\n"
"ale tak naprawdę jest równoważne z\n"
"\n"
"__code2__\n"
"\n"
"Dzieje się tak, ponieważ `and` ma wyższy priorytet niż `or`.\n"
"Jest to ważne, ponieważ pierwsza interpretacja redukuje się do `True and False`, co daje `False`, podczas gdy druga\n"
"interpretacja redukuje się do `True or False`, co daje `True`!\n"
"Możesz spróbować obie opcje z nawiasami w konsoli, aby to potwierdzić.\n"
"\n"
"**Nauczka stąd jest taka, aby być szczególnie ostrożnym podczas łączenia operatorów.** Albo dodaj nawiasy dla pewności albo\n"
"rozdziel swoje wyrażenie na mniejsze części i każdą część przypisz do zmiennej.\n"
"To sprawi, że twój kod będzie jasny, czytelny i jednoznaczny oraz uchroni cię przed bolesnymi błędami.\n"
"\n"
"Czas na ćwiczenie. Załóżmy, że piszesz program do gry w kółko i krzyżyk,\n"
"znane również jako gra w \"O i X\". Jeśli nigdy nie słyszałeś o kółko i krzyżyk, możesz przeczytać zasady\n"
"i zagrać kilka gier [tutaj](https://gametable.org/games/tic-tac-toe/).\n"
"\n"
"Musimy sprawdzić, czy ktoś wygrał grę. Nasza funkcja `all_equal` jest już przydatna do sprawdzania rzędów.\n"
"\n"
"Napisz funkcję do sprawdzania, czy ktoś wygrał grę poprzez umieszczenie 3 tych samych elementów na jednej z linii przekątnych.\n"
"Plansza jest podana jako zagnieżdżona lista `board` z 3 podlistami, każda podlista zawiera 3 ciągi znaków, reprezentujące rząd. Na przykład:\n"
"\n"
"__code3__\n"
"\n"
"Funkcja powinna zwracać wartość logiczną: `True`, jeśli na jednej z przekątnych są 3 takie same elementy, `False` w przeciwnym przypadku.\n"
"Kliknij przycisk Kopiuj, aby rozpocząć od poniższego kodu.\n"
"Przygotowaliśmy dla Ciebie kilka testów, twoim zadaniem jest zastąpić `...` twoim kodem.\n"
"\n"
"    __copyable__\n"
"__code4__"

msgid "pages.CombiningAndAndOr.steps.final_text.text"
msgstr ""
"Dobra robota! To było trudne. Oto kilka możliwych rozwiązań:\n"
"\n"
"__code0__\n"
"\n"
"albo:\n"
"\n"
"__code1__"

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.0.text"
msgstr "How many diagonals are there on the board?"

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.1.text"
msgstr ""
"Which entries of the three sublists make up each diagonal? How can you "
"access these entries?"

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.2.text"
msgstr "Every list always has 3 entries, so no need for a loop."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.3.text"
msgstr ""
"There are two problems to solve here: checking for a win in a specific "
"diagonal, and combining the checks for each diagonal."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.4.text"
msgstr "One problem can be solved using `and`, the other using `or`."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.5.text"
msgstr ""
"There's a lot of similarity with the `all_equal` function. You can even call"
" that function to help! But then you have to include its definition."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.6.text"
msgstr ""
"Similar to `all_equal`, check that the 3 entries on a diagonal are equal to "
"each other, e.g. by using `and`."

msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.7.text"
msgstr "Check the two diagonals together, using `or`."

msgid "pages.CombiningAndAndOr.title"
msgstr "Combining `and` and `or`"
