#
msgid ""
msgstr ""

msgid "pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor.text"
msgstr ""
"Rozważ ten program. Przechodzi przez listę liczb i usuwa te mniejsze niż 10. Przynajmniej próbuje.\n"
"Uruchom go w Python Tutor.\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(pamiętaj, że `numbers.pop(i)` usuwa element z `numbers` o indeksie `i`)"

msgid "pages.ModifyingWhileIterating.steps.remove_instead_of_pop.text"
msgstr ""
"Podczas wykonywania, program wyraźnie pomija 7 lub 3 i nie usuwa ich, a na końcu kończy się niepowodzeniem, gdy próbuje uzyskać dostęp do indeksu, który jest zbyt wysoki. Czy widzisz, dlaczego się tak dzieje?\n"
"\n"
"Zmienna indeksu `i` przechodzi przez typowe wartości 0, 1, 2, ... tak jak powinna, ale kiedy lista się zmienia, nie są to już pozycje, które chcemy. Na przykład w pierwszej iteracji `i` to 0 i `number` to 10, który zostaje usunięty. Przesuwa to resztę liczb o jedną pozycję w lewo, więc teraz 7 znajduje się na pozycji 0. Ale potem w następnej iteracji `i` to 1, a `numbers[i]` to 8. 7 zostało pominięte.\n"
"\n"
"Możemy spróbować napisać program tak, aby używał `remove` zamiast `pop`, więc nie będziemy musieli używać indeksów. Nawet wygląda to ładniej w ten sposób.\n"
"\n"
"__program_indented__"

msgid "pages.ModifyingWhileIterating.steps.make_copy.text"
msgstr ""
"Okazuje się jednak, że robi to prawie to samo - nie kończy się błędem, ale nadal nie usuwa 7 ani 3.\n"
"Dzieje się tak z tego samego powodu - iteracja przez listę nadal odbywa się przez indeksy \"pod spodem\".\n"
"\n"
"Lekcja tutaj jest taka, ***nigdy nie modyfikuj czegoś podczas iteracji przez to***. Trzymaj modyfikację i pętle osobno.\n"
"\n"
"Dobra wiadomość jest taka, że istnieje wiele sposobów na rozwiązanie tego problemu. Możesz zamiast tego po prostu przejść przez kopię, jak w:\n"
"\n"
"__code0__"

msgid "pages.ModifyingWhileIterating.steps.make_copy2.text"
msgstr ""
"Teraz modyfikowana lista i lista, po której iterujemy, są oddzielnymi obiektami, nawet jeśli początkowo ich zawartość jest taka sama.\n"
"\n"
"Podobnie, możesz iterować po oryginale i modyfikować kopię:\n"
"\n"
"__program_indented__"

msgid "pages.ModifyingWhileIterating.steps.make_new_list.text"
msgstr ""
"Albo możesz zbudować nową listę od zera. W tym przypadku, wykonaliśmy już coś podobnego w ćwiczeniu:\n"
"\n"
"__program_indented__"

msgid "pages.ModifyingWhileIterating.steps.final_text.text"
msgstr ""
"Aby powtórzyć, ***nigdy nie modyfikuj czegoś, podczas gdy przez to iterujesz***. Twoje opcje to:\n"
"\n"
"- Modyfikuj kopię\n"
"- Iteruj po kopii\n"
"- Nie modyfikuj niczego, zamiast tego stwórz nową wersję."

msgid "pages.ModifyingWhileIterating.title"
msgstr "Modifying While Iterating"

msgid "pages.ModifyingWhileIterating.steps.make_copy.requirements"
msgstr ""
"Run the same program as above, but change the second line:\n"
"\n"
"__code0__\n"
"\n"
"to:\n"
"\n"
"__code1__\n"
"\n"
"i.e. add `.copy()` after `numbers` but before `:`."
