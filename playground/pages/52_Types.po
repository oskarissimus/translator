#
msgid ""
msgstr ""

msgid "pages.Types.steps.five_different_types.text"
msgstr ""
"Do tej pory zobaczyliśmy różne rodzaje danych: łańcuchy znaków, listy, liczby i wartości logiczne.\n"
"Nazywane są one *typami*. Każda wartość ma swój typ, który wpływa na jej zachowanie\n"
"i może być ujawniony za pomocą funkcji `type`:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.check_type_manually.text"
msgstr ""
"Python zgłasza najpierw, że `type('Hello World')` to `<class 'str'>`. Na razie nie przejmuj się słowem `class`.\n"
"`str` to skrót od *string*.\n"
"\n"
"Następnie `True` to `bool` (skrót od *boolean*) i `[1, 2, 3]` ma typ `list`.\n"
"\n"
"Zauważ, że istnieją dwa typy dla liczb:\n"
"\n"
"- `int`, skrót od 'integer', oznacza liczby całkowite, czyli bez ułamków lub przecinków.\n"
"- `float`, skrót od 'floating point number', jest dla liczb z przecinkiem i ewentualnie częścią ułamkową.\n"
"\n"
"W większości przypadków nie musisz martwić się o różne typy numerów, ponieważ można je mieszać podczas wykonywania operacji matematycznych.\n"
"\n"
"Typy to wartości, które mogą być używane na różne sposoby, podobnie jak inne wartości.\n"
"Na przykład, wypróbuj to w konsoli:\n"
"\n"
"__program_indented__"

msgid "pages.Types.steps.different_types_look_same.text"
msgstr ""
"Wartości różnych typów są zazwyczaj dość różne od siebie, ale mogą wyglądać podobnie, gdy są wydrukowane,\n"
"co może być mylące. Spróbuj tego:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(Możesz użyć `print(repr(123))` i `print(repr('123'))`, aby zauważyć różnicę. Co to jest `repr`? Wyszukaj to w Google!)"

msgid "pages.Types.steps.plus_has_two_meanings.text"
msgstr ""
"Różne typy mają różne metody i obsługują różne operatory.\n"
"Ten sam metod lub operator może również oznaczać inne rzeczy.\n"
"Na przykład, zobacz, jak `+` ma różne znaczenia dla `str` i `int`:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.less_than_has_two_meanings.text"
msgstr ""
"W przypadku dwóch liczb całkowitych `+` działa jako dodawanie, natomiast dla dwóch łańcuchów znaków działanie to oznacza konkatenację.\n"
"Python automatycznie rozpoznaje znaczenie `+` na podstawie typów danych wejściowych.\n"
"Podobnie `<` działa inaczej na dwóch łańcuchach znaków i dwóch liczbach całkowitych:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.less_than_sorting_strings.text"
msgstr ""
"Więc `<` działa jako zwykłe 'mniejsze niż' między dwiema liczbami całkowitymi, ponieważ `13` jest mniejsze niż `120`,\n"
"ale działa jako porządkowanie słownikowe między dwoma łańcuchami znaków: `13` jest 'alfabetycznie' po `120`\n"
"ponieważ `3` występuje po `2`.\n"
"\n"
"Zobacz jakie to robi różnice, kiedy sortujesz listę:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.common_type_errors.text"
msgstr ""
"Co się stanie, jeśli użyjesz operatora między `str` a `int`? Spróbuj w konsoli:\n"
"\n"
"__program_indented__"

msgid "pages.Types.steps.fixing_type_errors_with_conversion.text"
msgstr ""
"Użycie łańcucha znaków zamiast liczby całkowitej w `range` jak w `range('5')`,\n"
"lub w indeksowaniu listy jak w `list['3']` również spowoduje błąd.\n"
"\n"
"Większość tych problemów można rozwiązać, konwertując łańcuch znaków na liczbę całkowitą poprzez użycie `int` jako funkcji:\n"
"`int('5')` zwróci liczbę całkowitą `5`.\n"
"Podobnie, liczbę całkowitą można przekonwertować na łańcuch znaków za pomocą funkcji `str`:\n"
"`str(5)` zwróci łańcuch znaków `'5'`.\n"
"\n"
"Wykorzystując tę nową wiedzę, napraw ten uszkodzony program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Poprawny program powinien wypisać:\n"
"\n"
"    Starting... 1\n"
"    Starting... 2\n"
"    Starting... 3\n"
"    Go!\n"
"\n"
"Twoje rozwiązanie powinno działać dla dowolnej wartości zmiennej `number`."

msgid "pages.Types.steps.format_board_with_numbers.text"
msgstr ""
"Napisz ulepszoną wersję `format_board`, która zawiera numery wierszy i kolumn, takie jak:\n"
"\n"
"     123\n"
"    1XOX\n"
"    2 OO\n"
"    3 X\n"
"\n"
"Powinna działać dla plansz o dowolnym, jednocyfrowym rozmiarze. Oto przypadek testowy:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.final_text.text"
msgstr ""
"Świetnie!\n"
"\n"
"Przy okazji, kiedy musisz połączyć łańcuchy znaków i liczby, pamiętaj, że możesz również\n"
"używać f-stringów. Często wyglądają one lepiej.\n"
"\n"
"Nauczyłeś się o typach w Pythonie i jak unikać wspólnych błędów poprzez konwersję typów.\n"
"Kontynuuj prace nad resztą projektu!"

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.0.text"
msgstr "At what points is this code broken?"

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.1.text"
msgstr "There are values that need to be converted to a different type."

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.2.text"
msgstr "Specifically there's a `str` that needs to be converted to an `int`."

msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.3.text"
msgstr "And an `int` that needs to be converted to a `str`."

msgid "pages.Types.steps.format_board_with_numbers.hints.0.text"
msgstr ""
"You can start by using the ideas from your previous solution to "
"`format_board`. Using `join` is highly recommended!"

msgid "pages.Types.steps.format_board_with_numbers.hints.1.text"
msgstr "The first line has to be treated separately from the rest."

msgid "pages.Types.steps.format_board_with_numbers.hints.2.text"
msgstr "Remember that `range` yields numbers in the way: 0, 1, 2, ..."

msgid "pages.Types.steps.format_board_with_numbers.hints.3.text"
msgstr "We want numbers on the first line like this: 1, 2, 3..."

msgid "pages.Types.steps.format_board_with_numbers.hints.4.text"
msgstr ""
"Each number has to be converted to a string before being added to the first "
"row!"

msgid "pages.Types.steps.format_board_with_numbers.hints.5.text"
msgstr "For the rows of the board itself, do something similar."

msgid "pages.Types.steps.format_board_with_numbers.hints.6.text"
msgstr ""
"Start with a list consisting only of the first line that you built above."

msgid "pages.Types.steps.format_board_with_numbers.hints.7.text"
msgstr ""
"Add each row's string to the list, then join the list with a newline "
"character."

msgid "pages.Types.title"
msgstr "Types"

msgid ""
"pages.Types.steps.fixing_type_errors_with_conversion.disallowed.0.label"
msgstr "f-strings"
