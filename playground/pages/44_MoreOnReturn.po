#
msgid ""
msgstr ""

msgid "pages.MoreOnReturn.steps.double_return_in_one_function.text"
msgstr ""
"Czasami `return` może być źródłem zamieszania i błędów dla początkujących uczniów.\n"
"Dowiedzmy się więcej o tym, jak ona działa.\n"
"\n"
"Uruchom ten kod:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.MoreOnReturn.steps.cannot_return_multiple_values.text"
msgstr ""
"Gdy instrukcja `return` zostanie wykonana, funkcja się zakończy, a reszta kodu zostanie zignorowana.\n"
"Oznacza to, że każdy kod bezpośrednio po instrukcji `return` w tym samym bloku jest *nieosiągalny*:\n"
"`return 2` *nigdy* nie zostanie wykonany, bez względu na to, ile razy uruchomimy tę funkcję!\n"
"\n"
"***Tylko jeden `return` może być wykonany przy każdym wywołaniu funkcji, a następnie wykonanie się zatrzymuje.***\n"
"\n"
"Wiele instrukcji `return` może być nadal użyteczne, gdy są poprawnie używane, np. w bloku `if-else`:\n"
"\n"
"__code0__\n"
"\n"
"Powszechnym błędem jest niezrozumienie działania `return` w pętlach `for`. Spróbuj następującego kodu:\n"
"\n"
"    __copyable__\n"
"__code1__"

msgid "pages.MoreOnReturn.steps.return_ends_whole_function.text"
msgstr ""
"Na pierwszy rzut oka może się wydawać intuicyjne, aby `return` zwracał jedną wartość dla każdej iteracji w pętli `for`.\n"
"Ale to nie działa w taki sposób!\n"
"Jeśli przyjrzysz się kodowi za pomocą `snoop` lub Python tutor, zobaczysz, że funkcja zwraca 2 podczas pierwszej\n"
"iteracji pętli, a następnie natychmiast się kończy.\n"
"\n"
"Nawet jeśli istnieje tylko jedna instrukcja `return`, zostanie ona wykonana tylko raz i zwróci jedną wartość.\n"
"Jeśli chcesz zwrócić kilka wartości, zwróć listę:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Co się stanie, jeśli mamy do czynienia z zagnieżdżonymi pętlami? Wypróbuj następującą funkcję:\n"
"\n"
"    __copyable__\n"
"__code1__"

msgid "pages.MoreOnReturn.steps.break_vs_return.text"
msgstr ""
"Tak jak wcześniej, `return` ***kończy działanie całej funkcji***, łącznie ze wszystkimi pętlami.\n"
"\n"
"Wcześniej pokazaliśmy [jak zatrzymać pętlę za pomocą `break`](#UsingBreak).\n"
"Zmień `return letter` na `break` i zobacz, jaka jest różnica."

msgid "pages.MoreOnReturn.steps.final_text.text"
msgstr ""
"W przeciwieństwie do `return`, `break` zatrzymuje tylko najbardziej wewnętrzną pętlę, w której jest używany, w tym przypadku `for number in range(3):`.\n"
"Oto dokładnie co się dzieje:\n"
"\n"
"- Dla `letter = b`, linia `print(f\"{letter} {number}\")` jest wykonana tylko dla `number = 0`,\n"
"- potem wewnętrzna pętla jest zatrzymywana przez `break`, ale\n"
"- zewnętrzna pętla kontynuuje swoje wykonanie, przechodząc do następnej litery `c`\n"
"- która jest wykonana w całości, ponieważ nie powoduje ona wyzwolenia instrukcji `break`."

msgid "pages.MoreOnReturn.title"
msgstr "`return` ends the function call"

msgid "pages.MoreOnReturn.steps.break_vs_return.requirements"
msgstr ""
"Run the same code as in the previous step, but replace the whole last line "
"of the function (`return letter`) with just `break`."
