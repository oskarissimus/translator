#
msgid ""
msgstr ""

msgid "pages.BuildingNewLists.steps.double_numbers.text"
msgstr ""
"Listy i łańcuchy znaków mają wiele wspólnego.\n"
"Na przykład, możesz dodać dwie listy, aby połączyć je razem w nową listę.\n"
"Możesz także stworzyć pustą listę, która nie ma żadnych elementów.\n"
"Sprawdź to sam:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Mając tę wiedzę, napisz program, który bierze listę liczb\n"
"i wypisuje listę, na której każda liczba została podwojona. Na przykład, mając:\n"
"\n"
"__code1__\n"
"\n"
"to powinno wydrukować:\n"
"\n"
"__code2__"

msgid "pages.BuildingNewLists.steps.filter_numbers.text"
msgstr ""
"Świetnie!\n"
"\n"
"Gdy chcesz dodać pojedynczy element na koniec listy, zamiast:\n"
"\n"
"__code0__\n"
"\n"
"częściej używa się:\n"
"\n"
"__code1__\n"
"\n"
"Nie ma między nimi dużych różnic, ale `.append`\n"
"będzie bardziej zrozumiałe i czytelne dla większości ludzi.\n"
"\n"
"Teraz użyj `.append`, aby napisać program, który bierze listę liczb i\n"
"wypisuje nową listę zawierającą tylko te liczby, które są większe niż 5.\n"
"\n"
"Na przykład, mając:\n"
"\n"
"__code2__\n"
"\n"
"to powinno wydrukować:\n"
"\n"
"__code3__"

msgid "pages.BuildingNewLists.steps.final_text.text"
msgstr "Fantastycznie! Robimy świetne postępy."

msgid "pages.BuildingNewLists.steps.double_numbers.hints.0.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = separator.join(words)  # Połącz słowa z listy używając separatora\n"
"\n"
"# Poniższy kod pokazuje, jak można pomnożyć liczby używając `*`\n"
"liczba1 = 3\n"
"liczba2 = 4\n"
"wynik_mnozenia = liczba1 * liczba2\n"
"print(f\"Wynik mnożenia: {wynik_mnozenia}\")\n"
"```"

msgid "pages.BuildingNewLists.steps.double_numbers.hints.1.text"
msgstr ""
"```python\n"
"words = __code0__  # na przykład ['jabłko', 'banan', 'wiśnia']\n"
"separator = __code1__  # na przykład ', '\n"
"\n"
"result = ''  # Zacznij od pustego łańcucha znaków\n"
"first_iteration = True  # Zmienna do sprawdzenia, czy to pierwsza iteracja\n"
"\n"
"# Ten program jest bardzo podobny do programów, które napisałeś do budowania łańcuchów znaków znak po znaku.\n"
"for word in words:\n"
"    if first_iteration:\n"
"        result += word  # Dodaj słowo bez separatora\n"
"        first_iteration = False  # Ustaw wartość na False, ponieważ to już nie będzie pierwsza iteracja\n"
"    else:\n"
"        result += separator + word  # W następnych iteracjach dodaj separator przed słowem\n"
"\n"
"print(result)\n"
"```"

msgid "pages.BuildingNewLists.steps.double_numbers.hints.2.text"
msgstr ""
"```python\n"
"nowa_lista = []  # Utwórz nową pustą listę\n"
"\n"
"# Następnie zbuduj ją element po elemencie w pętli for.\n"
"for i in range(__code0__):  # Na przykład range(5) dla i od 0 do 4\n"
"    nowa_lista.append(__code1__)  # Dodaj element do listy, na przykład element może być 'element' + str(i)\n"
"\n"
"print(nowa_lista)\n"
"```"

msgid "pages.BuildingNewLists.steps.double_numbers.hints.3.text"
msgstr ""
"```python\n"
"# Zacznij od pustej listy.\n"
"lista = []\n"
"\n"
"# Tutaj możesz dodawać elementy do listy w pętli for lub w inny sposób zależnie od potrzeb programu.\n"
"for element in __code0__:  # Przykładowe źródło elementów do dodania\n"
"    lista.append(element)  # Dodaj element do listy\n"
"\n"
"print(lista)\n"
"```"

msgid "pages.BuildingNewLists.steps.double_numbers.hints.4.text"
msgstr ""
"```python\n"
"# Możesz utworzyć listę z jednym elementem `x`, po prostu pisząc `[x]`.\n"
"element_x = __code0__  # Na przykład 'wartość'\n"
"lista_z_jednym_elementem = [element_x]\n"
"\n"
"print(lista_z_jednym_elementem)\n"
"```"

msgid "pages.BuildingNewLists.steps.double_numbers.hints.5.text"
msgstr ""
"```python\n"
"# Możesz dodać element do listy, dodając listę zawierającą jeden element.\n"
"lista = __code0__  # Na przykład ['jabłko', 'banan']\n"
"element_do_dodania = __code1__  # Na przykład 'wiśnia'\n"
"\n"
"lista += [element_do_dodania]  # Dodanie elementu do istniejącej listy poprzez dodanie listy z tym elementem\n"
"\n"
"print(lista)\n"
"```"

msgid "pages.BuildingNewLists.steps.filter_numbers.hints.0.text"
msgstr ""
"```python\n"
"# To jest bardzo podobne do poprzedniego ćwiczenia.\n"
"lista = __code0__  # Na przykład ['a', 'b', 'c']\n"
"element_do_dodania = __code1__  # Na przykład 'd'\n"
"\n"
"lista.append(element_do_dodania)  # Dodaj element do listy przy użyciu metody append\n"
"\n"
"print(lista)\n"
"```"

msgid "pages.BuildingNewLists.steps.filter_numbers.hints.1.text"
msgstr ""
"```python\n"
"lista = __code0__  # Na przykład lista z elementami do sprawdzenia\n"
"nowa_lista = []\n"
"\n"
"# Różnica polega na tym, że czasami powinieneś pominąć dodawanie elementu do nowej listy.\n"
"for element in lista:\n"
"    if __code1__:  # Warunek decydujący czy dodać element do nowej listy, na przykład 'if element % 2 == 0' dla elementów parzystych\n"
"        nowa_lista.append(element)  # Dodaj element do nowej listy jeśli warunek jest spełniony\n"
"\n"
"print(nowa_lista)\n"
"```"

msgid "pages.BuildingNewLists.steps.filter_numbers.hints.2.text"
msgstr ""
"```python\n"
"# Użyj instrukcji warunkowej `if`.\n"
"lista = __code0__  # Przykładowa lista, z której będziemy wybierać elementy\n"
"nowa_lista = []\n"
"\n"
"for element in lista:\n"
"    if __code1__:  # Warunek, który musi być spełniony, np. 'element > 10'\n"
"        nowa_lista.append(element)  # Dodaj element do nowej listy, jeżeli warunek jest prawdziwy\n"
"\n"
"print(nowa_lista)\n"
"```"

msgid "pages.BuildingNewLists.steps.filter_numbers.hints.3.text"
msgstr ""
"```python\n"
"# Użyj operatora porównania, aby przetestować, czy liczba jest wystarczająco duża, aby ją dodać.\n"
"lista = __code0__  # Lista liczb do przetestowania\n"
"nowa_lista = []\n"
"\n"
"for liczba in lista:\n"
"    if liczba __code1__:  # Operator porównania, na przykład '>', i wartość do porównania, np. '> 10'\n"
"        nowa_lista.append(liczba)  # Dodaj liczbę do nowej listy, jeśli spełnia warunek\n"
"\n"
"print(nowa_lista)\n"
"```"

msgid "pages.BuildingNewLists.title"
msgstr "Building New Lists"

msgid "pages.BuildingNewLists.steps.filter_numbers.disallowed.0.message"
msgstr ""
"Well done, that's correct! However, you should use `.append()` instead of "
"`+=`."
