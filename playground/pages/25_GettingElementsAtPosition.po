#
msgid ""
msgstr ""

msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.text"
msgstr ""
"Pętle są świetne, ale często chcesz po prostu pobrać pojedynczy element z listy znanego położenia.\n"
"Oto jak to zrobić:\n"
"\n"
"__program_indented__"

msgid "pages.GettingElementsAtPosition.steps.index_error.text"
msgstr ""
"Ogólnie rzecz biorąc, możesz uzyskać element na pozycji `i` za pomocą `words[i]`. Operacja ta nazywana jest *indeksowaniem* i pozycja, na której się znajduje, to *indeks*.\n"
"\n"
"Prawdopodobnie zauważyłeś, że pierwszy indeks to 0, a nie 1. W programowaniu liczenie zaczyna się od 0. Wydaje się to dziwne, ale tak właśnie robi większość języków programowania i ogólnie uważa się to za lepsze rozwiązanie.\n"
"\n"
"Oznacza to również, że ostatni indeks na tej liście czterech elementów to 3. Co się stanie, jeśli spróbujesz uzyskać indeks większy niż ten?"

msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.text"
msgstr ""
"Dokładnie tak. `words[4]` i dalsze nie istnieją, więc próba ich użycia skończy się błędem.\n"
"Ten pierwszy program jest nieco powtarzalny. Ulepszymy go, używając listy i pętli!\n"
"\n"
"__program_indented__"

msgid "pages.GettingElementsAtPosition.steps.range_len.text"
msgstr ""
"To już lepiej, ale wypisywanie \"[0, 1, 2, ...]\" nie jest najlepszym rozwiązaniem, szczególnie gdy lista staje się długa.\n"
"Istnieje przydatna funkcja `range`, która wykonuje tę czynność za ciebie. Zamień \"[0, 1, 2, 3]\" na `range(4)`,\n"
"czyli `indices = range(4)`."

msgid "pages.GettingElementsAtPosition.steps.final_text.text"
msgstr ""
"Jeśli nadal nie czujesz się do końca komfortowo z `range` lub `len`, poćwicz i eksperymentuj z nimi przez chwilę.\n"
"Oto kilka prostych ćwiczeń, które możesz wypróbować samodzielnie, jeśli chcesz.\n"
"\n"
"- Wydrukuj liczby od `1` do `100` włącznie.\n"
"- Wydrukuj swoje imię 100 razy.\n"
"- Wydrukuj każde słowo z listy `words` prócz ostatniego.\n"
"- Wydrukuj każde słowo z `words` w odwrotnej kolejności, tzn. wydrukuj ostatnie słowo, potem przedostatnie słowo itd.\n"
"- Powróć do dodatkowego zadania na końcu strony [Wprowadzenie do List](#IntroducingLists),\n"
"niezależnie od tego, czy udało ci się je zakończyć. Teraz jest to dużo łatwiejsze z `range` i `len`!\n"
"\n"
"Kiedy będziesz gotowy, kontynuuj na następnej stronie dla czegoś nieco bardziej wymagającego."

msgid "pages.GettingElementsAtPosition.steps.index_error.program"
msgstr "words[4]"

msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"\n"
"print(words[0])\n"
"print(words[1])\n"
"print(words[2])\n"
"print(words[3])"

msgid "pages.GettingElementsAtPosition.steps.range_len.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = range(4)\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

msgid "pages.GettingElementsAtPosition.title"
msgstr "Getting elements at a position, `range()`, and `len()`"

msgid "pages.GettingElementsAtPosition.steps.indices_out_of_bounds.text"
msgstr "Now try `__program__` in the shell."

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.0"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.2"
msgstr ""
"0\n"
"This\n"
"1\n"
"is\n"
"2\n"
"a\n"
"3\n"
"list"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.3"
msgstr ""
"This\n"
"0\n"
"is\n"
"1\n"
"a\n"
"2\n"
"list\n"
"3"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.4"
msgstr ""
"0\n"
"1\n"
"2\n"
"3\n"
"This\n"
"is\n"
"a\n"
"list"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.5"
msgstr ""
"This\n"
"is\n"
"a\n"
"list\n"
"0\n"
"1\n"
"2\n"
"3"

msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = [0, 1, 2, 3]\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.0.text"
msgstr "Remember that earlier we used `range(4)`."

msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.1.text"
msgstr ""
"This time, it should work for any list. What if the list has 5 elements, or "
"10?"

msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.2.text"
msgstr "Combine the two functions you learned!"

msgid "pages.GettingElementsAtPosition.steps.print_indices_and_words.text"
msgstr ""
"So in general, the valid indices are:\n"
"\n"
"__code0__\n"
"\n"
"Now we can fix the program from earlier to work with any list. Fill in the `...`:\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"    for index in ...:\n"
"        print(index)\n"
"        print(words[index])\n"
"\n"
"For the given example value of `words` it should print:\n"
"\n"
"    0\n"
"    This\n"
"    1\n"
"    is\n"
"    2\n"
"    a\n"
"    3\n"
"    list"

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.0.text"
msgstr ""
"To access the last element of the list, you'll need the index of the last "
"position."

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.1.text"
msgstr ""
"If the list has 2 elements, the first element is at index 0, so the last "
"element is at index 1."

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.2.text"
msgstr ""
"Likewise, if the list had 3 elements, the last element would be at index 2."

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.3.text"
msgstr "Do you see a pattern between those numbers? How can you express it?"

msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.4.text"
msgstr "Can you come up with a general solution that works for any length?"

msgid "pages.GettingElementsAtPosition.steps.print_last_element.text"
msgstr ""
"Exercise: for any non-empty list `words`, print the last element. For example, if\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"your program should print `list`."

msgid ""
"pages.GettingElementsAtPosition.steps.printing_the_range.output_prediction_choices.4"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

msgid "pages.GettingElementsAtPosition.steps.printing_the_range.text"
msgstr ""
"As you can see, the result is the same. Try this:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid ""
"pages.GettingElementsAtPosition.steps.range_almost_the_same_as_list.text"
msgstr ""
"`range(4)` is the same thing as `[0, 1, 2, 3]` ... almost. Try `__program__`"
" in the shell."

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.0"
msgstr "range(4)"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.1"
msgstr "range(0, 4)"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.2"
msgstr "list(range(4))"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.3"
msgstr "list(range(0, 4))"

msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.4"
msgstr "range(0, 1, 2, 3)"

msgid "pages.GettingElementsAtPosition.steps.range_versus_list.text"
msgstr ""
"That's probably a bit surprising. If you're curious, the `0` represents the start of the range.\n"
"`0` is the default start, so `range(4)` is equal to `range(0, 4)`.\n"
"`4` is the end of the range, but the end is always excluded, so the last value is `3`.\n"
"If you're confused now, don't worry about it.\n"
"\n"
"There's a good reason for why `range(4)` is not actually a list - it makes programs faster and more efficient.\n"
"It's not worth explaining that more right now.\n"
"\n"
"But you can easily convert it to a list: try `__program__` in the shell."

msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"print(len(words))"

msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.text"
msgstr ""
"That's just a demonstration to let you see a range in a more familiar form.\n"
"You should almost never actually do that.\n"
"\n"
"If you're feeling overwhelmed, don't worry! All you need to know is that `range(n)`\n"
"is very similar to the list:\n"
"\n"
"__code0__\n"
"\n"
"By the way, you can get the number of elements in a list (commonly called the *length*) using the `len` function.\n"
"Try it by running this code:\n"
"\n"
"    __copyable__\n"
"__code1__"

msgid "pages.GettingElementsAtPosition.steps.index_error.requirements"
msgstr "Run something like `words[3]` but replace `3` with a bigger number."

msgid "pages.GettingElementsAtPosition.steps.range_len.requirements"
msgstr ""
"Run the same program from the previous step, but replace the second line "
"`indices = [0, 1, 2, 3]` with `indices = range(4)`."
