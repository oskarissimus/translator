#
msgid ""
msgstr ""

msgid "pages.NestedListAssignment.steps.modify_list_in_function.text"
msgstr ""
"Widzieliśmy, jak uzyskać dane wejściowe od użytkownika, teraz użyjmy tego, aby faktycznie umieścić pionki\n"
"na planszy i zagrać w grę. Na początek wypróbuj ten kod:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.NestedListAssignment.steps.nested_assignment_two_lines.text"
msgstr ""
"Zauważ, jak wywołanie `play_move(game_board, 'X')` faktycznie *modyfikuje* `game_board` bezpośrednio.\n"
"Zmienna `board` wewnątrz wywołania `play_move` i zmienna `game_board` wewnątrz wywołania `play_game` wskazują na ten sam obiekt listy.\n"
"Nie ma kopiowania. Python Tutor jest dobry w pokazywaniu tego za pomocą strzałek.\n"
"\n"
"To również oznacza, że w tym przypadku nie ma potrzeby, aby `play_move` coś zwracało,\n"
"może po prostu zmodyfikować `board`, a wywołujący (w tym przypadku `play_game`) zobaczy efekt.\n"
"\n"
"Jednak nasza plansza jest dwuwymiarowa, reprezentowana przez zagnieżdżoną listę.\n"
"Więc musimy przypisać `player` do elementu listy wewnętrznej, coś na zasadzie:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.NestedListAssignment.steps.nested_assignment_input.text"
msgstr ""
"Te dwie linie:\n"
"\n"
"__code0__\n"
"\n"
"mogą zostać połączone w jedną:\n"
"\n"
"__code1__\n"
"\n"
"Te dwa fragmenty kodu są niemal dokładnie równoważne. Python najpierw ocenia `board[1]`, aby *uzyskać* listę wewnętrzną, podczas gdy `[0] = ...` ustawia element `board[1]`.\n"
"Możesz zobaczyć wartość `board[1]` w `birdseye`, ponieważ jest to wyrażenie, i właściwie możesz zastąpić je dowolnym innym wyrażeniem.\n"
"\n"
"Teraz, gdy wiesz, jak ustawić elementy w zagnieżdżonych listach, czas to uczynić interaktywnym!\n"
"Napisz własną wersję funkcji `play_move`, która pobiera dane wejściowe od użytkownika, aby ustalić, gdzie zagrać, zamiast grać zawsze na `board[1][0]`.\n"
"Powinna ona wywołać funkcję `input()` dwukrotnie, aby użytkownik mógł podać wiersz i kolumnę jako dwa oddzielne liczby. Ponadto, nasi użytkownicy nie są programistami, więc zaczynają liczyć od 1, a nie 0.\n"
"\n"
"Na przykład, jeśli użytkownik wpisze te dane wejściowe:\n"
"\n"
"__code2__\n"
"\n"
"to znaczy, że chcą wykonać ruch w drugim wierszu i pierwszej kolumnie, co jest takie samo jak w naszym pierwotnym przykładzie.\n"
"\n"
"Oto jakiś początkowy kod:\n"
"\n"
"    __copyable__\n"
"__code3__\n"
"\n"
"To wywołuje funkcję `play_move` dwa razy, więc użytkownik będzie musiał podać dwie pary liczb.\n"
"Oto przykład tego, jak powinna wyglądać 'gra':\n"
"\n"
"     123\n"
"    1\n"
"    2\n"
"    3\n"
"\n"
"    X na ruch:\n"
"\n"
"__code2__\n"
"     123\n"
"    1\n"
"    2X\n"
"    3\n"
"\n"
"    O na ruch:\n"
"\n"
"    1\n"
"    3\n"
"     123\n"
"    1  O\n"
"    2X\n"
"    3\n"
"\n"
"Nie musisz używać dostarczonego kodu dokładnie, to tylko, aby dać ci poczucie tego, co się dzieje.\n"
"Ważne jest, aby twoja funkcja `play_move` poprawnie modyfikowała argument `board`.\n"
"Nie musi niczego zwracać ani wyświetlać, to nie będzie sprawdzane.\n"
"\n"
"Możesz zakładać, że użytkownik zawsze poda prawidłowe liczby. Później dowiemy się, jak radzić sobie z nieprawidłowymi danymi wejściowymi, takimi jak liczby spoza zakresu lub dane wejściowe, które w ogóle nie są liczbami."

msgid "pages.NestedListAssignment.steps.final_text.text"
msgstr ""
"Świetnie! Jesteś już prawie gotowy, żeby złożyć to wszystko w całość, "
"kontynuuj!"

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.0.text"
msgstr ""
"Your function needs to call `input()` twice. Input isn't passed to "
"`play_move` as an argument."

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.1.text"
msgstr "`input()` always returns a string."

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.2.text"
msgstr "A string that looks like a number is still a string, not a number."

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.3.text"
msgstr "List indices have to be numbers, not strings."

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.4.text"
msgstr ""
"If the board is 3x3, the user might input 1, 2, or 3 for each coordinate."

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.5.text"
msgstr "What are the valid indices of a list of length 3?"

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.6.text"
msgstr "You need to take the input of 1, 2, or 3 and turn it into 0, 1, or 2."

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.7.text"
msgstr "You also need to be able to handle bigger boards, like 9x9 or beyond."

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.8.text"
msgstr "You can't do maths with strings, only numbers."

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.9.text"
msgstr "How can you convert a string to a number?"

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.10.text"
msgstr ""
"Once you've got two numbers, you need to modify the nested list `board` with"
" them."

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.11.text"
msgstr "The code for this has been shown to you above."

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.12.text"
msgstr ""
"You just need to use the numbers from user input instead of the hardcoded 1 "
"and 0."

msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.13.text"
msgstr "You can use nested subscripting in one line, or do it in two steps."

msgid "pages.NestedListAssignment.title"
msgstr "Nested List Assignment: Playing Moves on the Board"

msgid "pages.NestedListAssignment.steps.nested_assignment_input.requirements"
msgstr ""
"Your function should modify the `board` argument. It doesn't need to "
"`return` or `print` anything."
