#
msgid ""
msgstr ""

msgid "pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate.text"
msgstr ""
"Przyjrzyjmy się, jak pracować z listami. Załóżmy, że mamy listę `nums = [1, 2, 3]`. Możesz użyć:\n"
"\n"
"- **`append`**: Dodaje element na końcu listy. `nums.append(4)` zmienia listę na `[1, 2, 3, 4]`.\n"
"- **`len`**: Zwraca liczbę elementów. `len(nums)` wynosi `3`.\n"
"- **`range`**: `range(n)` to obiekt podobny do listy numerów od `0` do `n - 1`. Oznacza to, że zawiera `n` liczb. W szczególności, `range(len(nums))` jest jak `[0, 1, 2]`, które są indeksami każdego elementu w `nums`.\n"
"- **`[]` (subskrypcja/indeksowanie)**: Pobiera wartość przy danym indeksie. `nums[0]` to `1`, `nums[1]` to `2`, `nums[2]` to `3`.\n"
"- **`+`**: Łączy listy. `nums + [4, 5]` to `[1, 2, 3, 4, 5]`.\n"
"\n"
"Zauważ, że `nums.append(4)` modyfikuje istniejącą listę `nums`, podczas gdy `nums + [4, 5]` tego nie robi.\n"
"Jednym ze sposobów na zachowanie wartości `nums + [4, 5]` jest przypisanie jej do *nowej zmiennej*.\n"
"Uruchom następujący kod:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text"
msgstr ""
"Jak widzisz, `+` nie modyfikuje `nums`, ale `append` tak.\n"
"\n"
"Oto kilka nowych rzeczy.\n"
"\n"
"**`przypisanie subskrypcji`**: Ustawia wartość przy danym indeksie (zastępując wartość, która była tam wcześniej) używając składni\n"
"\n"
"__code0__\n"
"\n"
"Zgłasza błąd, jeśli `index` nie jest poprawnym indeksem `some_list`. Na przykład uruchom ten program:\n"
"\n"
"__program_indented__"

msgid "pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text"
msgstr ""
"**`index`**: Zwraca pierwszy indeks wartości na liście, używając składni\n"
"\n"
"__code0__\n"
"\n"
"Zgłasza błąd, jeśli wartości nie ma na liście. Na przykład uruchom tę linię w konsoli:\n"
"\n"
"__program_indented__"

msgid "pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text"
msgstr ""
"**`pop`**: Usuwa i zwraca element o danym *indeksie* używając składni\n"
"\n"
"__code0__\n"
"\n"
"Bez argumentu, tj. po prostu `some_list.pop()`, zostanie usunięty i zwrócony ostatni element.\n"
"Zgłasza błąd, jeśli `index` nie jest poprawnym indeksem `some_list`. Na przykład uruchom ten program:\n"
"\n"
"__program_indented__"

msgid "pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text"
msgstr ""
"**`remove`**: Usuwa pierwsze wystąpienie danego *wartości* używając składnii\n"
"\n"
"__code0__\n"
"\n"
"Zgłasza błąd, jeśli wartości nie ma na liście. Na przykład uruchom ten program:\n"
"\n"
"__program_indented__"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.text"
msgstr ""
"Teraz rozwiążesz cztery krótkie ćwiczenia dotyczące tych pojęć.\n"
"Poniżej znajduje się lista poprawnych i błędnych linii kodu wymieszanych razem.\n"
"Każde nadchodzące ćwiczenie ma rozwiązanie, które zawiera dokładnie jedną z poniższych linii,\n"
"i musisz znaleźć poprawną linię z tej listy.\n"
"\n"
"__code0__\n"
"\n"
"Oto niekompletny program:\n"
"\n"
"    __copyable__\n"
"__code1__\n"
"\n"
"Zamień środkową linię jedną linią z listy powyżej. Końcowy program powinien zmodyfikować `x`, przenosząc pierwszy element na koniec, tak aby wydrukował `['b', 'c', 'a']`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.text"
msgstr ""
"Dobra robota. W następnym ćwiczeniu zacznij od tego samego niekompletnego programu:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Wybierz linię kodu z listy, która nadpisze ostatni element `x` pierwszym elementem,\n"
"tak aby teraz wydrukowało `['a', 'b', 'a']`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.text"
msgstr ""
"Świetnie!\n"
"\n"
"Możesz zauważyć, że praca z ostatnim elementem za pomocą `x[len(x) - 1]` jest nieco uciążliwa.\n"
"To samo można osiągnąć za pomocą `x[-1]`.\n"
"Podobnie, przedostatni element `x[len(x) - 2]` można zapisać jako `x[-2]` i tak dalej.\n"
"Python pozwala nam także liczyć indeksy wstecz, zaczynając od ostatniego elementu jako `-1`:\n"
"\n"
"| Indeks     | Pierwszy el. | Drugi el. | Trzeci el.  | ... | Przedostatni el. | Ostatni el.  |\n"
"|------------|---------------|------------|-------------|-----|-----------------|--------------|\n"
"| Do przodu  | `0`          | `1`        | `2`         | ... | `len(x) - 2`    | `len(x) - 1` |\n"
"| Do tyłu    | `-len(x)`    |`-len(x) + 1`|`-len(x) + 2`| ... | `-2`            | `-1`         |\n"
"\n"
"Następne ćwiczenie:\n"
"\n"
"Tym razem, zamiast modyfikować listę `x`, utworzysz nową listę `y`:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"`y` powinna być taka sama jak `x`, ale powinna także zawierać powtórzony na końcu pierwszy element.\n"
"Dlatego program wydrukuje `['a', 'b', 'c', 'a']`."

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.text"
msgstr ""
"Dobra robota. Teraz ostatnie ćwiczenie:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Zastąp środkową linię `x.remove(0)` linią z listy, która robi to samo."

msgid "pages.FunctionsAndMethodsForLists.steps.final_text.text"
msgstr "Dziękuję!"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = ['a', 'b', 'c']`, "
"then one line copied exactly from the list (no additions), and `print(x)`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.1.text"
msgstr "Moving the first element to the end requires two things."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.2.text"
msgstr "Removing the first element..."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.3.text"
msgstr "and adding it to the end."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.4.text"
msgstr "Which functions/methods can you use for this?"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.5.text"
msgstr "Remember that the first index is 0."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = ['a', 'b', 'c']`, "
"then one line copied exactly from the list (no additions), and `print(x)`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.1.text"
msgstr "You need to get the value of the first element in `x`..."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.2.text"
msgstr "and assign that value to the last position in `x`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.3.text"
msgstr "How do you assign a value at a specific index in the list?"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.4.text"
msgstr "What are the indices of the first and last last elements in `x`?"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = ['a', 'b', 'c']`, "
"`y = ` followed by one line copied exactly from the list, and `print(y)`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.1.text"
msgstr "Which lines of code create a new list rather than modifying?"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.2.text"
msgstr "`x` is a list. Each element of `x` is a string."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.3.text"
msgstr ""
"You can add lists together, you can add strings together, but you can't add "
"a string and a list."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.4.text"
msgstr "How do you make a list containing one element?"

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = [1, 2, 0, 3]`, one "
"line copied exactly from the list (no additions), and `print(x)`."

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.1.text"
msgstr "What does `x.remove(0)` do?"

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.2.text"
msgstr "It removes an element!"

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.3.text"
msgstr "Which function/method can also remove an element?"

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.4.text"
msgstr ""
"The other function/method can't simply be told 'remove 0', it needs a "
"different kind of information."

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.5.text"
msgstr "Specifically, it needs to be told where 0 is."

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.6.text"
msgstr "Which function/method provides that kind of information?"

msgid "pages.FunctionsAndMethodsForLists.title"
msgstr "Functions and Methods for Lists"

msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with"
" exactly one line from the long list of lines from before. You must choose "
"the correct line, there's only one right answer. Type in the line exactly. "
"Do not replace the `y = ` part, that should still be there just before the "
"line that you type in, on the same line."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with"
" exactly one line from the long list just before that. You must choose the "
"correct line, there's only one right answer. Type in the line exactly."

msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `x.remove(0)` with exactly one line"
" from the long list of lines from before. The line you choose should have "
"the same effect as `x.remove(0)`, so that the program prints `[1, 2, 3]`."

msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with"
" exactly one line from the long list in the previous step. You must choose "
"the correct line, there's only one right answer. Type in the line exactly."
