#
msgid ""
msgstr ""

msgid "pages.DefiningFunctions.steps.define_greet.text"
msgstr ""
"Widziałeś już, jak wywoływać funkcje takie jak `print()` i `len()`. Teraz nauczysz się, jak pisać własne funkcje, których ty lub inni ludzie można używać. To bardzo ważne, gdy programy stają się większe i bardziej skomplikowane.\n"
"\n"
"Oto prosty przykład:\n"
"\n"
"__program_indented__\n"
"\n"
"To definiuje funkcję o nazwie `greet`, która akceptuje jeden parametr. Poniżej definicji wywołujemy funkcję dwa razy.\n"
"Uruchom kod, aby zobaczyć, co się stanie."

msgid "pages.DefiningFunctions.steps.how_are_you.text"
msgstr ""
"Definicja funkcji to złożone wyrażenie. Tak jak `if` i `for`, posiada linię nagłówkową po której następuje wcięte ciało, które może zawierać jedno lub więcej wyrażeń.\n"
"\n"
"Dodaj kolejne wyrażenie do funkcji tak, aby wyglądała ona w następujący sposób:\n"
"\n"
"__code0__\n"
"\n"
"Następnie uruchom program ponownie."

msgid "pages.DefiningFunctions.steps.change_function_name.text"
msgstr ""
"Zauważ, jak zmieniło się wyjście programu. `How are you?` zostało wydrukowane dwa razy. Możesz myśleć o całym programie jako równoważnym z tym:\n"
"\n"
"__code0__\n"
"\n"
"Pokazuje to jedną z najbardziej użytecznych rzeczy dotyczących funkcji. Pozwalają one na wielokrotne używanie tego samego kodu bez konieczności jego powtarzania. To jakby pisanie programu w programie.\n"
"\n"
"Nagłówek definicji funkcji zawsze zawiera te części:\n"
"\n"
"1. Specjalne słowo kluczowe `def`, po którym następuje spacja.\n"
"2. Nazwę funkcji. Jest to jak nazwa zmiennej - możesz wybrać nazwę, którą chcesz, ale istnieją pewne ograniczenia, np. nie może zawierać spacji.\n"
"3. Parę nawiasów `(` i `)`\n"
"4. Zero lub więcej nazw parametrów pomiędzy nawiasami, oddzielone przecinkami, jeśli jest ich więcej niż jeden. Tutaj mamy jeden parametr o nazwie `name`.\n"
"5. Dwukropek `:`\n"
"\n"
"Wykonajmy proste ćwiczenia. Zmień nazwę funkcji z `greet` na `say_hello`.\n"
"Upewnij się, że cały program działa nadal jak wcześniej, ale nie zmieniaj niczego innego."

msgid "pages.DefiningFunctions.steps.change_parameter_name.text"
msgstr ""
"Dobrze! Teraz wykonaj podobne ćwiczenie: zmień nazwę parametru z `name` na "
"`person_name`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.text"
msgstr ""
"Dobrze wykonane!\n"
"\n"
"Teraz napisz własną funkcję o nazwie `print_twice`, która przyjmuje jeden argument `x` i drukuje ten argument dwa razy\n"
"na dwóch liniach.\n"
"\n"
"Na przykład, `print_twice(\"Hello\")` powinno dać wynik:\n"
"\n"
"__code0__\n"
"\n"
"Możesz przetestować swoją funkcję, wywołując ją po definicji funkcji, ale nie jest to wymagane."

msgid "pages.DefiningFunctions.steps.print_many.text"
msgstr ""
"Funkcje mogą mieć wiele parametrów. Oto przykład:\n"
"\n"
"__program_indented__"

msgid "pages.DefiningFunctions.steps.swap_parameters.text"
msgstr ""
"Zwróć uwagę na przecinki używane do oddzielania parametrów w definicji funkcji i argumenty w wywołaniu funkcji,\n"
"oraz na zgodność pomiędzy definicją a wywołaniem:\n"
"\n"
"    def print_many(thing, n):\n"
"                     ^    ^\n"
"                     |    |\n"
"      print_many(\"Hello\", 3)\n"
"\n"
"Więc wywołanie `print_many(\"Hello\", 3)` jest jak uruchomienie:\n"
"\n"
"__code0__\n"
"\n"
"Teraz kolejne proste ćwiczenie. Zamień miejscami parametry w nagłówku definicji funkcji tak, aby powstało:\n"
"\n"
"__code1__\n"
"\n"
"Jeśli to zrobisz i nic więcej, otrzymasz błąd. Popraw resztę programu, aby działała jak wcześniej.\n"
"*Nie zmieniaj ciała funkcji*."

msgid "pages.DefiningFunctions.steps.final_text.text"
msgstr ""
"Doskonale! Teraz masz solidne podstawy w zakresie definiowania funkcji."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.0.text"
msgstr ""
"You have to change the name in the function definition header, but that's "
"not all."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.1.text"
msgstr ""
"If you just change the name in the function definition header, what happens?"

msgid "pages.DefiningFunctions.steps.change_function_name.hints.2.text"
msgstr ""
"You get an error. Look at the message. What is it telling you? Where does "
"the error come from?"

msgid "pages.DefiningFunctions.steps.change_function_name.hints.3.text"
msgstr ""
"If your function is called `say_hello`, what does `greet(\"Alice\")` mean?"

msgid "pages.DefiningFunctions.steps.change_function_name.hints.4.text"
msgstr "You need to change exactly 3 lines of the program."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.5.text"
msgstr "In each line you change, change exactly one word."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.6.text"
msgstr ""
"Don't touch the body of the function. It should still have `print(\"How are "
"you?\")`."

msgid "pages.DefiningFunctions.steps.change_function_name.hints.7.text"
msgstr ""
"You should still call the function twice after defining it, with arguments "
"`\"Alice\"` and `\"Bob\"`."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.0.text"
msgstr ""
"You have to change the parameter name in the function definition header, but"
" that's not all."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.1.text"
msgstr ""
"If you just change the parameter name in the function definition header, "
"what happens?"

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.2.text"
msgstr ""
"You get an error. Look at the message. What is it telling you? Where does "
"the error come from?"

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.3.text"
msgstr ""
"If the parameter is called `person_name`, what does `print(f\"Hello "
"{name}!\")` mean?"

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.4.text"
msgstr "You need to change exactly 2 lines of the program."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.5.text"
msgstr "In each line you change, change exactly one word."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.6.text"
msgstr ""
"Don't touch the part after the function definition, i.e. "
"`say_hello(\"Alice\")` and `say_hello(\"Bob\")`."

msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.7.text"
msgstr ""
"You should still have two statements in the function body, including "
"`print(\"How are you?\")`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.0.text"
msgstr ""
"There's no clever problem solving here, this is just about following the "
"recipe for defining a function."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.1.text"
msgstr "Make sure you have all the parts of a function listed above."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.2.text"
msgstr "That includes `def`, `()`, and `:`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.3.text"
msgstr "Make sure your function is named `print_twice`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.4.text"
msgstr ""
"Make sure it accepts one parameter called `x` in between the parentheses "
"`()`."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.5.text"
msgstr "Look at the other functions defined above for help."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.6.text"
msgstr "Use the parameter inside the function body."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.7.text"
msgstr "Make sure the body is indented."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.8.text"
msgstr "The body needs two statements or a very simple loop."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.9.text"
msgstr ""
"Make sure that you don't call `print_twice` inside the function body of "
"`print_twice`. Check your indentation."

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.0.text"
msgstr ""
"The only change to the function definition should be the swapping of "
"parameters as instructed, nothing else."

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.1.text"
msgstr "You need to fix the call to `print_many`."

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.2.text"
msgstr ""
"If the function is defined as `def print_many(n, thing)`, what does "
"`print_many(\"Hello\", 3)` mean?"

msgid "pages.DefiningFunctions.steps.swap_parameters.hints.3.text"
msgstr "We still want `thing = \"Hello\"` and `n = 3`."

msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.0"
msgstr ""
"Hello Alice!\n"
"How are you?\n"
"Hello Bob!\n"
"How are you?"

msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.1"
msgstr ""
"Hello Alice!\n"
"Hello Bob!\n"
"How are you?"

msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.2"
msgstr ""
"Hello Alice!\n"
"How are you?\n"
"Hello Bob!"

msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.2"
msgstr ""
"Hello\n"
"Hello\n"
"Hello"

msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.3"
msgstr "Hello"

msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.4"
msgstr ""
"H\n"
"e\n"
"l\n"
"l\n"
"o"

msgid "pages.DefiningFunctions.title"
msgstr "Defining Functions"

msgid "pages.DefiningFunctions.steps.how_are_you.requirements"
msgstr ""
"Add `print(\"How are you?\")` after `print(f\"Hello {name}!\")` with the same indentation.\n"
"Keep the two calls to `greet` after the definition as is."

msgid "pages.DefiningFunctions.steps.print_twice_exercise.requirements"
msgstr ""
"Write a program which defines a function called `print_twice` as described "
"above."
