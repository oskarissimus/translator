#
msgid ""
msgstr ""

msgid "pages.UsingBreak.steps.list_contains_exercise.text"
msgstr ""
"Ćwiczenie: napisz program, który bierze listę i wartość i sprawdza,\n"
"czy lista zawiera tę wartość. Na przykład, mając:\n"
"\n"
"    __no_auto_translate__\n"
"    things = ['This', 'is', 'a', 'list']\n"
"    thing_to_find = 'is'\n"
"\n"
"powinien wydrukować `True`, ale dla\n"
"\n"
"    __no_auto_translate__\n"
"    thing_to_find = 'other'\n"
"\n"
"powinien wydrukować `False`."

msgid "pages.UsingBreak.steps.final_text.text"
msgstr ""
"Miło słyszeć!\n"
"\n"
"Typowe rozwiązanie wygląda mniej więcej tak:\n"
"\n"
"__code0__\n"
"\n"
"Twoje rozwiązanie jest prawdopodobnie podobne. Jest w porządku, ale troszeczkę nieefektywne.\n"
"Dzieje się tak, ponieważ pętla będzie przeszukiwać całą listę, nawet jeśli znajdzie element na początku.\n"
"Możesz przerwać dowolną pętlę używając instrukcji `break`, tak jak tutaj:\n"
"\n"
"__code1__\n"
"\n"
"To rozwiązanie jest równie poprawne, ale omija zbędne iteracje i sprawdzenia, kiedy już znajdzie element.\n"
"Możesz użyć `snoop`, aby zobaczyć różnicę."

msgid "pages.UsingBreak.steps.list_contains_exercise.hints.0.text"
msgstr ""
"```python\n"
"# Potrzebujesz pętli.\n"
"lista = __code0__  # Lista liczb do przeanalizowania\n"
"nowa_lista = []\n"
"\n"
"for liczba in lista:\n"
"    if liczba __code1__:  # Użyj operatora porównania, aby sprawdzić, czy liczba jest wystarczająco duża\n"
"        nowa_lista.append(liczba)  # Dodaj liczbę do nowej listy, jeśli spełnia warunek\n"
"\n"
"print(nowa_lista)\n"
"```"

msgid "pages.UsingBreak.steps.list_contains_exercise.hints.1.text"
msgstr "You will need an `if` statement."

msgid "pages.UsingBreak.steps.list_contains_exercise.hints.2.text"
msgstr "You will need a comparison operator."

msgid "pages.UsingBreak.steps.list_contains_exercise.hints.3.text"
msgstr "Specifically `==`."

msgid "pages.UsingBreak.steps.list_contains_exercise.hints.4.text"
msgstr "You need a boolean variable that you print at the end."

msgid "pages.UsingBreak.steps.list_contains_exercise.hints.5.text"
msgstr ""
"If you find the element in the list you should set that variable to `True`."

msgid "pages.UsingBreak.steps.list_contains_exercise.hints.6.text"
msgstr "Once you've found the element, you can't unfind it."

msgid "pages.UsingBreak.steps.list_contains_exercise.hints.7.text"
msgstr ""
"That means that once you set the variable to `True`, it should never be set "
"to anything else after that."

msgid "pages.UsingBreak.steps.list_contains_exercise.hints.8.text"
msgstr "Don't use an `else`."

msgid "pages.UsingBreak.steps.list_contains_exercise.hints.9.text"
msgstr ""
"There is no reason to ever set the variable to `False` inside the loop."

msgid "pages.UsingBreak.title"
msgstr "Using `break` to end a loop early"
