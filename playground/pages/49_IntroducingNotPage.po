#
msgid ""
msgstr ""

msgid "pages.IntroducingNotPage.steps.IntroducingNot.text"
msgstr ""
"W przeciwieństwie do pozostałych dwóch operatorów logicznych `and` i `or`,\n"
"które są używane między dwoma wartościami logicznymi (nazywane operatorami *binarnymi*),\n"
"`not` jest używany przed tylko jedną wartością logiczną (nazywany operatorem *unarnym*).\n"
"Neguje on wyrażenie, do którego jest stosowany, trochę jak znak minus. Spróbuj w konsoli:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingNotPage.steps.NotFalse.text"
msgstr ""
"Teraz spróbuj następującego:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingNotPage.steps.NotTrueOrTrue.text"
msgstr ""
"Jaki jest priorytet `not` w porównaniu z `and` i `or`? Spróbuj następującego w `birdseye`:\n"
"\n"
"__code0__"

msgid "pages.IntroducingNotPage.steps.NotPriority.text"
msgstr ""
"Możesz zobaczyć w `birdseye`, że\n"
"\n"
"__code0__\n"
"\n"
"jest interpretowany przez Pythona jako\n"
"\n"
"__code1__\n"
"\n"
"a nie:\n"
"\n"
"__code2__\n"
"\n"
"Więc `not` ma wyższy priorytet niż `or`, jeżeli nie używamy nawiasów. To tak samo, jak\n"
"\n"
"__code3__\n"
"\n"
"oznacza:\n"
"\n"
"__code4__\n"
"\n"
"a nie\n"
"\n"
"__code5__\n"
"\n"
"`not` ma również wyższy priorytet niż `and`.\n"
"\n"
"Ponownie, najważniejsze jest, aby używać nawiasów lub dodatkowych zmiennych, gdy masz wątpliwości.\n"
"\n"
"Ćwiczenie: Załóżmy, że piszesz program do przetwarzania obrazów. Tylko niektóre rodzaje plików mogą być przetwarzane.\n"
"Jeśli użytkownik dostarczy plik, który nie może być przetworzony, chcesz wyświetlić błąd:\n"
"\n"
"__code6__\n"
"\n"
"Załóżmy, że pliki .png i .jpg mogą być przetwarzane, ale inne typy plików nie mogą.\n"
"Oto przykładowa funkcja do tego:\n"
"\n"
"    __copyable__\n"
"__code7__\n"
"\n"
"Jest ona dłuższa niż musi. Przepisz funkcję `invalid_image` tak, aby ciało funkcji składało się z jednej linii `return <expression>`,\n"
"czyli bez instrukcji `if`. Powinna przejść te same testy."

msgid "pages.IntroducingNotPage.steps.final_text.text"
msgstr ""
"Dobrze zrobione! Oto dwie poprawne rozwiązania:\n"
"\n"
"__code0__\n"
"\n"
"(jeśli jesteś ciekawy, są one równoważne ze względu na coś, co nazywa się prawem De Morgana)\n"
"\n"
"Zwróć również uwagę, że jest to kolejny ogólny wzorzec, który można uprościć: jeśli twój kod ma formę:\n"
"\n"
"__code1__\n"
"\n"
"gdzie `x` sam w sobie jest wartością logiczną, to można to uprościć do:\n"
"\n"
"__code2__"

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.0.text"
msgstr ""
"What if you were instead asked to simplify this related but opposite function?\n"
"\n"
"__code0__"

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.1.text"
msgstr ""
"In that case there is a standard simplification trick you can apply that we "
"discussed a few pages ago."

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.2.text"
msgstr ""
"In particular the `returns` are redundant because "
"`filename.endswith(\".png\") or filename.endswith(\".jpg\")` is already the "
"desired boolean."

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.3.text"
msgstr ""
"So you can just write:\n"
"\n"
"__code0__"

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.4.text"
msgstr "For the real exercise, you can do something similar."

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.5.text"
msgstr "The difference in the real exercise is that the result is reversed."

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.6.text"
msgstr ""
"That is, `invalid_image` returns `True` when `valid_image` returns `False` "
"and vice versa."

msgid "pages.IntroducingNotPage.steps.NotPriority.hints.7.text"
msgstr "Remember what `not` does?"

msgid "pages.IntroducingNotPage.title"
msgstr "Introducing `not`"
