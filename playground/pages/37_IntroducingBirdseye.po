#
msgid ""
msgstr ""

msgid "pages.IntroducingBirdseye.steps.first_birdseye_example.text"
msgstr ""
"Widziałeś `snoop` i Python Tutor. futurecoder oferuje jeszcze jedno narzędzie do analizowania programów w trakcie ich działania, nazywa się `birdseye`.\n"
"\n"
"Oto przykładowy program do uruchomienia. Skopiuj go do edytora i kliknij przycisk `birdseye`. Otworzy się nowa karta przeglądarki z wizualizacją.\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.IntroducingBirdseye.steps.birdseye_loop_example.text"
msgstr ""
"Podczas gdy inne narzędzia pokazują, jak kod działa linia po linii i jakie są wartości zmiennych, `birdseye` pokazuje wartość każdego wyrażenia w programie. Pozwala to zobaczyć, jak skomplikowane wyrażenie jest rozbijane na mniejsze podwyrażenia\n"
"i jaka jest wartość każdego z nich.\n"
"\n"
"Najedź kursorem na różne wyrażenia w ramkach w ostatniej linii programu.\n"
"W miarę jak każde pole zostanie wyróżnione, jego wartość jest wyświetlana na dole ekranu. Kliknięcie na pole przyklei je do panelu, dzięki czemu możesz zobaczyć wartości kilku wyrażeń na raz i swobodnie przemieszczać mysz.\n"
"\n"
"W tym przypadku `birdseye` pokazuje, że wyrażenie:\n"
"\n"
"__code0__\n"
"\n"
"zostaje rozbite na\n"
"\n"
"__code1__\n"
"\n"
"a nie\n"
"\n"
"__code2__\n"
"\n"
"Innymi słowy, Python przestrzega zwykłego porządku działań matematycznych, a nie tylko oceniania od lewej do prawej.\n"
"\n"
"Zauważ, że są pewne wyrażenia, na które `birdseye` nie nakłada ramki. W tym przypadku `2`, `3`, `4`, `5` oraz `print` są również wyrażeniami, ale ich wartości są oczywiste i ramkowanie ich byłoby tylko zbędnym bałaganem.\n"
"\n"
"Oto bardziej skomplikowany przykład do wypróbowania:\n"
"\n"
"    __copyable__\n"
"__code3__"

msgid "pages.IntroducingBirdseye.steps.final_text.text"
msgstr ""
"Zwróć uwagę, że:\n"
"\n"
"1. Obok pętli for znajduje się para strzałek. Kliknij je, aby nawigować w czasie przez pętlę i zobaczyć, co działo się w różnych iteracjach.\n"
"2. Kod, który nie był wykonywany w iteracji z powodu `if`, jest wyszarzony. Wyrażenia wewnątrz nie mają wartości, ponieważ nie były oceniane.\n"
"3. Zapisane wartości dla wyrażeń `vowels` i `consonants` zależą od tego, na które pole patrzysz. W linijkach po pętli zawierają one wszystkie litery, ale wewnątrz pętli mają tylko niektóre, i dokładna ich liczba zależy od tego, która iteracja jest aktualnie rozpatrywana.\n"
"4. W `vowels.append(letter)`, widać jakie wartości miały te zmienne *w tamtym momencie*. Oznacza to, że `letter` jest na punkcie dołączenia do `vowels`, ale to jeszcze się nie stało, więc `vowels` nie zawiera jeszcze `letter`."

msgid "pages.IntroducingBirdseye.title"
msgstr "Understanding Programs with `birdseye`"
