#
msgid ""
msgstr ""

msgid "pages.EqualsVsIs.steps.two_separate_lists.text"
msgstr ""
"Czas poznać kilka technicznych szczegółów, które często są źle rozumiane i prowadzą do błędów.\n"
"Uruchom ten program:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.EqualsVsIs.steps.same_list.text"
msgstr ""
"Ten program jest dość prosty i składa się głównie z rzeczy, które już znasz.\n"
"Tworzymy dwie zmienne, które odnoszą się do list.\n"
"Listy mają takie same elementy, więc są równe: `list1 == list2` jest `True`.\n"
"\n"
"Ale potem pojawia się nowy operator porównania: `is`. Tutaj `list1 is list2` jest `False`.\n"
"Oznacza to, że niezależnie od tego, że dwie listy są równe,\n"
"są nadal dwiema odrębnymi, różnymi, indywidualnymi listami.\n"
"W rezultacie, kiedy do `list1` dodasz 4, zmienia się tylko `list1`.\n"
"\n"
"Teraz zmień `list2 = [1, 2, 3]` na `list2 = list1` i zobacz, jaką różnicę to sprawi."

msgid "pages.EqualsVsIs.steps.final_text.text"
msgstr ""
"Teraz `list1 is list2` jest `True`, ponieważ *jest tylko jedna lista*, i obie zmienne\n"
"`list1` i `list2` odnoszą się do tej samej listy. `list1.append(4)` dodaje do jednej listy\n"
"i wynik można zobaczyć zarówno w `print(list1)`, jak i `print(list2)`, ponieważ obie linie\n"
"teraz są tylko różnymi sposobami drukowania tej samej listy.\n"
"\n"
"Polecam uruchomić obie wersje w Python Tutor, aby zobaczyć, jak wizualizuje on różnicę.\n"
"W drugim przypadku obie zmienne mają strzałki wskazujące na pojedynczy obiekt listy.\n"
"\n"
"`list2 = list1` nie tworzy wiecznego połączenia między zmiennymi. Jeśli przypiszesz nową wartość\n"
"do *którejkolwiek* z zmiennych, np. `list1 = [7, 8, 9]`, druga zmienna nie będzie miała na to wpływu\n"
"i nadal będzie wskazywać na oryginalną listę.\n"
"\n"
"W podstawowy sposób, przypisanie takie jak:\n"
"\n"
"    list2 = <wyrażenie>\n"
"\n"
"oznacza 'zrób, aby zmienna `list2` odnosiła się do tego, na co `<wyrażenie>` się oblicza'.\n"
"To nie robi kopii tej wartości, co sprawia, że obie zmienne mogą wskazywać na tę samą listę.\n"
"Ale jak już wcześniej się nauczyliśmy, `list2` nie pamięta `<wyrażenia>`, tylko wartość.\n"
"Nie wie o innych zmiennych.\n"
"\n"
"Można skopiować listę za pomocą metody `copy`:\n"
"\n"
"__code0__\n"
"\n"
"To sprawi, że program będzie zachowywał się jak pierwsza wersja.\n"
"\n"
"Jeśli napotkasz taki problem i nadal masz trudności z zrozumieniem tych zagadnień, przeczytaj esej [Fakty i mity o nazwach i wartościach w Pythonie](https://nedbatchelder.com/text/names.html)."

msgid "pages.EqualsVsIs.title"
msgstr "`==` vs `is`, and Having Multiple Names for One Value"

msgid "pages.EqualsVsIs.steps.same_list.requirements"
msgstr ""
"Run the same program as above, but replace the *second* `[1, 2, 3]` with "
"`list1`."
