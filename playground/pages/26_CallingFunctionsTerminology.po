#
msgid ""
msgstr ""

msgid "pages.CallingFunctionsTerminology.steps.print_functions.text"
msgstr ""
"Nadszedł czas, aby jeszcze bardziej poszerzyć Twoje słownictwo.\n"
"\n"
"`print` i `len` to ***funkcje***. Przekonaj się sam:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.introducing_callable.text"
msgstr ""
"Wyrażenie takie jak `len(things)` czy `print(things)` to ***wywołanie*** funkcji - kiedy to piszesz, ***wywołujesz*** funkcję `len` lub `print`. Fakt, że jest to możliwe, oznacza, że funkcje są ***wywoływalne***:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.not_callable.text"
msgstr ""
"Większość rzeczy nie jest wywoływalna, więc próba wywołania ich skończy się błędem:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.print_returns_none.text"
msgstr ""
"W wywołaniu `len(things)`, `things` jest ***argumentem***. Czasami możesz także spotkać słowo ***parametr***, które oznacza mniej więcej to samo co argument. To trochę jakbyś podawał argument funkcji - konkretnie mówimy, że argument `things` jest *przekazywany* do `len`, a `len` *akceptuje* lub *odbiera* argument.\n"
"\n"
"`len(things)` zostanie obliczone do liczby, takiej jak 3, w tym przypadku mówimy, że `len` ***zwróciła*** 3.\n"
"\n"
"Wszystkie wywołania muszą coś zwrócić... nawet jeśli jest to nic. Na przykład zadaniem `print` jest wyświetlenie czegoś na ekranie, a nie zwrócenie użytecznej wartości. Dlatego zamiast tego zwraca coś bezużytecznego:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.len_of_none.text"
msgstr ""
"`None` to specjalna wartość 'null', która nie posiada żadnych interesujących właściwości. Jest to powszechny symbol zastępczy, który reprezentuje brak prawdziwej, użytecznej wartości. Funkcje, które nie chcą niczego zwracać, domyślnie zwracają `None`. Jeśli zobaczysz komunikat o błędzie dotyczący `None` lub `NoneType`, często oznacza to, że przypisałeś złą rzecz do zmiennej:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.methods_of_str.text"
msgstr ""
"***Metoda*** to funkcja, która należy do jakiegoś typu i może być wywołana na wszystkich wartościach danego typu przy użyciu `.`. Na przykład, `upper` i `lower` są metodami łańcuchów znaków, które wywołuje się używając na przykład `word.upper()`:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.no_append_for_str.text"
msgstr ""
"Innym przykładem jest to, że `append` jest metodą list. Ale nie możesz użyć `.upper` na liście ani `.append` na łańcuchu znaków:\n"
"\n"
"__program_indented__"

msgid "pages.CallingFunctionsTerminology.steps.final_text.text"
msgstr ""
"Słowo 'atrybut' w komunikacie o błędzie odnosi się do użycia `.` - błąd "
"pojawia się właściwie już przy `word.append`, nawet bez wywołania metody."

msgid "pages.CallingFunctionsTerminology.title"
msgstr "Terminology: Calling functions and methods"
