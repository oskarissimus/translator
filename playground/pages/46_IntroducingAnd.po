#
msgid ""
msgstr ""

msgid "pages.IntroducingAnd.steps.TrueAndTrue.text"
msgstr ""
"Inny operatorem logicznym w Pythonie jest `and`.\n"
"Wyrażenie `A and B` jest `True` tylko wtedy, gdy ZARÓWNO `A`, jak i `B` są `True`. W przeciwnym razie jest `False`.\n"
"Wypróbuj to w konsoli:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingAnd.steps.TrueAndFalse.text"
msgstr ""
"Dobrze, teraz spróbuj:\n"
"\n"
"__program_indented__\n"
"\n"
"Czego się spodziewasz?"

msgid "pages.IntroducingAnd.steps.FalseAndFalse.text"
msgstr ""
"Na koniec spróbuj:\n"
"\n"
"__program_indented__"

msgid "pages.IntroducingAnd.steps.AndExercise.text"
msgstr ""
"Ćwiczmy teraz. Wcześniej napisaliśmy funkcję `is_valid_percentage` używając `or`. Oto przykładowe\n"
"rozwiązanie:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Przepisz tę funkcję używając zamiast tego `and`."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.text"
msgstr ""
"Świetnie! Oto jedno z możliwych rozwiązań:\n"
"\n"
"__code0__\n"
"\n"
"Jak poprzednio, możemy uprościć to rozwiązanie do:\n"
"\n"
"__code1__\n"
"\n"
"Jest jeszcze inny sposób, aby to jeszcze bardziej ulepszyć, zwany łączeniem porównań. Każdy warunek tego typu:\n"
"\n"
"__code2__\n"
"\n"
"można skrócić poprzez usunięcie dodatkowego `and b` do:\n"
"\n"
"__code3__\n"
"\n"
"To działa dla wszystkich operatorów porównania, włączając `==`, a nawet dwa operatory mogą być różne.\n"
"Więc rozwiązanie można uprościć do:\n"
"\n"
"__code4__\n"
"\n"
"Następne ćwiczenie: mając listę trzech elementów, sprawdź, czy wszystkie trzy elementy są sobie równe.\n"
"\n"
"    __copyable__\n"
"__code5__"

msgid "pages.IntroducingAnd.steps.final_text.text"
msgstr ""
"Dobra robota. Istnieje wiele możliwych poprawnych rozwiązań:\n"
"\n"
"__code0__\n"
"\n"
"lub używając ponownie łączenia porównań:\n"
"\n"
"__code1__\n"
"\n"
"lub sprawdzając, czy jest równa liście zawierającej trzy razy pierwszy element:\n"
"\n"
"__code2__"

msgid "pages.IntroducingAnd.steps.AndExercise.hints.0.text"
msgstr ""
"If you have something like `x < 0 and x > 100`, you're on the wrong track. "
"That's going to be `False` for *any* value of `x`!"

msgid "pages.IntroducingAnd.steps.AndExercise.hints.1.text"
msgstr ""
"The solution with `and` is different in several ways from the solution with "
"`or`."

msgid "pages.IntroducingAnd.steps.AndExercise.hints.2.text"
msgstr ""
"Our solution with `or` first determines if `x` is an invalid percentage, "
"else concludes validity. Using `and` will do this in reverse."

msgid "pages.IntroducingAnd.steps.AndExercise.hints.3.text"
msgstr "You will have to reverse the `return` statements accordingly."

msgid "pages.IntroducingAnd.steps.AndExercise.hints.4.text"
msgstr "You will have to change the comparison operators too."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.0.text"
msgstr "The list will always have 3 elements."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.1.text"
msgstr "That means you don't need to use a loop."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.2.text"
msgstr "Remember that you can get the first element using `row[0]`."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.3.text"
msgstr ""
"The first element, second element, and third element all need to be equal."

msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.4.text"
msgstr ""
"That means the first element should be equal to the second element and also "
"the third element."

msgid "pages.IntroducingAnd.title"
msgstr "Introducing `and`"
